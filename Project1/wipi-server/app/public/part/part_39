        {\n          key: file.uid,\n          class: [\n            \"el-upload-list__item\",\n            \"is-\" + file.status,\n            _vm.focusing ? \"focusing\" : \"\"\n          ],\n          attrs: { tabindex: \"0\" },\n          on: {\n            keydown: function($event) {\n              if (\n                !(\"button\" in $event) &&\n                _vm._k($event.keyCode, \"delete\", [8, 46], $event.key, [\n                  \"Backspace\",\n                  \"Delete\",\n                  \"Del\"\n                ])\n              ) {\n                return null\n              }\n              !_vm.disabled && _vm.$emit(\"remove\", file)\n            },\n            focus: function($event) {\n              _vm.focusing = true\n            },\n            blur: function($event) {\n              _vm.focusing = false\n            },\n            click: function($event) {\n              _vm.focusing = false\n            }\n          }\n        },\n        [\n          _vm._t(\n            \"default\",\n            [\n              file.status !== \"uploading\" &&\n              [\"picture-card\", \"picture\"].indexOf(_vm.listType) > -1\n                ? _c(\"img\", {\n                    staticClass: \"el-upload-list__item-thumbnail\",\n                    attrs: { src: file.url, alt: \"\" }\n                  })\n                : _vm._e(),\n              _c(\n                \"a\",\n                {\n                  staticClass: \"el-upload-list__item-name\",\n                  on: {\n                    click: function($event) {\n                      _vm.handleClick(file)\n                    }\n                  }\n                },\n                [\n                  _c(\"i\", { staticClass: \"el-icon-document\" }),\n                  _vm._v(_vm._s(file.name) + \"\\n      \")\n                ]\n              ),\n              _c(\n                \"label\",\n                { staticClass: \"el-upload-list__item-status-label\" },\n                [\n                  _c(\"i\", {\n                    class: {\n                      \"el-icon-upload-success\": true,\n                      \"el-icon-circle-check\": _vm.listType === \"text\",\n                      \"el-icon-check\":\n                        [\"picture-card\", \"picture\"].indexOf(_vm.listType) > -1\n                    }\n                  })\n                ]\n              ),\n              !_vm.disabled\n                ? _c(\"i\", {\n                    staticClass: \"el-icon-close\",\n                    on: {\n                      click: function($event) {\n                        _vm.$emit(\"remove\", file)\n                      }\n                    }\n                  })\n                : _vm._e(),\n              !_vm.disabled\n                ? _c(\"i\", { staticClass: \"el-icon-close-tip\" }, [\n                    _vm._v(_vm._s(_vm.t(\"el.upload.deleteTip\")))\n                  ])\n                : _vm._e(),\n              file.status === \"uploading\"\n                ? _c(\"el-progress\", {\n                    attrs: {\n                      type: _vm.listType === \"picture-card\" ? \"circle\" : \"line\",\n                      \"stroke-width\": _vm.listType === \"picture-card\" ? 6 : 2,\n                      percentage: _vm.parsePercentage(file.percentage)\n                    }\n                  })\n                : _vm._e(),\n              _vm.listType === \"picture-card\"\n                ? _c(\"span\", { staticClass: \"el-upload-list__item-actions\" }, [\n                    _vm.handlePreview && _vm.listType === \"picture-card\"\n                      ? _c(\n                          \"span\",\n                          {\n                            staticClass: \"el-upload-list__item-preview\",\n                            on: {\n                              click: function($event) {\n                                _vm.handlePreview(file)\n                              }\n                            }\n                          },\n                          [_c(\"i\", { staticClass: \"el-icon-zoom-in\" })]\n                        )\n                      : _vm._e(),\n                    !_vm.disabled\n                      ? _c(\n                          \"span\",\n                          {\n                            staticClass: \"el-upload-list__item-delete\",\n                            on: {\n                              click: function($event) {\n                                _vm.$emit(\"remove\", file)\n                              }\n                            }\n                          },\n                          [_c(\"i\", { staticClass: \"el-icon-delete\" })]\n                        )\n                      : _vm._e()\n                  ])\n                : _vm._e()\n            ],\n            { file: file }\n          )\n        ],\n        2\n      )\n    }),\n    0\n  )\n}\nvar upload_listvue_type_template_id_173fedf5_staticRenderFns = []\nupload_listvue_type_template_id_173fedf5_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/upload/src/upload-list.vue?vue&type=template&id=173fedf5&\n\n// EXTERNAL MODULE: external \"element-ui/lib/progress\"\nvar progress_ = __webpack_require__(33);\nvar progress_default = /*#__PURE__*/__webpack_require__.n(progress_);\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/upload/src/upload-list.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n/* harmony default export */ var upload_listvue_type_script_lang_js_ = ({\n\n  name: 'ElUploadList',\n\n  mixins: [locale_default.a],\n\n  data: function data() {\n    return {\n      focusing: false\n    };\n  },\n\n  components: { ElProgress: progress_default.a },\n\n  props: {\n    files: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    handlePreview: Function,\n    listType: String\n  },\n  methods: {\n    parsePercentage: function parsePercentage(val) {\n      return parseInt(val, 10);\n    },\n    handleClick: function handleClick(file) {\n      this.handlePreview && this.handlePreview(file);\n    }\n  }\n});\n// CONCATENATED MODULE: ./packages/upload/src/upload-list.vue?vue&type=script&lang=js&\n /* harmony default export */ var src_upload_listvue_type_script_lang_js_ = (upload_listvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/upload/src/upload-list.vue\n\n\n\n\n\n/* normalize component */\n\nvar upload_list_component = normalizeComponent(\n  src_upload_listvue_type_script_lang_js_,\n  upload_listvue_type_template_id_173fedf5_render,\n  upload_listvue_type_template_id_173fedf5_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var upload_list_api; }\nupload_list_component.options.__file = \"packages/upload/src/upload-list.vue\"\n/* harmony default export */ var upload_list = (upload_list_component.exports);\n// EXTERNAL MODULE: external \"babel-helper-vue-jsx-merge-props\"\nvar external_babel_helper_vue_jsx_merge_props_ = __webpack_require__(24);\nvar external_babel_helper_vue_jsx_merge_props_default = /*#__PURE__*/__webpack_require__.n(external_babel_helper_vue_jsx_merge_props_);\n\n// CONCATENATED MODULE: ./packages/upload/src/ajax.js\nfunction getError(action, option, xhr) {\n  var msg = void 0;\n  if (xhr.response) {\n    msg = '' + (xhr.response.error || xhr.response);\n  } else if (xhr.responseText) {\n    msg = '' + xhr.responseText;\n  } else {\n    msg = 'fail to post ' + action + ' ' + xhr.status;\n  }\n\n  var err = new Error(msg);\n  err.status = xhr.status;\n  err.method = 'post';\n  err.url = action;\n  return err;\n}\n\nfunction getBody(xhr) {\n  var text = xhr.responseText || xhr.response;\n  if (!text) {\n    return text;\n  }\n\n  try {\n    return JSON.parse(text);\n  } catch (e) {\n    return text;\n  }\n}\n\nfunction upload(option) {\n  if (typeof XMLHttpRequest === 'undefined') {\n    return;\n  }\n\n  var xhr = new XMLHttpRequest();\n  var action = option.action;\n\n  if (xhr.upload) {\n    xhr.upload.onprogress = function progress(e) {\n      if (e.total > 0) {\n        e.percent = e.loaded / e.total * 100;\n      }\n      option.onProgress(e);\n    };\n  }\n\n  var formData = new FormData();\n\n  if (option.data) {\n    Object.keys(option.data).forEach(function (key) {\n      formData.append(key, option.data[key]);\n    });\n  }\n\n  formData.append(option.filename, option.file, option.file.name);\n\n  xhr.onerror = function error(e) {\n    option.onError(e);\n  };\n\n  xhr.onload = function onload() {\n    if (xhr.status < 200 || xhr.status >= 300) {\n      return option.onError(getError(action, option, xhr));\n    }\n\n    option.onSuccess(getBody(xhr));\n  };\n\n  xhr.open('post', action, true);\n\n  if (option.withCredentials && 'withCredentials' in xhr) {\n    xhr.withCredentials = true;\n  }\n\n  var headers = option.headers || {};\n\n  for (var item in headers) {\n    if (headers.hasOwnProperty(item) && headers[item] !== null) {\n      xhr.setRequestHeader(item, headers[item]);\n    }\n  }\n  xhr.send(formData);\n  return xhr;\n}\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/upload/src/upload-dragger.vue?vue&type=template&id=7ebbf219&\nvar upload_draggervue_type_template_id_7ebbf219_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    {\n      staticClass: \"el-upload-dragger\",\n      class: {\n        \"is-dragover\": _vm.dragover\n      },\n      on: {\n        drop: function($event) {\n          $event.preventDefault()\n          return _vm.onDrop($event)\n        },\n        dragover: function($event) {\n          $event.preventDefault()\n          return _vm.onDragover($event)\n        },\n        dragleave: function($event) {\n          $event.preventDefault()\n          _vm.dragover = false\n        }\n      }\n    },\n    [_vm._t(\"default\")],\n    2\n  )\n}\nvar upload_draggervue_type_template_id_7ebbf219_staticRenderFns = []\nupload_draggervue_type_template_id_7ebbf219_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/upload/src/upload-dragger.vue?vue&type=template&id=7ebbf219&\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/upload/src/upload-dragger.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* harmony default export */ var upload_draggervue_type_script_lang_js_ = ({\n  name: 'ElUploadDrag',\n  props: {\n    disabled: Boolean\n  },\n  inject: {\n    uploader: {\n      default: ''\n    }\n  },\n  data: function data() {\n    return {\n      dragover: false\n    };\n  },\n\n  methods: {\n    onDragover: function onDragover() {\n      if (!this.disabled) {\n        this.dragover = true;\n      }\n    },\n    onDrop: function onDrop(e) {\n      if (this.disabled || !this.uploader) return;\n      var accept = this.uploader.accept;\n      this.dragover = false;\n      if (!accept) {\n        this.$emit('file', e.dataTransfer.files);\n        return;\n      }\n      this.$emit('file', [].slice.call(e.dataTransfer.files).filter(function (file) {\n        var type = file.type,\n            name = file.name;\n\n        var extension = name.indexOf('.') > -1 ? '.' + name.split('.').pop() : '';\n        var baseType = type.replace(/\\/.*$/, '');\n        return accept.split(',').map(function (type) {\n          return type.trim();\n        }).filter(function (type) {\n          return type;\n        }).some(function (acceptedType) {\n          if (/\\..+$/.test(acceptedType)) {\n            return extension === acceptedType;\n          }\n          if (/\\/\\*$/.test(acceptedType)) {\n            return baseType === acceptedType.replace(/\\/\\*$/, '');\n          }\n          if (/^[^\\/]+\\/[^\\/]+$/.test(acceptedType)) {\n            return type === acceptedType;\n          }\n          return false;\n        });\n      }));\n    }\n  }\n});\n// CONCATENATED MODULE: ./packages/upload/src/upload-dragger.vue?vue&type=script&lang=js&\n /* harmony default export */ var src_upload_draggervue_type_script_lang_js_ = (upload_draggervue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/upload/src/upload-dragger.vue\n\n\n\n\n\n/* normalize component */\n\nvar upload_dragger_component = normalizeComponent(\n  src_upload_draggervue_type_script_lang_js_,\n  upload_draggervue_type_template_id_7ebbf219_render,\n  upload_draggervue_type_template_id_7ebbf219_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var upload_dragger_api; }\nupload_dragger_component.options.__file = \"packages/upload/src/upload-dragger.vue\"\n/* harmony default export */ var upload_dragger = (upload_dragger_component.exports);\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/upload/src/upload.vue?vue&type=script&lang=js&\n\n\n\n\n\n/* harmony default export */ var uploadvue_type_script_lang_js_ = ({\n  inject: ['uploader'],\n  components: {\n    UploadDragger: upload_dragger\n  },\n  props: {\n    type: String,\n    action: {\n      type: String,\n      required: true\n    },\n    name: {\n      type: String,\n      default: 'file'\n    },\n    data: Object,\n    headers: Object,\n    withCredentials: Boolean,\n    multiple: Boolean,\n    accept: String,\n    onStart: Function,\n    onProgress: Function,\n    onSuccess: Function,\n    onError: Function,\n    beforeUpload: Function,\n    drag: Boolean,\n    onPreview: {\n      type: Function,\n      default: function _default() {}\n    },\n    onRemove: {\n      type: Function,\n      default: function _default() {}\n    },\n    fileList: Array,\n    autoUpload: Boolean,\n    listType: String,\n    httpRequest: {\n      type: Function,\n      default: upload\n    },\n    disabled: Boolean,\n    limit: Number,\n    onExceed: Function\n  },\n\n  data: function data() {\n    return {\n      mouseover: false,\n      reqs: {}\n    };\n  },\n\n\n  methods: {\n    isImage: function isImage(str) {\n      return str.indexOf('image') !== -1;\n    },\n    handleChange: function handleChange(ev) {\n      var files = ev.target.files;\n\n      if (!files) return;\n      this.uploadFiles(files);\n    },\n    uploadFiles: function uploadFiles(files) {\n      var _this = this;\n\n      if (this.limit && this.fileList.length + files.length > this.limit) {\n        this.onExceed && this.onExceed(files, this.fileList);\n        return;\n      }\n\n      var postFiles = Array.prototype.slice.call(files);\n      if (!this.multiple) {\n        postFiles = postFiles.slice(0, 1);\n      }\n\n      if (postFiles.length === 0) {\n        return;\n      }\n\n      postFiles.forEach(function (rawFile) {\n        _this.onStart(rawFile);\n        if (_this.autoUpload) _this.upload(rawFile);\n      });\n    },\n    upload: function upload(rawFile) {\n      var _this2 = this;\n\n      this.$refs.input.value = null;\n\n      if (!this.beforeUpload) {\n        return this.post(rawFile);\n      }\n\n      var before = this.beforeUpload(rawFile);\n      if (before && before.then) {\n        before.then(function (processedFile) {\n          var fileType = Object.prototype.toString.call(processedFile);\n\n          if (fileType === '[object File]' || fileType === '[object Blob]') {\n            if (fileType === '[object Blob]') {\n              processedFile = new File([processedFile], rawFile.name, {\n                type: rawFile.type\n              });\n            }\n            for (var p in rawFile) {\n              if (rawFile.hasOwnProperty(p)) {\n                processedFile[p] = rawFile[p];\n              }\n            }\n            _this2.post(processedFile);\n          } else {\n            _this2.post(rawFile);\n          }\n        }, function () {\n          _this2.onRemove(null, rawFile);\n        });\n      } else if (before !== false) {\n        this.post(rawFile);\n      } else {\n        this.onRemove(null, rawFile);\n      }\n    },\n    abort: function abort(file) {\n      var reqs = this.reqs;\n\n      if (file) {\n        var uid = file;\n        if (file.uid) uid = file.uid;\n        if (reqs[uid]) {\n          reqs[uid].abort();\n        }\n      } else {\n        Object.keys(reqs).forEach(function (uid) {\n          if (reqs[uid]) reqs[uid].abort();\n          delete reqs[uid];\n        });\n      }\n    },\n    post: function post(rawFile) {\n      var _this3 = this;\n\n      var uid = rawFile.uid;\n\n      var options = {\n        headers: this.headers,\n        withCredentials: this.withCredentials,\n        file: rawFile,\n        data: this.data,\n        filename: this.name,\n        action: this.action,\n        onProgress: function onProgress(e) {\n          _this3.onProgress(e, rawFile);\n        },\n        onSuccess: function onSuccess(res) {\n          _this3.onSuccess(res, rawFile);\n          delete _this3.reqs[uid];\n        },\n        onError: function onError(err) {\n          _this3.onError(err, rawFile);\n          delete _this3.reqs[uid];\n        }\n      };\n      var req = this.httpRequest(options);\n      this.reqs[uid] = req;\n      if (req && req.then) {\n        req.then(options.onSuccess, options.onError);\n      }\n    },\n    handleClick: function handleClick() {\n      if (!this.disabled) {\n        this.$refs.input.value = null;\n        this.$refs.input.click();\n      }\n    },\n    handleKeydown: function handleKeydown(e) {\n      if (e.target !== e.currentTarget) return;\n      if (e.keyCode === 13 || e.keyCode === 32) {\n        this.handleClick();\n      }\n    }\n  },\n\n  render: function render(h) {\n    var handleClick = this.handleClick,\n        drag = this.drag,\n        name = this.name,\n        handleChange = this.handleChange,\n        multiple = this.multiple,\n        accept = this.accept,\n        listType = this.listType,\n        uploadFiles = this.uploadFiles,\n        disabled = this.disabled,\n        handleKeydown = this.handleKeydown;\n\n    var data = {\n      class: {\n        'el-upload': true\n      },\n      on: {\n        click: handleClick,\n        keydown: handleKeydown\n      }\n    };\n    data.class['el-upload--' + listType] = true;\n    return h(\n      'div',\n      external_babel_helper_vue_jsx_merge_props_default()([data, {\n        attrs: { tabindex: '0' }\n      }]),\n      [drag ? h(\n        'upload-dragger',\n        {\n          attrs: { disabled: disabled },\n          on: {\n            'file': uploadFiles\n          }\n        },\n        [this.$slots.default]\n      ) : this.$slots.default, h('input', { 'class': 'el-upload__input', attrs: { type: 'file', name: name, multiple: multiple, accept: accept },\n        ref: 'input', on: {\n          'change': handleChange\n        }\n      })]\n    );\n  }\n});\n// CONCATENATED MODULE: ./packages/upload/src/upload.vue?vue&type=script&lang=js&\n /* harmony default export */ var src_uploadvue_type_script_lang_js_ = (uploadvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/upload/src/upload.vue\nvar upload_render, upload_staticRenderFns\n\n\n\n\n/* normalize component */\n\nvar upload_component = normalizeComponent(\n  src_uploadvue_type_script_lang_js_,\n  upload_render,\n  upload_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var upload_api; }\nupload_component.options.__file = \"packages/upload/src/upload.vue\"\n/* harmony default export */ var src_upload = (upload_component.exports);\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/upload/src/index.vue?vue&type=script&lang=js&\n\n\n\n\n\n\nfunction srcvue_type_script_lang_js_noop() {}\n\n/* harmony default export */ var srcvue_type_script_lang_js_ = ({\n  name: 'ElUpload',\n\n  mixins: [migrating_default.a],\n\n  components: {\n    ElProgress: progress_default.a,\n    UploadList: upload_list,\n    Upload: src_upload\n  },\n\n  provide: function provide() {\n    return {\n      uploader: this\n    };\n  },\n\n\n  inject: {\n    elForm: {\n      default: ''\n    }\n  },\n\n  props: {\n    action: {\n      type: String,\n      required: true\n    },\n    headers: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    },\n    data: Object,\n    multiple: Boolean,\n    name: {\n      type: String,\n      default: 'file'\n    },\n    drag: Boolean,\n    dragger: Boolean,\n    withCredentials: Boolean,\n    showFileList: {\n      type: Boolean,\n      default: true\n    },\n    accept: String,\n    type: {\n      type: String,\n      default: 'select'\n    },\n    beforeUpload: Function,\n    beforeRemove: Function,\n    onRemove: {\n      type: Function,\n      default: srcvue_type_script_lang_js_noop\n    },\n    onChange: {\n      type: Function,\n      default: srcvue_type_script_lang_js_noop\n    },\n    onPreview: {\n      type: Function\n    },\n    onSuccess: {\n      type: Function,\n      default: srcvue_type_script_lang_js_noop\n    },\n    onProgress: {\n      type: Function,\n      default: srcvue_type_script_lang_js_noop\n    },\n    onError: {\n      type: Function,\n      default: srcvue_type_script_lang_js_noop\n    },\n    fileList: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    autoUpload: {\n      type: Boolean,\n      default: true\n    },\n    listType: {\n      type: String,\n      default: 'text' // text,picture,picture-card\n    },\n    httpRequest: Function,\n    disabled: Boolean,\n    limit: Number,\n    onExceed: {\n      type: Function,\n      default: srcvue_type_script_lang_js_noop\n    }\n  },\n\n  data: function data() {\n    return {\n      uploadFiles: [],\n      dragOver: false,\n      draging: false,\n      tempIndex: 1\n    };\n  },\n\n\n  computed: {\n    uploadDisabled: function uploadDisabled() {\n      return this.disabled || (this.elForm || {}).disabled;\n    }\n  },\n\n  watch: {\n    listType: function listType(type) {\n      if (type === 'picture-card' || type === 'picture') {\n        this.uploadFiles = this.uploadFiles.map(function (file) {\n          if (!file.url && file.raw) {\n            try {\n              file.url = URL.createObjectURL(file.raw);\n            } catch (err) {\n              console.error('[Element Error][Upload]', err);\n            }\n          }\n          return file;\n        });\n      }\n    },\n\n    fileList: {\n      immediate: true,\n      handler: function handler(fileList) {\n        var _this = this;\n\n        this.uploadFiles = fileList.map(function (item) {\n          item.uid = item.uid || Date.now() + _this.tempIndex++;\n          item.status = item.status || 'success';\n          return item;\n        });\n      }\n    }\n  },\n\n  methods: {\n    handleStart: function handleStart(rawFile) {\n      rawFile.uid = Date.now() + this.tempIndex++;\n      var file = {\n        status: 'ready',\n        name: rawFile.name,\n        size: rawFile.size,\n        percentage: 0,\n        uid: rawFile.uid,\n        raw: rawFile\n      };\n\n      if (this.listType === 'picture-card' || this.listType === 'picture') {\n        try {\n          file.url = URL.createObjectURL(rawFile);\n        } catch (err) {\n          console.error('[Element Error][Upload]', err);\n          return;\n        }\n      }\n\n      this.uploadFiles.push(file);\n      this.onChange(file, this.uploadFiles);\n    },\n    handleProgress: function handleProgress(ev, rawFile) {\n      var file = this.getFile(rawFile);\n      this.onProgress(ev, file, this.uploadFiles);\n      file.status = 'uploading';\n      file.percentage = ev.percent || 0;\n    },\n    handleSuccess: function handleSuccess(res, rawFile) {\n      var file = this.getFile(rawFile);\n\n      if (file) {\n        file.status = 'success';\n        file.response = res;\n\n        this.onSuccess(res, file, this.uploadFiles);\n        this.onChange(file, this.uploadFiles);\n      }\n    },\n    handleError: function handleError(err, rawFile) {\n      var file = this.getFile(rawFile);\n      var fileList = this.uploadFiles;\n\n      file.status = 'fail';\n\n      fileList.splice(fileList.indexOf(file), 1);\n\n      this.onError(err, file, this.uploadFiles);\n      this.onChange(file, this.uploadFiles);\n    },\n    handleRemove: function handleRemove(file, raw) {\n      var _this2 = this;\n\n      if (raw) {\n        file = this.getFile(raw);\n      }\n      var doRemove = function doRemove() {\n        _this2.abort(file);\n        var fileList = _this2.uploadFiles;\n        fileList.splice(fileList.indexOf(file), 1);\n        _this2.onRemove(file, fileList);\n      };\n\n      if (!this.beforeRemove) {\n        doRemove();\n      } else if (typeof this.beforeRemove === 'function') {\n        var before = this.beforeRemove(file, this.uploadFiles);\n        if (before && before.then) {\n          before.then(function () {\n            doRemove();\n          }, srcvue_type_script_lang_js_noop);\n        } else if (before !== false) {\n          doRemove();\n        }\n      }\n    },\n    getFile: function getFile(rawFile) {\n      var fileList = this.uploadFiles;\n      var target = void 0;\n      fileList.every(function (item) {\n        target = rawFile.uid === item.uid ? item : null;\n        return !target;\n      });\n      return target;\n    },\n    abort: function abort(file) {\n      this.$refs['upload-inner'].abort(file);\n    },\n    clearFiles: function clearFiles() {\n      this.uploadFiles = [];\n    },\n    submit: function submit() {\n      var _this3 = this;\n\n      this.uploadFiles.filter(function (file) {\n        return file.status === 'ready';\n      }).forEach(function (file) {\n        _this3.$refs['upload-inner'].upload(file.raw);\n      });\n    },\n    getMigratingConfig: function getMigratingConfig() {\n      return {\n        props: {\n          'default-file-list': 'default-file-list is renamed to file-list.',\n          'show-upload-list': 'show-upload-list is renamed to show-file-list.',\n          'thumbnail-mode': 'thumbnail-mode has been deprecated, you can implement the same effect according to this case: http://element.eleme.io/#/zh-CN/component/upload#yong-hu-tou-xiang-shang-chuan'\n        }\n      };\n    }\n  },\n\n  beforeDestroy: function beforeDestroy() {\n    this.uploadFiles.forEach(function (file) {\n      if (file.url && file.url.indexOf('blob:') === 0) {\n        URL.revokeObjectURL(file.url);\n      }\n    });\n  },\n  render: function render(h) {\n    var _this4 = this;\n\n    var uploadList = void 0;\n\n    if (this.showFileList) {\n      uploadList = h(\n        upload_list,\n        {\n          attrs: {\n            disabled: this.uploadDisabled,\n            listType: this.listType,\n            files: this.uploadFiles,\n\n            handlePreview: this.onPreview },\n          on: {\n            'remove': this.handleRemove\n          }\n        },\n        [function (props) {\n          if (_this4.$scopedSlots.file) {\n            return _this4.$scopedSlots.file({\n              file: props.file\n            });\n          }\n        }]\n      );\n    }\n\n    var uploadData = {\n      props: {\n        type: this.type,\n        drag: this.drag,\n        action: this.action,\n        multiple: this.multiple,\n        'before-upload': this.beforeUpload,\n        'with-credentials': this.withCredentials,\n        headers: this.headers,\n        name: this.name,\n        data: this.data,\n        accept: this.accept,\n        fileList: this.uploadFiles,\n        autoUpload: this.autoUpload,\n        listType: this.listType,\n        disabled: this.uploadDisabled,\n        limit: this.limit,\n        'on-exceed': this.onExceed,\n        'on-start': this.handleStart,\n        'on-progress': this.handleProgress,\n        'on-success': this.handleSuccess,\n        'on-error': this.handleError,\n        'on-preview': this.onPreview,\n        'on-remove': this.handleRemove,\n        'http-request': this.httpRequest\n      },\n      ref: 'upload-inner'\n    };\n\n    var trigger = this.$slots.trigger || this.$slots.default;\n    var uploadComponent = h(\n      'upload',\n      uploadData,\n      [trigger]\n    );\n\n    return h('div', [this.listType === 'picture-card' ? uploadList : '', this.$slots.trigger ? [uploadComponent, this.$slots.default] : uploadComponent, this.$slots.tip, this.listType !== 'picture-card' ? uploadList : '']);\n  }\n});\n// CONCATENATED MODULE: ./packages/upload/src/index.vue?vue&type=script&lang=js&\n /* harmony default export */ var upload_srcvue_type_script_lang_js_ = (srcvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/upload/src/index.vue\nvar src_render, src_staticRenderFns\n\n\n\n\n/* normalize component */\n\nvar upload_src_component = normalizeComponent(\n  upload_srcvue_type_script_lang_js_,\n  src_render,\n  src_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var src_api; }\nupload_src_component.options.__file = \"packages/upload/src/index.vue\"\n/* harmony default export */ var upload_src = (upload_src_component.exports);\n// CONCATENATED MODULE: ./packages/upload/index.js\n\n\n/* istanbul ignore next */\nupload_src.install = function (Vue) {\n  Vue.component(upload_src.name, upload_src);\n};\n\n/* harmony default export */ var packages_upload = (upload_src);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/progress/src/progress.vue?vue&type=template&id=229ee406&\nvar progressvue_type_template_id_229ee406_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    {\n      staticClass: \"el-progress\",\n      class: [\n        \"el-progress--\" + _vm.type,\n        _vm.status ? \"is-\" + _vm.status : \"\",\n        {\n          \"el-progress--without-text\": !_vm.showText,\n          \"el-progress--text-inside\": _vm.textInside\n        }\n      ],\n      attrs: {\n        role: \"progressbar\",\n        \"aria-valuenow\": _vm.percentage,\n        \"aria-valuemin\": \"0\",\n        \"aria-valuemax\": \"100\"\n      }\n    },\n    [\n      _vm.type === \"line\"\n        ? _c(\"div\", { staticClass: \"el-progress-bar\" }, [\n            _c(\n              \"div\",\n              {\n                staticClass: \"el-progress-bar__outer\",\n                style: { height: _vm.strokeWidth + \"px\" }\n              },\n              [\n                _c(\n                  \"div\",\n                  {\n                    staticClass: \"el-progress-bar__inner\",\n                    style: _vm.barStyle\n                  },\n                  [\n                    _vm.showText && _vm.textInside\n                      ? _c(\n                          \"div\",\n                          { staticClass: \"el-progress-bar__innerText\" },\n                          [_vm._v(_vm._s(_vm.content))]\n                        )\n                      : _vm._e()\n                  ]\n                )\n              ]\n            )\n          ])\n        : _c(\n            \"div\",\n            {\n              staticClass: \"el-progress-circle\",\n              style: { height: _vm.width + \"px\", width: _vm.width + \"px\" }\n            },\n            [\n              _c(\"svg\", { attrs: { viewBox: \"0 0 100 100\" } }, [\n                _c(\"path\", {\n                  staticClass: \"el-progress-circle__track\",\n                  style: _vm.trailPathStyle,\n                  attrs: {\n                    d: _vm.trackPath,\n                    stroke: \"#e5e9f2\",\n                    \"stroke-width\": _vm.relativeStrokeWidth,\n                    fill: \"none\"\n                  }\n                }),\n                _c(\"path\", {\n                  staticClass: \"el-progress-circle__path\",\n                  style: _vm.circlePathStyle,\n                  attrs: {\n                    d: _vm.trackPath,\n                    stroke: _vm.stroke,\n                    fill: \"none\",\n                    \"stroke-linecap\": _vm.strokeLinecap,\n                    \"stroke-width\": _vm.percentage ? _vm.relativeStrokeWidth : 0\n                  }\n                })\n              ])\n            ]\n          ),\n      _vm.showText && !_vm.textInside\n        ? _c(\n            \"div\",\n            {\n              staticClass: \"el-progress__text\",\n              style: { fontSize: _vm.progressTextSize + \"px\" }\n            },\n            [\n              !_vm.status\n                ? [_vm._v(_vm._s(_vm.content))]\n                : _c(\"i\", { class: _vm.iconClass })\n            ],\n            2\n          )\n        : _vm._e()\n    ]\n  )\n}\nvar progressvue_type_template_id_229ee406_staticRenderFns = []\nprogressvue_type_template_id_229ee406_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/progress/src/progress.vue?vue&type=template&id=229ee406&\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/progress/src/progress.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* harmony default export */ var progressvue_type_script_lang_js_ = ({\n  name: 'ElProgress',\n  props: {\n    type: {\n      type: String,\n      default: 'line',\n      validator: function validator(val) {\n        return ['line', 'circle', 'dashboard'].indexOf(val) > -1;\n      }\n    },\n    percentage: {\n      type: Number,\n      default: 0,\n      required: true,\n      validator: function validator(val) {\n        return val >= 0 && val <= 100;\n      }\n    },\n    status: {\n      type: String,\n      validator: function validator(val) {\n        return ['success', 'exception', 'warning'].indexOf(val) > -1;\n      }\n    },\n    strokeWidth: {\n      type: Number,\n      default: 6\n    },\n    strokeLinecap: {\n      type: String,\n      default: 'round'\n    },\n    textInside: {\n      type: Boolean,\n      default: false\n    },\n    width: {\n      type: Number,\n      default: 126\n    },\n    showText: {\n      type: Boolean,\n      default: true\n    },\n    color: {\n      type: [String, Array, Function],\n      default: ''\n    },\n    format: Function\n  },\n  computed: {\n    barStyle: function barStyle() {\n      var style = {};\n      style.width = this.percentage + '%';\n      style.backgroundColor = this.getCurrentColor(this.percentage);\n      return style;\n    },\n    relativeStrokeWidth: function relativeStrokeWidth() {\n      return (this.strokeWidth / this.width * 100).toFixed(1);\n    },\n    radius: function radius() {\n      if (this.type === 'circle' || this.type === 'dashboard') {\n        return parseInt(50 - parseFloat(this.relativeStrokeWidth) / 2, 10);\n      } else {\n        return 0;\n      }\n    },\n    trackPath: function trackPath() {\n      var radius = this.radius;\n      var isDashboard = this.type === 'dashboard';\n      return '\\n        M 50 50\\n        m 0 ' + (isDashboard ? '' : '-') + radius + '\\n        a ' + radius + ' ' + radius + ' 0 1 1 0 ' + (isDashboard ? '-' : '') + radius * 2 + '\\n        a ' + radius + ' ' + radius + ' 0 1 1 0 ' + (isDashboard ? '' : '-') + radius * 2 + '\\n        ';\n    },\n    perimeter: function perimeter() {\n      return 2 * Math.PI * this.radius;\n    },\n    rate: function rate() {\n      return this.type === 'dashboard' ? 0.75 : 1;\n    },\n    strokeDashoffset: function strokeDashoffset() {\n      var offset = -1 * this.perimeter * (1 - this.rate) / 2;\n      return offset + 'px';\n    },\n    trailPathStyle: function trailPathStyle() {\n      return {\n        strokeDasharray: this.perimeter * this.rate + 'px, ' + this.perimeter + 'px',\n        strokeDashoffset: this.strokeDashoffset\n      };\n    },\n    circlePathStyle: function circlePathStyle() {\n      return {\n        strokeDasharray: this.perimeter * this.rate * (this.percentage / 100) + 'px, ' + this.perimeter + 'px',\n        strokeDashoffset: this.strokeDashoffset,\n        transition: 'stroke-dasharray 0.6s ease 0s, stroke 0.6s ease'\n      };\n    },\n    stroke: function stroke() {\n      var ret = void 0;\n      if (this.color) {\n        ret = this.getCurrentColor(this.percentage);\n      } else {\n        switch (this.status) {\n          case 'success':\n            ret = '#13ce66';\n            break;\n          case 'exception':\n            ret = '#ff4949';\n            break;\n          case 'warning':\n            ret = '#e6a23c';\n            break;\n          default:\n            ret = '#20a0ff';\n        }\n      }\n      return ret;\n    },\n    iconClass: function iconClass() {\n      if (this.status === 'warning') {\n        return 'el-icon-warning';\n      }\n      if (this.type === 'line') {\n        return this.status === 'success' ? 'el-icon-circle-check' : 'el-icon-circle-close';\n      } else {\n        return this.status === 'success' ? 'el-icon-check' : 'el-icon-close';\n      }\n    },\n    progressTextSize: function progressTextSize() {\n      return this.type === 'line' ? 12 + this.strokeWidth * 0.4 : this.width * 0.111111 + 2;\n    },\n    content: function content() {\n      if (typeof this.format === 'function') {\n        return this.format(this.percentage) || '';\n      } else {\n        return this.percentage + '%';\n      }\n    }\n  },\n  methods: {\n    getCurrentColor: function getCurrentColor(percentage) {\n      if (typeof this.color === 'function') {\n        return this.color(percentage);\n      } else if (typeof this.color === 'string') {\n        return this.color;\n      } else {\n        return this.getLevelColor(percentage);\n      }\n    },\n    getLevelColor: function getLevelColor(percentage) {\n      var colorArray = this.getColorArray().sort(function (a, b) {\n        return a.percentage - b.percentage;\n      });\n\n      for (var i = 0; i < colorArray.length; i++) {\n        if (colorArray[i].percentage > percentage) {\n          return colorArray[i].color;\n        }\n      }\n      return colorArray[colorArray.length - 1].color;\n    },\n    getColorArray: function getColorArray() {\n      var color = this.color;\n      var span = 100 / color.length;\n      return color.map(function (seriesColor, index) {\n        if (typeof seriesColor === 'string') {\n          return {\n            color: seriesColor,\n            percentage: (index + 1) * span\n          };\n        }\n        return seriesColor;\n      });\n    }\n  }\n});\n// CONCATENATED MODULE: ./packages/progress/src/progress.vue?vue&type=script&lang=js&\n /* harmony default export */ var src_progressvue_type_script_lang_js_ = (progressvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/progress/src/progress.vue\n\n\n\n\n\n/* normalize component */\n\nvar progress_component = normalizeComponent(\n  src_progressvue_type_script_lang_js_,\n  progressvue_type_template_id_229ee406_render,\n  progressvue_type_template_id_229ee406_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var progress_api; }\nprogress_component.options.__file = \"packages/progress/src/progress.vue\"\n/* harmony default export */ var progress = (progress_component.exports);\n// CONCATENATED MODULE: ./packages/progress/index.js\n\n\n/* istanbul ignore next */\nprogress.install = function (Vue) {\n  Vue.component(progress.name, progress);\n};\n\n/* harmony default export */ var packages_progress = (progress);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/spinner/src/spinner.vue?vue&type=template&id=697b8538&\nvar spinnervue_type_template_id_697b8538_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"span\", { staticClass: \"el-spinner\" }, [\n    _c(\n      \"svg\",\n      {\n        staticClass: \"el-spinner-inner\",\n        style: { width: _vm.radius / 2 + \"px\", height: _vm.radius / 2 + \"px\" },\n        attrs: { viewBox: \"0 0 50 50\" }\n      },\n      [\n        _c(\"circle\", {\n          staticClass: \"path\",\n          attrs: {\n            cx: \"25\",\n            cy: \"25\",\n            r: \"20\",\n            fill: \"none\",\n            stroke: _vm.strokeColor,\n            \"stroke-width\": _vm.strokeWidth\n          }\n        })\n      ]\n    )\n  ])\n}\nvar spinnervue_type_template_id_697b8538_staticRenderFns = []\nspinnervue_type_template_id_697b8538_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/spinner/src/spinner.vue?vue&type=template&id=697b8538&\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/spinner/src/spinner.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n\n/* harmony default export */ var spinnervue_type_script_lang_js_ = ({\n  name: 'ElSpinner',\n  props: {\n    type: String,\n    radius: {\n      type: Number,\n      default: 100\n    },\n    strokeWidth: {\n      type: Number,\n      default: 5\n    },\n    strokeColor: {\n      type: String,\n      default: '#efefef'\n    }\n  }\n});\n// CONCATENATED MODULE: ./packages/spinner/src/spinner.vue?vue&type=script&lang=js&\n /* harmony default export */ var src_spinnervue_type_script_lang_js_ = (spinnervue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/spinner/src/spinner.vue\n\n\n\n\n\n/* normalize component */\n\nvar spinner_component = normalizeComponent(\n  src_spinnervue_type_script_lang_js_,\n  spinnervue_type_template_id_697b8538_render,\n  spinnervue_type_template_id_697b8538_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var spinner_api; }\nspinner_component.options.__file = \"packages/spinner/src/spinner.vue\"\n/* harmony default export */ var spinner = (spinner_component.exports);\n// CONCATENATED MODULE: ./packages/spinner/index.js\n\n\n/* istanbul ignore next */\nspinner.install = function (Vue) {\n  Vue.component(spinner.name, spinner);\n};\n\n/* harmony default export */ var packages_spinner = (spinner);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/message/src/main.vue?vue&type=template&id=455b9f60&\nvar mainvue_type_template_id_455b9f60_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"transition\",\n    {\n      attrs: { name: \"el-message-fade\" },\n      on: { \"after-leave\": _vm.handleAfterLeave }\n    },\n    [\n      _c(\n        \"div\",\n        {\n          directives: [\n            {\n              name: \"show\",\n              rawName: \"v-show\",\n              value: _vm.visible,\n              expression: \"visible\"\n            }\n          ],\n          class: [\n            \"el-message\",\n            _vm.type && !_vm.iconClass ? \"el-message--\" + _vm.type : \"\",\n            _vm.center ? \"is-center\" : \"\",\n            _vm.showClose ? \"is-closable\" : \"\",\n            _vm.customClass\n          ],\n          style: _vm.positionStyle,\n          attrs: { role: \"alert\" },\n          on: { mouseenter: _vm.clearTimer, mouseleave: _vm.startTimer }\n        },\n        [\n          _vm.iconClass\n            ? _c(\"i\", { class: _vm.iconClass })\n            : _c(\"i\", { class: _vm.typeClass }),\n          _vm._t(\"default\", [\n            !_vm.dangerouslyUseHTMLString\n              ? _c(\"p\", { staticClass: \"el-message__content\" }, [\n                  _vm._v(_vm._s(_vm.message))\n                ])\n              : _c(\"p\", {\n                  staticClass: \"el-message__content\",\n                  domProps: { innerHTML: _vm._s(_vm.message) }\n                })\n          ]),\n          _vm.showClose\n            ? _c(\"i\", {\n                staticClass: \"el-message__closeBtn el-icon-close\",\n                on: { click: _vm.close }\n              })\n            : _vm._e()\n        ],\n        2\n      )\n    ]\n  )\n}\nvar mainvue_type_template_id_455b9f60_staticRenderFns = []\nmainvue_type_template_id_455b9f60_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/message/src/main.vue?vue&type=template&id=455b9f60&\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/message/src/main.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nvar src_mainvue_type_script_lang_js_typeMap = {\n  success: 'success',\n  info: 'info',\n  warning: 'warning',\n  error: 'error'\n};\n\n/* harmony default export */ var message_src_mainvue_type_script_lang_js_ = ({\n  data: function data() {\n    return {\n      visible: false,\n      message: '',\n      duration: 3000,\n      type: 'info',\n      iconClass: '',\n      customClass: '',\n      onClose: null,\n      showClose: false,\n      closed: false,\n      verticalOffset: 20,\n      timer: null,\n      dangerouslyUseHTMLString: false,\n      center: false\n    };\n  },\n\n\n  computed: {\n    typeClass: function typeClass() {\n      return this.type && !this.iconClass ? 'el-message__icon el-icon-' + src_mainvue_type_script_lang_js_typeMap[this.type] : '';\n    },\n    positionStyle: function positionStyle() {\n      return {\n        'top': this.verticalOffset + 'px'\n      };\n    }\n  },\n\n  watch: {\n    closed: function closed(newVal) {\n      if (newVal) {\n        this.visible = false;\n      }\n    }\n  },\n\n  methods: {\n    handleAfterLeave: function handleAfterLeave() {\n      this.$destroy(true);\n      this.$el.parentNode.removeChild(this.$el);\n    },\n    close: function close() {\n      this.closed = true;\n      if (typeof this.onClose === 'function') {\n        this.onClose(this);\n      }\n    },\n    clearTimer: function clearTimer() {\n      clearTimeout(this.timer);\n    },\n    startTimer: function startTimer() {\n      var _this = this;\n\n      if (this.duration > 0) {\n        this.timer = setTimeout(function () {\n          if (!_this.closed) {\n            _this.close();\n          }\n        }, this.duration);\n      }\n    },\n    keydown: function keydown(e) {\n      if (e.keyCode === 27) {\n        // esc关闭消息\n        if (!this.closed) {\n          this.close();\n        }\n      }\n    }\n  },\n  mounted: function mounted() {\n    this.startTimer();\n    document.addEventListener('keydown', this.keydown);\n  },\n  beforeDestroy: function beforeDestroy() {\n    document.removeEventListener('keydown', this.keydown);\n  }\n});\n// CONCATENATED MODULE: ./packages/message/src/main.vue?vue&type=script&lang=js&\n /* harmony default export */ var packages_message_src_mainvue_type_script_lang_js_ = (message_src_mainvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/message/src/main.vue\n\n\n\n\n\n/* normalize component */\n\nvar message_src_main_component = normalizeComponent(\n  packages_message_src_mainvue_type_script_lang_js_,\n  mainvue_type_template_id_455b9f60_render,\n  mainvue_type_template_id_455b9f60_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var message_src_main_api; }\nmessage_src_main_component.options.__file = \"packages/message/src/main.vue\"\n/* harmony default export */ var message_src_main = (message_src_main_component.exports);\n// EXTERNAL MODULE: external \"element-ui/lib/utils/types\"\nvar types_ = __webpack_require__(15);\n\n// CONCATENATED MODULE: ./packages/message/src/main.js\nvar main_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\n\n\n\n\n\nvar MessageConstructor = external_vue_default.a.extend(message_src_main);\n\nvar message_src_main_instance = void 0;\nvar main_instances = [];\nvar main_seed = 1;\n\nvar main_Message = function Message(options) {\n  if (external_vue_default.a.prototype.$isServer) return;\n  options = options || {};\n  if (typeof options === 'string') {\n    options = {\n      message: options\n    };\n  }\n  var userOnClose = options.onClose;\n  var id = 'message_' + main_seed++;\n\n  options.onClose = function () {\n    Message.close(id, userOnClose);\n  };\n  message_src_main_instance = new MessageConstructor({\n    data: options\n  });\n  message_src_main_instance.id = id;\n  if (Object(vdom_[\"isVNode\"])(message_src_main_instance.message)) {\n    message_src_main_instance.$slots.default = [message_src_main_instance.message];\n    message_src_main_instance.message = null;\n  }\n  message_src_main_instance.$mount();\n  document.body.appendChild(message_src_main_instance.$el);\n  var verticalOffset = options.offset || 20;\n  main_instances.forEach(function (item) {\n    verticalOffset += item.$el.offsetHeight + 16;\n  });\n  message_src_main_instance.verticalOffset = verticalOffset;\n  message_src_main_instance.visible = true;\n  message_src_main_instance.$el.style.zIndex = popup_[\"PopupManager\"].nextZIndex();\n  main_instances.push(message_src_main_instance);\n  return message_src_main_instance;\n};\n\n['success', 'warning', 'info', 'error'].forEach(function (type) {\n  main_Message[type] = function (options) {\n    if (Object(types_[\"isObject\"])(options) && !Object(vdom_[\"isVNode\"])(options)) {\n      return main_Message(main_extends({}, options, {\n        type: type\n      }));\n    }\n    return main_Message({\n      type: type,\n      message: options\n    });\n  };\n});\n\nmain_Message.close = function (id, userOnClose) {\n  var len = main_instances.length;\n  var index = -1;\n  var removedHeight = void 0;\n  for (var i = 0; i < len; i++) {\n    if (id === main_instances[i].id) {\n      removedHeight = main_instances[i].$el.offsetHeight;\n      index = i;\n      if (typeof userOnClose === 'function') {\n        userOnClose(main_instances[i]);\n      }\n      main_instances.splice(i, 1);\n      break;\n    }\n  }\n  if (len <= 1 || index === -1 || index > main_instances.length - 1) return;\n  for (var _i = index; _i < len - 1; _i++) {\n    var dom = main_instances[_i].$el;\n    dom.style['top'] = parseInt(dom.style['top'], 10) - removedHeight - 16 + 'px';\n  }\n};\n\nmain_Message.closeAll = function () {\n  for (var i = main_instances.length - 1; i >= 0; i--) {\n    main_instances[i].close();\n  }\n};\n\n/* harmony default export */ var packages_message_src_main = (main_Message);\n// CONCATENATED MODULE: ./packages/message/index.js\n\n/* harmony default export */ var packages_message = (packages_message_src_main);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/badge/src/main.vue?vue&type=template&id=7ccb6598&\nvar mainvue_type_template_id_7ccb6598_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    { staticClass: \"el-badge\" },\n    [\n      _vm._t(\"default\"),\n      _c(\"transition\", { attrs: { name: \"el-zoom-in-center\" } }, [\n        _c(\"sup\", {\n          directives: [\n            {\n              name: \"show\",\n              rawName: \"v-show\",\n              value:\n                !_vm.hidden && (_vm.content || _vm.content === 0 || _vm.isDot),\n              expression: \"!hidden && (content || content === 0 || isDot)\"\n            }\n          ],\n          staticClass: \"el-badge__content\",\n          class: [\n            \"el-badge__content--\" + _vm.type,\n            {\n              \"is-fixed\": _vm.$slots.default,\n              \"is-dot\": _vm.isDot\n            }\n          ],\n          domProps: { textContent: _vm._s(_vm.content) }\n        })\n      ])\n    ],\n    2\n  )\n}\nvar mainvue_type_template_id_7ccb6598_staticRenderFns = []\nmainvue_type_template_id_7ccb6598_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/badge/src/main.vue?vue&type=template&id=7ccb6598&\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/badge/src/main.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* harmony default export */ var badge_src_mainvue_type_script_lang_js_ = ({\n  name: 'ElBadge',\n\n  props: {\n    value: [String, Number],\n    max: Number,\n    isDot: Boolean,\n    hidden: Boolean,\n    type: {\n      type: String,\n      validator: function validator(val) {\n        return ['primary', 'success', 'warning', 'info', 'danger'].indexOf(val) > -1;\n      }\n    }\n  },\n\n  computed: {\n    content: function content() {\n      if (this.isDot) return;\n\n      var value = this.value;\n      var max = this.max;\n\n      if (typeof value === 'number' && typeof max === 'number') {\n        return max < value ? max + '+' : value;\n      }\n\n      return value;\n    }\n  }\n});\n// CONCATENATED MODULE: ./packages/badge/src/main.vue?vue&type=script&lang=js&\n /* harmony default export */ var packages_badge_src_mainvue_type_script_lang_js_ = (badge_src_mainvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/badge/src/main.vue\n\n\n\n\n\n/* normalize component */\n\nvar badge_src_main_component = normalizeComponent(\n  packages_badge_src_mainvue_type_script_lang_js_,\n  mainvue_type_template_id_7ccb6598_render,\n  mainvue_type_template_id_7ccb6598_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var badge_src_main_api; }\nbadge_src_main_component.options.__file = \"packages/badge/src/main.vue\"\n/* harmony default export */ var badge_src_main = (badge_src_main_component.exports);\n// CONCATENATED MODULE: ./packages/badge/index.js\n\n\n/* istanbul ignore next */\nbadge_src_main.install = function (Vue) {\n  Vue.component(badge_src_main.name, badge_src_main);\n};\n\n/* harmony default export */ var badge = (badge_src_main);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/card/src/main.vue?vue&type=template&id=59a4a40f&\nvar mainvue_type_template_id_59a4a40f_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    {\n      staticClass: \"el-card\",\n      class: _vm.shadow ? \"is-\" + _vm.shadow + \"-shadow\" : \"is-always-shadow\"\n    },\n    [\n      _vm.$slots.header || _vm.header\n        ? _c(\n            \"div\",\n            { staticClass: \"el-card__header\" },\n            [_vm._t(\"header\", [_vm._v(_vm._s(_vm.header))])],\n            2\n          )\n        : _vm._e(),\n      _c(\n        \"div\",\n        { staticClass: \"el-card__body\", style: _vm.bodyStyle },\n        [_vm._t(\"default\")],\n        2\n      )\n    ]\n  )\n}\nvar mainvue_type_template_id_59a4a40f_staticRenderFns = []\nmainvue_type_template_id_59a4a40f_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/card/src/main.vue?vue&type=template&id=59a4a40f&\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/card/src/main.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* harmony default export */ var card_src_mainvue_type_script_lang_js_ = ({\n  name: 'ElCard',\n  props: {\n    header: {},\n    bodyStyle: {},\n    shadow: {\n      type: String\n    }\n  }\n});\n// CONCATENATED MODULE: ./packages/card/src/main.vue?vue&type=script&lang=js&\n /* harmony default export */ var packages_card_src_mainvue_type_script_lang_js_ = (card_src_mainvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/card/src/main.vue\n\n\n\n\n\n/* normalize component */\n\nvar card_src_main_component = normalizeComponent(\n  packages_card_src_mainvue_type_script_lang_js_,\n  mainvue_type_template_id_59a4a40f_render,\n  mainvue_type_template_id_59a4a40f_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var card_src_main_api; }\ncard_src_main_component.options.__file = \"packages/card/src/main.vue\"\n/* harmony default export */ var card_src_main = (card_src_main_component.exports);\n// CONCATENATED MODULE: ./packages/card/index.js\n\n\n/* istanbul ignore next */\ncard_src_main.install = function (Vue) {\n  Vue.component(card_src_main.name, card_src_main);\n};\n\n/* harmony default export */ var card = (card_src_main);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/rate/src/main.vue?vue&type=template&id=ada57782&\nvar mainvue_type_template_id_ada57782_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    {\n      staticClass: \"el-rate\",\n      attrs: {\n        role: \"slider\",\n        \"aria-valuenow\": _vm.currentValue,\n        \"aria-valuetext\": _vm.text,\n        \"aria-valuemin\": \"0\",\n        \"aria-valuemax\": _vm.max,\n        tabindex: \"0\"\n      },\n      on: { keydown: _vm.handleKey }\n    },\n    [\n      _vm._l(_vm.max, function(item, key) {\n        return _c(\n          \"span\",\n          {\n            key: key,\n            staticClass: \"el-rate__item\",\n            style: { cursor: _vm.rateDisabled ? \"auto\" : \"pointer\" },\n            on: {\n              mousemove: function($event) {\n                _vm.setCurrentValue(item, $event)\n              },\n              mouseleave: _vm.resetCurrentValue,\n              click: function($event) {\n                _vm.selectValue(item)\n              }\n            }\n          },\n          [\n            _c(\n              \"i\",\n              {\n                staticClass: \"el-rate__icon\",\n                class: [\n                  _vm.classes[item - 1],\n                  { hover: _vm.hoverIndex === item }\n                ],\n                style: _vm.getIconStyle(item)\n              },\n              [\n                _vm.showDecimalIcon(item)\n                  ? _c(\"i\", {\n                      staticClass: \"el-rate__decimal\",\n                      class: _vm.decimalIconClass,\n                      style: _vm.decimalStyle\n                    })\n                  : _vm._e()\n              ]\n            )\n          ]\n        )\n      }),\n      _vm.showText || _vm.showScore\n        ? _c(\n            \"span\",\n            { staticClass: \"el-rate__text\", style: { color: _vm.textColor } },\n            [_vm._v(_vm._s(_vm.text))]\n          )\n        : _vm._e()\n    ],\n    2\n  )\n}\nvar mainvue_type_template_id_ada57782_staticRenderFns = []\nmainvue_type_template_id_ada57782_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/rate/src/main.vue?vue&type=template&id=ada57782&\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/rate/src/main.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n/* harmony default export */ var rate_src_mainvue_type_script_lang_js_ = ({\n  name: 'ElRate',\n\n  mixins: [migrating_default.a],\n\n  inject: {\n    elForm: {\n      default: ''\n    }\n  },\n\n  data: function data() {\n    return {\n      pointerAtLeftHalf: true,\n      currentValue: this.value,\n      hoverIndex: -1\n    };\n  },\n\n\n  props: {\n    value: {\n      type: Number,\n      default: 0\n    },\n    lowThreshold: {\n      type: Number,\n      default: 2\n    },\n    highThreshold: {\n      type: Number,\n      default: 4\n    },\n    max: {\n      type: Number,\n      default: 5\n    },\n    colors: {\n      type: [Array, Object],\n      default: function _default() {\n        return ['#F7BA2A', '#F7BA2A', '#F7BA2A'];\n      }\n    },\n    voidColor: {\n      type: String,\n      default: '#C6D1DE'\n    },\n    disabledVoidColor: {\n      type: String,\n      default: '#EFF2F7'\n    },\n    iconClasses: {\n      type: [Array, Object],\n      default: function _default() {\n        return ['el-icon-star-on', 'el-icon-star-on', 'el-icon-star-on'];\n      }\n    },\n    voidIconClass: {\n      type: String,\n      default: 'el-icon-star-off'\n    },\n    disabledVoidIconClass: {\n      type: String,\n      default: 'el-icon-star-on'\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    allowHalf: {\n      type: Boolean,\n      default: false\n    },\n    showText: {\n      type: Boolean,\n      default: false\n    },\n    showScore: {\n      type: Boolean,\n      default: false\n    },\n    textColor: {\n      type: String,\n      default: '#1f2d3d'\n    },\n    texts: {\n      type: Array,\n      default: function _default() {\n        return ['极差', '失望', '一般', '满意', '惊喜'];\n      }\n    },\n    scoreTemplate: {\n      type: String,\n      default: '{value}'\n    }\n  },\n\n  computed: {\n    text: function text() {\n      var result = '';\n      if (this.showScore) {\n        result = this.scoreTemplate.replace(/\\{\\s*value\\s*\\}/, this.rateDisabled ? this.value : this.currentValue);\n      } else if (this.showText) {\n        result = this.texts[Math.ceil(this.currentValue) - 1];\n      }\n      return result;\n    },\n    decimalStyle: function decimalStyle() {\n      var width = '';\n      if (this.rateDisabled) {\n        width = this.valueDecimal + '%';\n      } else if (this.allowHalf) {\n        width = '50%';\n      }\n      return {\n        color: this.activeColor,\n        width: width\n      };\n    },\n    valueDecimal: function valueDecimal() {\n      return this.value * 100 - Math.floor(this.value) * 100;\n    },\n    classMap: function classMap() {\n      var _ref;\n\n      return Array.isArray(this.iconClasses) ? (_ref = {}, _ref[this.lowThreshold] = this.iconClasses[0], _ref[this.highThreshold] = { value: this.iconClasses[1], excluded: true }, _ref[this.max] = this.iconClasses[2], _ref) : this.iconClasses;\n    },\n    decimalIconClass: function decimalIconClass() {\n      return this.getValueFromMap(this.value, this.classMap);\n    },\n    voidClass: function voidClass() {\n      return this.rateDisabled ? this.disabledVoidIconClass : this.voidIconClass;\n    },\n    activeClass: function activeClass() {\n      return this.getValueFromMap(this.currentValue, this.classMap);\n    },\n    colorMap: function colorMap() {\n      var _ref2;\n\n      return Array.isArray(this.colors) ? (_ref2 = {}, _ref2[this.lowThreshold] = this.colors[0], _ref2[this.highThreshold] = { value: this.colors[1], excluded: true }, _ref2[this.max] = this.colors[2], _ref2) : this.colors;\n    },\n    activeColor: function activeColor() {\n      return this.getValueFromMap(this.currentValue, this.colorMap);\n    },\n    classes: function classes() {\n      var result = [];\n      var i = 0;\n      var threshold = this.currentValue;\n      if (this.allowHalf && this.currentValue !== Math.floor(this.currentValue)) {\n        threshold--;\n      }\n      for (; i < threshold; i++) {\n        result.push(this.activeClass);\n      }\n      for (; i < this.max; i++) {\n        result.push(this.voidClass);\n      }\n      return result;\n    },\n    rateDisabled: function rateDisabled() {\n      return this.disabled || (this.elForm || {}).disabled;\n    }\n  },\n\n  watch: {\n    value: function value(val) {\n      this.currentValue = val;\n      this.pointerAtLeftHalf = this.value !== Math.floor(this.value);\n    }\n  },\n\n  methods: {\n    getMigratingConfig: function getMigratingConfig() {\n      return {\n        props: {\n          'text-template': 'text-template is renamed to score-template.'\n        }\n      };\n    },\n    getValueFromMap: function getValueFromMap(value, map) {\n      var matchedKeys = Object.keys(map).filter(function (key) {\n        var val = map[key];\n        var excluded = Object(types_[\"isObject\"])(val) ? val.excluded : false;\n        return excluded ? value < key : value <= key;\n      }).sort(function (a, b) {\n        return a - b;\n      });\n      var matchedValue = map[matchedKeys[0]];\n      return Object(types_[\"isObject\"])(matchedValue) ? matchedValue.value : matchedValue || '';\n    },\n    showDecimalIcon: function showDecimalIcon(item) {\n      var showWhenDisabled = this.rateDisabled && this.valueDecimal > 0 && item - 1 < this.value && item > this.value;\n      /* istanbul ignore next */\n      var showWhenAllowHalf = this.allowHalf && this.pointerAtLeftHalf && item - 0.5 <= this.currentValue && item > this.currentValue;\n      return showWhenDisabled || showWhenAllowHalf;\n    },\n    getIconStyle: function getIconStyle(item) {\n      var voidColor = this.rateDisabled ? this.disabledVoidColor : this.voidColor;\n      return {\n        color: item <= this.currentValue ? this.activeColor : voidColor\n      };\n    },\n    selectValue: function selectValue(value) {\n      if (this.rateDisabled) {\n        return;\n      }\n      if (this.allowHalf && this.pointerAtLeftHalf) {\n        this.$emit('input', this.currentValue);\n        this.$emit('change', this.currentValue);\n      } else {\n        this.$emit('input', value);\n        this.$emit('change', value);\n      }\n    },\n    handleKey: function handleKey(e) {\n      if (this.rateDisabled) {\n        return;\n      }\n      var currentValue = this.currentValue;\n      var keyCode = e.keyCode;\n      if (keyCode === 38 || keyCode === 39) {\n        // left / down\n        if (this.allowHalf) {\n          currentValue += 0.5;\n        } else {\n          currentValue += 1;\n        }\n        e.stopPropagation();\n        e.preventDefault();\n      } else if (keyCode === 37 || keyCode === 40) {\n        if (this.allowHalf) {\n          currentValue -= 0.5;\n        } else {\n          currentValue -= 1;\n        }\n        e.stopPropagation();\n        e.preventDefault();\n      }\n      currentValue = currentValue < 0 ? 0 : currentValue;\n      currentValue = currentValue > this.max ? this.max : currentValue;\n\n      this.$emit('input', currentValue);\n      this.$emit('change', currentValue);\n    },\n    setCurrentValue: function setCurrentValue(value, event) {\n      if (this.rateDisabled) {\n        return;\n      }\n      /* istanbul ignore if */\n      if (this.allowHalf) {\n        var target = event.target;\n        if (Object(dom_[\"hasClass\"])(target, 'el-rate__item')) {\n          target = target.querySelector('.el-rate__icon');\n        }\n        if (Object(dom_[\"hasClass\"])(target, 'el-rate__decimal')) {\n          target = target.parentNode;\n        }\n        this.pointerAtLeftHalf = event.offsetX * 2 <= target.clientWidth;\n        this.currentValue = this.pointerAtLeftHalf ? value - 0.5 : value;\n      } else {\n        this.currentValue = value;\n      }\n      this.hoverIndex = value;\n    },\n    resetCurrentValue: function resetCurrentValue() {\n      if (this.rateDisabled) {\n        return;\n      }\n      if (this.allowHalf) {\n        this.pointerAtLeftHalf = this.value !== Math.floor(this.value);\n      }\n      this.currentValue = this.value;\n      this.hoverIndex = -1;\n    }\n  },\n\n  created: function created() {\n    if (!this.value) {\n      this.$emit('input', 0);\n    }\n  }\n});\n// CONCATENATED MODULE: ./packages/rate/src/main.vue?vue&type=script&lang=js&\n /* harmony default export */ var packages_rate_src_mainvue_type_script_lang_js_ = (rate_src_mainvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/rate/src/main.vue\n\n\n\n\n\n/* normalize component */\n\nvar rate_src_main_component = normalizeComponent(\n  packages_rate_src_mainvue_type_script_lang_js_,\n  mainvue_type_template_id_ada57782_render,\n  mainvue_type_template_id_ada57782_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var rate_src_main_api; }\nrate_src_main_component.options.__file = \"packages/rate/src/main.vue\"\n/* harmony default export */ var rate_src_main = (rate_src_main_component.exports);\n// CONCATENATED MODULE: ./packages/rate/index.js\n\n\n/* istanbul ignore next */\nrate_src_main.install = function (Vue) {\n  Vue.component(rate_src_main.name, rate_src_main);\n};\n\n/* harmony default export */ var rate = (rate_src_main);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/steps/src/steps.vue?vue&type=template&id=3c6b6dc0&\nvar stepsvue_type_template_id_3c6b6dc0_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    {\n      staticClass: \"el-steps\",\n      class: [\n        !_vm.simple && \"el-steps--\" + _vm.direction,\n        _vm.simple && \"el-steps--simple\"\n      ]\n    },\n    [_vm._t(\"default\")],\n    2\n  )\n}\nvar stepsvue_type_template_id_3c6b6dc0_staticRenderFns = []\nstepsvue_type_template_id_3c6b6dc0_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/steps/src/steps.vue?vue&type=template&id=3c6b6dc0&\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/steps/src/steps.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n/* harmony default export */ var stepsvue_type_script_lang_js_ = ({\n  name: 'ElSteps',\n\n  mixins: [migrating_default.a],\n\n  props: {\n    space: [Number, String],\n    active: Number,\n    direction: {\n      type: String,\n      default: 'horizontal'\n    },\n    alignCenter: Boolean,\n    simple: Boolean,\n    finishStatus: {\n      type: String,\n      default: 'finish'\n    },\n    processStatus: {\n      type: String,\n      default: 'process'\n    }\n  },\n\n  data: function data() {\n    return {\n      steps: [],\n      stepOffset: 0\n    };\n  },\n\n\n  methods: {\n    getMigratingConfig: function getMigratingConfig() {\n      return {\n        props: {\n          'center': 'center is removed.'\n        }\n      };\n    }\n  },\n\n  watch: {\n    active: function active(newVal, oldVal) {\n      this.$emit('change', newVal, oldVal);\n    },\n    steps: function steps(_steps) {\n      _steps.forEach(function (child, index) {\n        child.index = index;\n      });\n    }\n  }\n});\n// CONCATENATED MODULE: ./packages/steps/src/steps.vue?vue&type=script&lang=js&\n /* harmony default export */ var src_stepsvue_type_script_lang_js_ = (stepsvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/steps/src/steps.vue\n\n\n\n\n\n/* normalize component */\n\nvar steps_component = normalizeComponent(\n  src_stepsvue_type_script_lang_js_,\n  stepsvue_type_template_id_3c6b6dc0_render,\n  stepsvue_type_template_id_3c6b6dc0_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var steps_api; }\nsteps_component.options.__file = \"packages/steps/src/steps.vue\"\n/* harmony default export */ var steps = (steps_component.exports);\n// CONCATENATED MODULE: ./packages/steps/index.js\n\n\n/* istanbul ignore next */\nsteps.install = function (Vue) {\n  Vue.component(steps.name, steps);\n};\n\n/* harmony default export */ var packages_steps = (steps);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/steps/src/step.vue?vue&type=template&id=f414a87a&\nvar stepvue_type_template_id_f414a87a_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    {\n      staticClass: \"el-step\",\n      class: [\n        !_vm.isSimple && \"is-\" + _vm.$parent.direction,\n        _vm.isSimple && \"is-simple\",\n        _vm.isLast && !_vm.space && !_vm.isCenter && \"is-flex\",\n        _vm.isCenter && !_vm.isVertical && !_vm.isSimple && \"is-center\"\n      ],\n      style: _vm.style\n    },\n    [\n      _c(\n        \"div\",\n        { staticClass: \"el-step__head\", class: \"is-\" + _vm.currentStatus },\n        [\n          _c(\n            \"div\",\n            {\n              staticClass: \"el-step__line\",\n              style: _vm.isLast\n                ? \"\"\n                : { marginRight: _vm.$parent.stepOffset + \"px\" }\n            },\n            [\n              _c(\"i\", {\n                staticClass: \"el-step__line-inner\",\n                style: _vm.lineStyle\n              })\n            ]\n          ),\n          _c(\n            \"div\",\n            {\n              staticClass: \"el-step__icon\",\n              class: \"is-\" + (_vm.icon ? \"icon\" : \"text\")\n            },\n            [\n              _vm.currentStatus !== \"success\" && _vm.currentStatus !== \"error\"\n                ? _vm._t(\"icon\", [\n                    _vm.icon\n                      ? _c(\"i\", {\n                          staticClass: \"el-step__icon-inner\",\n                          class: [_vm.icon]\n                        })\n                      : _vm._e(),\n                    !_vm.icon && !_vm.isSimple\n                      ? _c(\"div\", { staticClass: \"el-step__icon-inner\" }, [\n                          _vm._v(_vm._s(_vm.index + 1))\n                        ])\n                      : _vm._e()\n                  ])\n                : _c(\"i\", {\n                    staticClass: \"el-step__icon-inner is-status\",\n                    class: [\n                      \"el-icon-\" +\n                        (_vm.currentStatus === \"success\" ? \"check\" : \"close\")\n                    ]\n                  })\n            ],\n            2\n          )\n        ]\n      ),\n      _c(\"div\", { staticClass: \"el-step__main\" }, [\n        _c(\n          \"div\",\n          {\n            ref: \"title\",\n            staticClass: \"el-step__title\",\n            class: [\"is-\" + _vm.currentStatus]\n          },\n          [_vm._t(\"title\", [_vm._v(_vm._s(_vm.title))])],\n          2\n        ),\n        _vm.isSimple\n          ? _c(\"div\", { staticClass: \"el-step__arrow\" })\n          : _c(\n              \"div\",\n              {\n                staticClass: \"el-step__description\",\n                class: [\"is-\" + _vm.currentStatus]\n              },\n              [_vm._t(\"description\", [_vm._v(_vm._s(_vm.description))])],\n              2\n            )\n      ])\n    ]\n  )\n}\nvar stepvue_type_template_id_f414a87a_staticRenderFns = []\nstepvue_type_template_id_f414a87a_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/steps/src/step.vue?vue&type=template&id=f414a87a&\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/steps/src/step.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* harmony default export */ var stepvue_type_script_lang_js_ = ({\n  name: 'ElStep',\n\n  props: {\n    title: String,\n    icon: String,\n    description: String,\n    status: String\n  },\n\n  data: function data() {\n    return {\n      index: -1,\n      lineStyle: {},\n      internalStatus: ''\n    };\n  },\n  beforeCreate: function beforeCreate() {\n    this.$parent.steps.push(this);\n  },\n  beforeDestroy: function beforeDestroy(