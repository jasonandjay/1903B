\\n//# sourceURL=webpack-internal:///./node_modules/highlight.js/lib/languages/isbl.js\\n\");\n\n/***/ }),\n\n/***/ \"./node_modules/highlight.js/lib/languages/java.js\":\n/*!*********************************************************!*\\\n  !*** ./node_modules/highlight.js/lib/languages/java.js ***!\n  \\*********************************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\neval(\"// https://docs.oracle.com/javase/specs/jls/se15/html/jls-3.html#jls-3.10\\nvar decimalDigits = '[0-9](_*[0-9])*';\\nvar frac = `\\\\\\\\.(${decimalDigits})`;\\nvar hexDigits = '[0-9a-fA-F](_*[0-9a-fA-F])*';\\nvar NUMERIC = {\\n  className: 'number',\\n  variants: [\\n    // DecimalFloatingPointLiteral\\n    // including ExponentPart\\n    { begin: `(\\\\\\\\b(${decimalDigits})((${frac})|\\\\\\\\.)?|(${frac}))` +\\n      `[eE][+-]?(${decimalDigits})[fFdD]?\\\\\\\\b` },\\n    // excluding ExponentPart\\n    { begin: `\\\\\\\\b(${decimalDigits})((${frac})[fFdD]?\\\\\\\\b|\\\\\\\\.([fFdD]\\\\\\\\b)?)` },\\n    { begin: `(${frac})[fFdD]?\\\\\\\\b` },\\n    { begin: `\\\\\\\\b(${decimalDigits})[fFdD]\\\\\\\\b` },\\n\\n    // HexadecimalFloatingPointLiteral\\n    { begin: `\\\\\\\\b0[xX]((${hexDigits})\\\\\\\\.?|(${hexDigits})?\\\\\\\\.(${hexDigits}))` +\\n      `[pP][+-]?(${decimalDigits})[fFdD]?\\\\\\\\b` },\\n\\n    // DecimalIntegerLiteral\\n    { begin: '\\\\\\\\b(0|[1-9](_*[0-9])*)[lL]?\\\\\\\\b' },\\n\\n    // HexIntegerLiteral\\n    { begin: `\\\\\\\\b0[xX](${hexDigits})[lL]?\\\\\\\\b` },\\n\\n    // OctalIntegerLiteral\\n    { begin: '\\\\\\\\b0(_*[0-7])*[lL]?\\\\\\\\b' },\\n\\n    // BinaryIntegerLiteral\\n    { begin: '\\\\\\\\b0[bB][01](_*[01])*[lL]?\\\\\\\\b' },\\n  ],\\n  relevance: 0\\n};\\n\\n/*\\nLanguage: Java\\nAuthor: Vsevolod Solovyov <vsevolod.solovyov@gmail.com>\\nCategory: common, enterprise\\nWebsite: https://www.java.com/\\n*/\\n\\n/**\\n * Allows recursive regex expressions to a given depth\\n *\\n * ie: recurRegex(\\\"(abc~~~)\\\", /~~~/g, 2) becomes:\\n * (abc(abc(abc)))\\n *\\n * @param {string} re\\n * @param {RegExp} substitution (should be a g mode regex)\\n * @param {number} depth\\n * @returns {string}``\\n */\\nfunction recurRegex(re, substitution, depth) {\\n  if (depth === -1) return \\\"\\\";\\n\\n  return re.replace(substitution, _ => {\\n    return recurRegex(re, substitution, depth - 1);\\n  });\\n}\\n\\n/** @type LanguageFn */\\nfunction java(hljs) {\\n  hljs.regex;\\n  const JAVA_IDENT_RE = '[\\\\u00C0-\\\\u02B8a-zA-Z_$][\\\\u00C0-\\\\u02B8a-zA-Z_$0-9]*';\\n  const GENERIC_IDENT_RE = JAVA_IDENT_RE +\\n    recurRegex('(?:<' + JAVA_IDENT_RE + '~~~(?:\\\\\\\\s*,\\\\\\\\s*' + JAVA_IDENT_RE + '~~~)*>)?', /~~~/g, 2);\\n  const MAIN_KEYWORDS = [\\n    'synchronized',\\n    'abstract',\\n    'private',\\n    'var',\\n    'static',\\n    'if',\\n    'const ',\\n    'for',\\n    'while',\\n    'strictfp',\\n    'finally',\\n    'protected',\\n    'import',\\n    'native',\\n    'final',\\n    'void',\\n    'enum',\\n    'else',\\n    'break',\\n    'transient',\\n    'catch',\\n    'instanceof',\\n    'volatile',\\n    'case',\\n    'assert',\\n    'package',\\n    'default',\\n    'public',\\n    'try',\\n    'switch',\\n    'continue',\\n    'throws',\\n    'protected',\\n    'public',\\n    'private',\\n    'module',\\n    'requires',\\n    'exports',\\n    'do'\\n  ];\\n\\n  const BUILT_INS = [\\n    'super',\\n    'this'\\n  ];\\n\\n  const LITERALS = [\\n    'false',\\n    'true',\\n    'null'\\n  ];\\n\\n  const TYPES = [\\n    'char',\\n    'boolean',\\n    'long',\\n    'float',\\n    'int',\\n    'byte',\\n    'short',\\n    'double'\\n  ];\\n\\n  const KEYWORDS = {\\n    keyword: MAIN_KEYWORDS,\\n    literal: LITERALS,\\n    type: TYPES,\\n    built_in: BUILT_INS\\n  };\\n\\n  const ANNOTATION = {\\n    className: 'meta',\\n    begin: '@' + JAVA_IDENT_RE,\\n    contains: [\\n      {\\n        begin: /\\\\(/,\\n        end: /\\\\)/,\\n        contains: [ \\\"self\\\" ] // allow nested () inside our annotation\\n      }\\n    ]\\n  };\\n  const PARAMS = {\\n    className: 'params',\\n    begin: /\\\\(/,\\n    end: /\\\\)/,\\n    keywords: KEYWORDS,\\n    relevance: 0,\\n    contains: [\\n      hljs.C_BLOCK_COMMENT_MODE\\n    ],\\n    endsParent: true\\n  };\\n\\n  return {\\n    name: 'Java',\\n    aliases: [ 'jsp' ],\\n    keywords: KEYWORDS,\\n    illegal: /<\\\\/|#/,\\n    contains: [\\n      hljs.COMMENT(\\n        '/\\\\\\\\*\\\\\\\\*',\\n        '\\\\\\\\*/',\\n        {\\n          relevance: 0,\\n          contains: [\\n            {\\n              // eat up @'s in emails to prevent them to be recognized as doctags\\n              begin: /\\\\w+@/,\\n              relevance: 0\\n            },\\n            {\\n              className: 'doctag',\\n              begin: '@[A-Za-z]+'\\n            }\\n          ]\\n        }\\n      ),\\n      // relevance boost\\n      {\\n        begin: /import java\\\\.[a-z]+\\\\./,\\n        keywords: \\\"import\\\",\\n        relevance: 2\\n      },\\n      hljs.C_LINE_COMMENT_MODE,\\n      hljs.C_BLOCK_COMMENT_MODE,\\n      {\\n        begin: /\\\"\\\"\\\"/,\\n        end: /\\\"\\\"\\\"/,\\n        className: \\\"string\\\",\\n        contains: [hljs.BACKSLASH_ESCAPE]\\n      },\\n      hljs.APOS_STRING_MODE,\\n      hljs.QUOTE_STRING_MODE,\\n      {\\n        match: [\\n          /\\\\b(?:class|interface|enum|extends|implements|new)/,\\n          /\\\\s+/,\\n          JAVA_IDENT_RE\\n        ],\\n        className: {\\n          1: \\\"keyword\\\",\\n          3: \\\"title.class\\\"\\n        }\\n      },\\n      {\\n        begin: [\\n          JAVA_IDENT_RE,\\n          /\\\\s+/,\\n          JAVA_IDENT_RE,\\n          /\\\\s+/,\\n          /=/\\n        ],\\n        className: {\\n          1: \\\"type\\\",\\n          3: \\\"variable\\\",\\n          5: \\\"operator\\\"\\n        }\\n      },\\n      {\\n        begin: [\\n          /record/,\\n          /\\\\s+/,\\n          JAVA_IDENT_RE\\n        ],\\n        className: {\\n          1: \\\"keyword\\\",\\n          3: \\\"title.class\\\"\\n        },\\n        contains: [\\n          PARAMS,\\n          hljs.C_LINE_COMMENT_MODE,\\n          hljs.C_BLOCK_COMMENT_MODE\\n        ]\\n      },\\n      {\\n        // Expression keywords prevent 'keyword Name(...)' from being\\n        // recognized as a function definition\\n        beginKeywords: 'new throw return else',\\n        relevance: 0\\n      },\\n      {\\n        begin: [\\n          '(?:' + GENERIC_IDENT_RE + '\\\\\\\\s+)',\\n          hljs.UNDERSCORE_IDENT_RE,\\n          /\\\\s*(?=\\\\()/\\n        ],\\n        className: {\\n          2: \\\"title.function\\\"\\n        },\\n        keywords: KEYWORDS,\\n        contains: [\\n          {\\n            className: 'params',\\n            begin: /\\\\(/,\\n            end: /\\\\)/,\\n            keywords: KEYWORDS,\\n            relevance: 0,\\n            contains: [\\n              ANNOTATION,\\n              hljs.APOS_STRING_MODE,\\n              hljs.QUOTE_STRING_MODE,\\n              NUMERIC,\\n              hljs.C_BLOCK_COMMENT_MODE\\n            ]\\n          },\\n          hljs.C_LINE_COMMENT_MODE,\\n          hljs.C_BLOCK_COMMENT_MODE\\n        ]\\n      },\\n      NUMERIC,\\n      ANNOTATION\\n    ]\\n  };\\n}\\n\\nmodule.exports = java;\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./node_modules/highlight.js/lib/languages/java.js\\n\");\n\n/***/ }),\n\n/***/ \"./node_modules/highlight.js/lib/languages/javascript.js\":\n/*!***************************************************************!*\\\n  !*** ./node_modules/highlight.js/lib/languages/javascript.js ***!\n  \\***************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\neval(\"const IDENT_RE = '[A-Za-z$_][0-9A-Za-z$_]*';\\nconst KEYWORDS = [\\n  \\\"as\\\", // for exports\\n  \\\"in\\\",\\n  \\\"of\\\",\\n  \\\"if\\\",\\n  \\\"for\\\",\\n  \\\"while\\\",\\n  \\\"finally\\\",\\n  \\\"var\\\",\\n  \\\"new\\\",\\n  \\\"function\\\",\\n  \\\"do\\\",\\n  \\\"return\\\",\\n  \\\"void\\\",\\n  \\\"else\\\",\\n  \\\"break\\\",\\n  \\\"catch\\\",\\n  \\\"instanceof\\\",\\n  \\\"with\\\",\\n  \\\"throw\\\",\\n  \\\"case\\\",\\n  \\\"default\\\",\\n  \\\"try\\\",\\n  \\\"switch\\\",\\n  \\\"continue\\\",\\n  \\\"typeof\\\",\\n  \\\"delete\\\",\\n  \\\"let\\\",\\n  \\\"yield\\\",\\n  \\\"const\\\",\\n  \\\"class\\\",\\n  // JS handles these with a special rule\\n  // \\\"get\\\",\\n  // \\\"set\\\",\\n  \\\"debugger\\\",\\n  \\\"async\\\",\\n  \\\"await\\\",\\n  \\\"static\\\",\\n  \\\"import\\\",\\n  \\\"from\\\",\\n  \\\"export\\\",\\n  \\\"extends\\\"\\n];\\nconst LITERALS = [\\n  \\\"true\\\",\\n  \\\"false\\\",\\n  \\\"null\\\",\\n  \\\"undefined\\\",\\n  \\\"NaN\\\",\\n  \\\"Infinity\\\"\\n];\\n\\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects\\nconst TYPES = [\\n  // Fundamental objects\\n  \\\"Object\\\",\\n  \\\"Function\\\",\\n  \\\"Boolean\\\",\\n  \\\"Symbol\\\",\\n  // numbers and dates\\n  \\\"Math\\\",\\n  \\\"Date\\\",\\n  \\\"Number\\\",\\n  \\\"BigInt\\\",\\n  // text\\n  \\\"String\\\",\\n  \\\"RegExp\\\",\\n  // Indexed collections\\n  \\\"Array\\\",\\n  \\\"Float32Array\\\",\\n  \\\"Float64Array\\\",\\n  \\\"Int8Array\\\",\\n  \\\"Uint8Array\\\",\\n  \\\"Uint8ClampedArray\\\",\\n  \\\"Int16Array\\\",\\n  \\\"Int32Array\\\",\\n  \\\"Uint16Array\\\",\\n  \\\"Uint32Array\\\",\\n  \\\"BigInt64Array\\\",\\n  \\\"BigUint64Array\\\",\\n  // Keyed collections\\n  \\\"Set\\\",\\n  \\\"Map\\\",\\n  \\\"WeakSet\\\",\\n  \\\"WeakMap\\\",\\n  // Structured data\\n  \\\"ArrayBuffer\\\",\\n  \\\"SharedArrayBuffer\\\",\\n  \\\"Atomics\\\",\\n  \\\"DataView\\\",\\n  \\\"JSON\\\",\\n  // Control abstraction objects\\n  \\\"Promise\\\",\\n  \\\"Generator\\\",\\n  \\\"GeneratorFunction\\\",\\n  \\\"AsyncFunction\\\",\\n  // Reflection\\n  \\\"Reflect\\\",\\n  \\\"Proxy\\\",\\n  // Internationalization\\n  \\\"Intl\\\",\\n  // WebAssembly\\n  \\\"WebAssembly\\\"\\n];\\n\\nconst ERROR_TYPES = [\\n  \\\"Error\\\",\\n  \\\"EvalError\\\",\\n  \\\"InternalError\\\",\\n  \\\"RangeError\\\",\\n  \\\"ReferenceError\\\",\\n  \\\"SyntaxError\\\",\\n  \\\"TypeError\\\",\\n  \\\"URIError\\\"\\n];\\n\\nconst BUILT_IN_GLOBALS = [\\n  \\\"setInterval\\\",\\n  \\\"setTimeout\\\",\\n  \\\"clearInterval\\\",\\n  \\\"clearTimeout\\\",\\n\\n  \\\"require\\\",\\n  \\\"exports\\\",\\n\\n  \\\"eval\\\",\\n  \\\"isFinite\\\",\\n  \\\"isNaN\\\",\\n  \\\"parseFloat\\\",\\n  \\\"parseInt\\\",\\n  \\\"decodeURI\\\",\\n  \\\"decodeURIComponent\\\",\\n  \\\"encodeURI\\\",\\n  \\\"encodeURIComponent\\\",\\n  \\\"escape\\\",\\n  \\\"unescape\\\"\\n];\\n\\nconst BUILT_IN_VARIABLES = [\\n  \\\"arguments\\\",\\n  \\\"this\\\",\\n  \\\"super\\\",\\n  \\\"console\\\",\\n  \\\"window\\\",\\n  \\\"document\\\",\\n  \\\"localStorage\\\",\\n  \\\"module\\\",\\n  \\\"global\\\" // Node.js\\n];\\n\\nconst BUILT_INS = [].concat(\\n  BUILT_IN_GLOBALS,\\n  TYPES,\\n  ERROR_TYPES\\n);\\n\\n/*\\nLanguage: JavaScript\\nDescription: JavaScript (JS) is a lightweight, interpreted, or just-in-time compiled programming language with first-class functions.\\nCategory: common, scripting, web\\nWebsite: https://developer.mozilla.org/en-US/docs/Web/JavaScript\\n*/\\n\\n/** @type LanguageFn */\\nfunction javascript(hljs) {\\n  const regex = hljs.regex;\\n  /**\\n   * Takes a string like \\\"<Booger\\\" and checks to see\\n   * if we can find a matching \\\"</Booger\\\" later in the\\n   * content.\\n   * @param {RegExpMatchArray} match\\n   * @param {{after:number}} param1\\n   */\\n  const hasClosingTag = (match, { after }) => {\\n    const tag = \\\"</\\\" + match[0].slice(1);\\n    const pos = match.input.indexOf(tag, after);\\n    return pos !== -1;\\n  };\\n\\n  const IDENT_RE$1 = IDENT_RE;\\n  const FRAGMENT = {\\n    begin: '<>',\\n    end: '</>'\\n  };\\n  // to avoid some special cases inside isTrulyOpeningTag\\n  const XML_SELF_CLOSING = /<[A-Za-z0-9\\\\\\\\._:-]+\\\\s*\\\\/>/;\\n  const XML_TAG = {\\n    begin: /<[A-Za-z0-9\\\\\\\\._:-]+/,\\n    end: /\\\\/[A-Za-z0-9\\\\\\\\._:-]+>|\\\\/>/,\\n    /**\\n     * @param {RegExpMatchArray} match\\n     * @param {CallbackResponse} response\\n     */\\n    isTrulyOpeningTag: (match, response) => {\\n      const afterMatchIndex = match[0].length + match.index;\\n      const nextChar = match.input[afterMatchIndex];\\n      if (\\n        // HTML should not include another raw `<` inside a tag\\n        // nested type?\\n        // `<Array<Array<number>>`, etc.\\n        nextChar === \\\"<\\\" ||\\n        // the , gives away that this is not HTML\\n        // `<T, A extends keyof T, V>`\\n        nextChar === \\\",\\\") {\\n        response.ignoreMatch();\\n        return;\\n      }\\n\\n      // `<something>`\\n      // Quite possibly a tag, lets look for a matching closing tag...\\n      if (nextChar === \\\">\\\") {\\n        // if we cannot find a matching closing tag, then we\\n        // will ignore it\\n        if (!hasClosingTag(match, { after: afterMatchIndex })) {\\n          response.ignoreMatch();\\n        }\\n      }\\n\\n      // `<blah />` (self-closing)\\n      // handled by simpleSelfClosing rule\\n\\n      // `<From extends string>`\\n      // technically this could be HTML, but it smells like a type\\n      let m;\\n      const afterMatch = match.input.substr(afterMatchIndex);\\n      // NOTE: This is ugh, but added specifically for https://github.com/highlightjs/highlight.js/issues/3276\\n      if ((m = afterMatch.match(/^\\\\s+extends\\\\s+/))) {\\n        if (m.index === 0) {\\n          response.ignoreMatch();\\n          // eslint-disable-next-line no-useless-return\\n          return;\\n        }\\n      }\\n    }\\n  };\\n  const KEYWORDS$1 = {\\n    $pattern: IDENT_RE,\\n    keyword: KEYWORDS,\\n    literal: LITERALS,\\n    built_in: BUILT_INS,\\n    \\\"variable.language\\\": BUILT_IN_VARIABLES\\n  };\\n\\n  // https://tc39.es/ecma262/#sec-literals-numeric-literals\\n  const decimalDigits = '[0-9](_?[0-9])*';\\n  const frac = `\\\\\\\\.(${decimalDigits})`;\\n  // DecimalIntegerLiteral, including Annex B NonOctalDecimalIntegerLiteral\\n  // https://tc39.es/ecma262/#sec-additional-syntax-numeric-literals\\n  const decimalInteger = `0|[1-9](_?[0-9])*|0[0-7]*[89][0-9]*`;\\n  const NUMBER = {\\n    className: 'number',\\n    variants: [\\n      // DecimalLiteral\\n      { begin: `(\\\\\\\\b(${decimalInteger})((${frac})|\\\\\\\\.)?|(${frac}))` +\\n        `[eE][+-]?(${decimalDigits})\\\\\\\\b` },\\n      { begin: `\\\\\\\\b(${decimalInteger})\\\\\\\\b((${frac})\\\\\\\\b|\\\\\\\\.)?|(${frac})\\\\\\\\b` },\\n\\n      // DecimalBigIntegerLiteral\\n      { begin: `\\\\\\\\b(0|[1-9](_?[0-9])*)n\\\\\\\\b` },\\n\\n      // NonDecimalIntegerLiteral\\n      { begin: \\\"\\\\\\\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*n?\\\\\\\\b\\\" },\\n      { begin: \\\"\\\\\\\\b0[bB][0-1](_?[0-1])*n?\\\\\\\\b\\\" },\\n      { begin: \\\"\\\\\\\\b0[oO][0-7](_?[0-7])*n?\\\\\\\\b\\\" },\\n\\n      // LegacyOctalIntegerLiteral (does not include underscore separators)\\n      // https://tc39.es/ecma262/#sec-additional-syntax-numeric-literals\\n      { begin: \\\"\\\\\\\\b0[0-7]+n?\\\\\\\\b\\\" },\\n    ],\\n    relevance: 0\\n  };\\n\\n  const SUBST = {\\n    className: 'subst',\\n    begin: '\\\\\\\\$\\\\\\\\{',\\n    end: '\\\\\\\\}',\\n    keywords: KEYWORDS$1,\\n    contains: [] // defined later\\n  };\\n  const HTML_TEMPLATE = {\\n    begin: 'html`',\\n    end: '',\\n    starts: {\\n      end: '`',\\n      returnEnd: false,\\n      contains: [\\n        hljs.BACKSLASH_ESCAPE,\\n        SUBST\\n      ],\\n      subLanguage: 'xml'\\n    }\\n  };\\n  const CSS_TEMPLATE = {\\n    begin: 'css`',\\n    end: '',\\n    starts: {\\n      end: '`',\\n      returnEnd: false,\\n      contains: [\\n        hljs.BACKSLASH_ESCAPE,\\n        SUBST\\n      ],\\n      subLanguage: 'css'\\n    }\\n  };\\n  const TEMPLATE_STRING = {\\n    className: 'string',\\n    begin: '`',\\n    end: '`',\\n    contains: [\\n      hljs.BACKSLASH_ESCAPE,\\n      SUBST\\n    ]\\n  };\\n  const JSDOC_COMMENT = hljs.COMMENT(\\n    /\\\\/\\\\*\\\\*(?!\\\\/)/,\\n    '\\\\\\\\*/',\\n    {\\n      relevance: 0,\\n      contains: [\\n        {\\n          begin: '(?=@[A-Za-z]+)',\\n          relevance: 0,\\n          contains: [\\n            {\\n              className: 'doctag',\\n              begin: '@[A-Za-z]+'\\n            },\\n            {\\n              className: 'type',\\n              begin: '\\\\\\\\{',\\n              end: '\\\\\\\\}',\\n              excludeEnd: true,\\n              excludeBegin: true,\\n              relevance: 0\\n            },\\n            {\\n              className: 'variable',\\n              begin: IDENT_RE$1 + '(?=\\\\\\\\s*(-)|$)',\\n              endsParent: true,\\n              relevance: 0\\n            },\\n            // eat spaces (not newlines) so we can find\\n            // types or variables\\n            {\\n              begin: /(?=[^\\\\n])\\\\s/,\\n              relevance: 0\\n            }\\n          ]\\n        }\\n      ]\\n    }\\n  );\\n  const COMMENT = {\\n    className: \\\"comment\\\",\\n    variants: [\\n      JSDOC_COMMENT,\\n      hljs.C_BLOCK_COMMENT_MODE,\\n      hljs.C_LINE_COMMENT_MODE\\n    ]\\n  };\\n  const SUBST_INTERNALS = [\\n    hljs.APOS_STRING_MODE,\\n    hljs.QUOTE_STRING_MODE,\\n    HTML_TEMPLATE,\\n    CSS_TEMPLATE,\\n    TEMPLATE_STRING,\\n    NUMBER,\\n    // This is intentional:\\n    // See https://github.com/highlightjs/highlight.js/issues/3288\\n    // hljs.REGEXP_MODE\\n  ];\\n  SUBST.contains = SUBST_INTERNALS\\n    .concat({\\n      // we need to pair up {} inside our subst to prevent\\n      // it from ending too early by matching another }\\n      begin: /\\\\{/,\\n      end: /\\\\}/,\\n      keywords: KEYWORDS$1,\\n      contains: [\\n        \\\"self\\\"\\n      ].concat(SUBST_INTERNALS)\\n    });\\n  const SUBST_AND_COMMENTS = [].concat(COMMENT, SUBST.contains);\\n  const PARAMS_CONTAINS = SUBST_AND_COMMENTS.concat([\\n    // eat recursive parens in sub expressions\\n    {\\n      begin: /\\\\(/,\\n      end: /\\\\)/,\\n      keywords: KEYWORDS$1,\\n      contains: [\\\"self\\\"].concat(SUBST_AND_COMMENTS)\\n    }\\n  ]);\\n  const PARAMS = {\\n    className: 'params',\\n    begin: /\\\\(/,\\n    end: /\\\\)/,\\n    excludeBegin: true,\\n    excludeEnd: true,\\n    keywords: KEYWORDS$1,\\n    contains: PARAMS_CONTAINS\\n  };\\n\\n  // ES6 classes\\n  const CLASS_OR_EXTENDS = {\\n    variants: [\\n      // class Car extends vehicle\\n      {\\n        match: [\\n          /class/,\\n          /\\\\s+/,\\n          IDENT_RE$1,\\n          /\\\\s+/,\\n          /extends/,\\n          /\\\\s+/,\\n          regex.concat(IDENT_RE$1, \\\"(\\\", regex.concat(/\\\\./, IDENT_RE$1), \\\")*\\\")\\n        ],\\n        scope: {\\n          1: \\\"keyword\\\",\\n          3: \\\"title.class\\\",\\n          5: \\\"keyword\\\",\\n          7: \\\"title.class.inherited\\\"\\n        }\\n      },\\n      // class Car\\n      {\\n        match: [\\n          /class/,\\n          /\\\\s+/,\\n          IDENT_RE$1\\n        ],\\n        scope: {\\n          1: \\\"keyword\\\",\\n          3: \\\"title.class\\\"\\n        }\\n      },\\n\\n    ]\\n  };\\n\\n  const CLASS_REFERENCE = {\\n    relevance: 0,\\n    match:\\n    regex.either(\\n      // Hard coded exceptions\\n      /\\\\bJSON/,\\n      // Float32Array\\n      /\\\\b[A-Z][a-z]+([A-Z][a-z]+|\\\\d)*/,\\n      // CSSFactory\\n      /\\\\b[A-Z]{2,}([A-Z][a-z]+|\\\\d)+/,\\n      // BLAH\\n      // this will be flagged as a UPPER_CASE_CONSTANT instead\\n    ),\\n    className: \\\"title.class\\\",\\n    keywords: {\\n      _: [\\n        // se we still get relevance credit for JS library classes\\n        ...TYPES,\\n        ...ERROR_TYPES\\n      ]\\n    }\\n  };\\n\\n  const USE_STRICT = {\\n    label: \\\"use_strict\\\",\\n    className: 'meta',\\n    relevance: 10,\\n    begin: /^\\\\s*['\\\"]use (strict|asm)['\\\"]/\\n  };\\n\\n  const FUNCTION_DEFINITION = {\\n    variants: [\\n      {\\n        match: [\\n          /function/,\\n          /\\\\s+/,\\n          IDENT_RE$1,\\n          /(?=\\\\s*\\\\()/\\n        ]\\n      },\\n      // anonymous function\\n      {\\n        match: [\\n          /function/,\\n          /\\\\s*(?=\\\\()/\\n        ]\\n      }\\n    ],\\n    className: {\\n      1: \\\"keyword\\\",\\n      3: \\\"title.function\\\"\\n    },\\n    label: \\\"func.def\\\",\\n    contains: [ PARAMS ],\\n    illegal: /%/\\n  };\\n\\n  const UPPER_CASE_CONSTANT = {\\n    relevance: 0,\\n    match: /\\\\b[A-Z][A-Z_0-9]+\\\\b/,\\n    className: \\\"variable.constant\\\"\\n  };\\n\\n  function noneOf(list) {\\n    return regex.concat(\\\"(?!\\\", list.join(\\\"|\\\"), \\\")\\\");\\n  }\\n\\n  const FUNCTION_CALL = {\\n    match: regex.concat(\\n      /\\\\b/,\\n      noneOf([\\n        ...BUILT_IN_GLOBALS,\\n        \\\"super\\\"\\n      ]),\\n      IDENT_RE$1, regex.lookahead(/\\\\(/)),\\n    className: \\\"title.function\\\",\\n    relevance: 0\\n  };\\n\\n  const PROPERTY_ACCESS = {\\n    begin: regex.concat(/\\\\./, regex.lookahead(\\n      regex.concat(IDENT_RE$1, /(?![0-9A-Za-z$_(])/)\\n    )),\\n    end: IDENT_RE$1,\\n    excludeBegin: true,\\n    keywords: \\\"prototype\\\",\\n    className: \\\"property\\\",\\n    relevance: 0\\n  };\\n\\n  const GETTER_OR_SETTER = {\\n    match: [\\n      /get|set/,\\n      /\\\\s+/,\\n      IDENT_RE$1,\\n      /(?=\\\\()/\\n    ],\\n    className: {\\n      1: \\\"keyword\\\",\\n      3: \\\"title.function\\\"\\n    },\\n    contains: [\\n      { // eat to avoid empty params\\n        begin: /\\\\(\\\\)/\\n      },\\n      PARAMS\\n    ]\\n  };\\n\\n  const FUNC_LEAD_IN_RE = '(\\\\\\\\(' +\\n    '[^()]*(\\\\\\\\(' +\\n    '[^()]*(\\\\\\\\(' +\\n    '[^()]*' +\\n    '\\\\\\\\)[^()]*)*' +\\n    '\\\\\\\\)[^()]*)*' +\\n    '\\\\\\\\)|' + hljs.UNDERSCORE_IDENT_RE + ')\\\\\\\\s*=>';\\n\\n  const FUNCTION_VARIABLE = {\\n    match: [\\n      /const|var|let/, /\\\\s+/,\\n      IDENT_RE$1, /\\\\s*/,\\n      /=\\\\s*/,\\n      regex.lookahead(FUNC_LEAD_IN_RE)\\n    ],\\n    className: {\\n      1: \\\"keyword\\\",\\n      3: \\\"title.function\\\"\\n    },\\n    contains: [\\n      PARAMS\\n    ]\\n  };\\n\\n  return {\\n    name: 'Javascript',\\n    aliases: ['js', 'jsx', 'mjs', 'cjs'],\\n    keywords: KEYWORDS$1,\\n    // this will be extended by TypeScript\\n    exports: { PARAMS_CONTAINS, CLASS_REFERENCE },\\n    illegal: /#(?![$_A-z])/,\\n    contains: [\\n      hljs.SHEBANG({\\n        label: \\\"shebang\\\",\\n        binary: \\\"node\\\",\\n        relevance: 5\\n      }),\\n      USE_STRICT,\\n      hljs.APOS_STRING_MODE,\\n      hljs.QUOTE_STRING_MODE,\\n      HTML_TEMPLATE,\\n      CSS_TEMPLATE,\\n      TEMPLATE_STRING,\\n      COMMENT,\\n      NUMBER,\\n      CLASS_REFERENCE,\\n      {\\n        className: 'attr',\\n        begin: IDENT_RE$1 + regex.lookahead(':'),\\n        relevance: 0\\n      },\\n      FUNCTION_VARIABLE,\\n      { // \\\"value\\\" container\\n        begin: '(' + hljs.RE_STARTERS_RE + '|\\\\\\\\b(case|return|throw)\\\\\\\\b)\\\\\\\\s*',\\n        keywords: 'return throw case',\\n        relevance: 0,\\n        contains: [\\n          COMMENT,\\n          hljs.REGEXP_MODE,\\n          {\\n            className: 'function',\\n            // we have to count the parens to make sure we actually have the\\n            // correct bounding ( ) before the =>.  There could be any number of\\n            // sub-expressions inside also surrounded by parens.\\n            begin: FUNC_LEAD_IN_RE,\\n            returnBegin: true,\\n            end: '\\\\\\\\s*=>',\\n            contains: [\\n              {\\n                className: 'params',\\n                variants: [\\n                  {\\n                    begin: hljs.UNDERSCORE_IDENT_RE,\\n                    relevance: 0\\n                  },\\n                  {\\n                    className: null,\\n                    begin: /\\\\(\\\\s*\\\\)/,\\n                    skip: true\\n                  },\\n                  {\\n                    begin: /\\\\(/,\\n                    end: /\\\\)/,\\n                    excludeBegin: true,\\n                    excludeEnd: true,\\n                    keywords: KEYWORDS$1,\\n                    contains: PARAMS_CONTAINS\\n                  }\\n                ]\\n              }\\n            ]\\n          },\\n          { // could be a comma delimited list of params to a function call\\n            begin: /,/,\\n            relevance: 0\\n          },\\n          {\\n            match: /\\\\s+/,\\n            relevance: 0\\n          },\\n          { // JSX\\n            variants: [\\n              { begin: FRAGMENT.begin, end: FRAGMENT.end },\\n              { match: XML_SELF_CLOSING },\\n              {\\n                begin: XML_TAG.begin,\\n                // we carefully check the opening tag to see if it truly\\n                // is a tag and not a false positive\\n                'on:begin': XML_TAG.isTrulyOpeningTag,\\n                end: XML_TAG.end\\n              }\\n            ],\\n            subLanguage: 'xml',\\n            contains: [\\n              {\\n                begin: XML_TAG.begin,\\n                end: XML_TAG.end,\\n                skip: true,\\n                contains: ['self']\\n              }\\n            ]\\n          }\\n        ],\\n      },\\n      FUNCTION_DEFINITION,\\n      {\\n        // prevent this from getting swallowed up by function\\n        // since they appear \\\"function like\\\"\\n        beginKeywords: \\\"while if switch catch for\\\"\\n      },\\n      {\\n        // we have to count the parens to make sure we actually have the correct\\n        // bounding ( ).  There could be any number of sub-expressions inside\\n        // also surrounded by parens.\\n        begin: '\\\\\\\\b(?!function)' + hljs.UNDERSCORE_IDENT_RE +\\n          '\\\\\\\\(' + // first parens\\n          '[^()]*(\\\\\\\\(' +\\n            '[^()]*(\\\\\\\\(' +\\n              '[^()]*' +\\n            '\\\\\\\\)[^()]*)*' +\\n          '\\\\\\\\)[^()]*)*' +\\n          '\\\\\\\\)\\\\\\\\s*\\\\\\\\{', // end parens\\n        returnBegin:true,\\n        label: \\\"func.def\\\",\\n        contains: [\\n          PARAMS,\\n          hljs.inherit(hljs.TITLE_MODE, { begin: IDENT_RE$1, className: \\\"title.function\\\" })\\n        ]\\n      },\\n      // catch ... so it won't trigger the property rule below\\n      {\\n        match: /\\\\.\\\\.\\\\./,\\n        relevance: 0\\n      },\\n      PROPERTY_ACCESS,\\n      // hack: prevents detection of keywords in some circumstances\\n      // .keyword()\\n      // $keyword = x\\n      {\\n        match: '\\\\\\\\$' + IDENT_RE$1,\\n        relevance: 0\\n      },\\n      {\\n        match: [ /\\\\bconstructor(?=\\\\s*\\\\()/ ],\\n        className: { 1: \\\"title.function\\\" },\\n        contains: [ PARAMS ]\\n      },\\n      FUNCTION_CALL,\\n      UPPER_CASE_CONSTANT,\\n      CLASS_OR_EXTENDS,\\n      GETTER_OR_SETTER,\\n      {\\n        match: /\\\\$[(.]/ // relevance booster for a pattern common to JS libs: `$(something)` and `$.something`\\n      }\\n    ]\\n  };\\n}\\n\\nmodule.exports = javascript;\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,