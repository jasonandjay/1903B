.js\");\n\n/***/ }),\n/* 26 */\n/***/ (function(module, exports) {\n\nmodule.exports = __webpack_require__(/*! element-ui/lib/tooltip */ \"./node_modules/element-ui/lib/tooltip.js\");\n\n/***/ }),\n/* 27 */\n/***/ (function(module, exports) {\n\nmodule.exports = __webpack_require__(/*! element-ui/lib/utils/scroll-into-view */ \"./node_modules/element-ui/lib/utils/scroll-into-view.js\");\n\n/***/ }),\n/* 28 */\n/***/ (function(module, exports) {\n\nmodule.exports = __webpack_require__(/*! element-ui/lib/button-group */ \"./node_modules/element-ui/lib/button-group.js\");\n\n/***/ }),\n/* 29 */\n/***/ (function(module, exports) {\n\nmodule.exports = __webpack_require__(/*! element-ui/lib/tag */ \"./node_modules/element-ui/lib/tag.js\");\n\n/***/ }),\n/* 30 */\n/***/ (function(module, exports) {\n\nmodule.exports = __webpack_require__(/*! element-ui/lib/utils/scrollbar-width */ \"./node_modules/element-ui/lib/utils/scrollbar-width.js\");\n\n/***/ }),\n/* 31 */\n/***/ (function(module, exports) {\n\nmodule.exports = __webpack_require__(/*! element-ui/lib/checkbox-group */ \"./node_modules/element-ui/lib/checkbox-group.js\");\n\n/***/ }),\n/* 32 */\n/***/ (function(module, exports) {\n\nmodule.exports = __webpack_require__(/*! element-ui/lib/utils/after-leave */ \"./node_modules/element-ui/lib/utils/after-leave.js\");\n\n/***/ }),\n/* 33 */\n/***/ (function(module, exports) {\n\nmodule.exports = __webpack_require__(/*! element-ui/lib/progress */ \"./node_modules/element-ui/lib/progress.js\");\n\n/***/ }),\n/* 34 */\n/***/ (function(module, exports) {\n\nmodule.exports = __webpack_require__(/*! element-ui/lib/utils/aria-utils */ \"./node_modules/element-ui/lib/utils/aria-utils.js\");\n\n/***/ }),\n/* 35 */\n/***/ (function(module, exports) {\n\nmodule.exports = __webpack_require__(/*! throttle-debounce */ \"./node_modules/throttle-debounce/index.js\");\n\n/***/ }),\n/* 36 */\n/***/ (function(module, exports) {\n\nmodule.exports = __webpack_require__(/*! element-ui/lib/select */ \"./node_modules/element-ui/lib/select.js\");\n\n/***/ }),\n/* 37 */\n/***/ (function(module, exports) {\n\nmodule.exports = __webpack_require__(/*! element-ui/lib/option */ \"./node_modules/element-ui/lib/option.js\");\n\n/***/ }),\n/* 38 */\n/***/ (function(module, exports) {\n\nmodule.exports = __webpack_require__(/*! normalize-wheel */ \"./node_modules/normalize-wheel/index.js\");\n\n/***/ }),\n/* 39 */\n/***/ (function(module, exports) {\n\nmodule.exports = __webpack_require__(/*! element-ui/lib/utils/aria-dialog */ \"./node_modules/element-ui/lib/utils/aria-dialog.js\");\n\n/***/ }),\n/* 40 */\n/***/ (function(module, exports) {\n\nmodule.exports = __webpack_require__(/*! async-validator */ \"./node_modules/async-validator/es/index.js\");\n\n/***/ }),\n/* 41 */\n/***/ (function(module, exports) {\n\nmodule.exports = __webpack_require__(/*! element-ui/lib/input-number */ \"./node_modules/element-ui/lib/input-number.js\");\n\n/***/ }),\n/* 42 */\n/***/ (function(module, exports) {\n\nmodule.exports = __webpack_require__(/*! element-ui/lib/cascader-panel */ \"./node_modules/element-ui/lib/cascader-panel.js\");\n\n/***/ }),\n/* 43 */\n/***/ (function(module, exports) {\n\nmodule.exports = __webpack_require__(/*! element-ui/lib/radio */ \"./node_modules/element-ui/lib/radio.js\");\n\n/***/ }),\n/* 44 */\n/***/ (function(module, exports) {\n\nmodule.exports = __webpack_require__(/*! element-ui/lib/popover */ \"./node_modules/element-ui/lib/popover.js\");\n\n/***/ }),\n/* 45 */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(46);\n\n\n/***/ }),\n/* 46 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/pagination/src/pager.vue?vue&type=template&id=7274f267&\nvar pagervue_type_template_id_7274f267_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"ul\",\n    { staticClass: \"el-pager\", on: { click: _vm.onPagerClick } },\n    [\n      _vm.pageCount > 0\n        ? _c(\n            \"li\",\n            {\n              staticClass: \"number\",\n              class: { active: _vm.currentPage === 1, disabled: _vm.disabled }\n            },\n            [_vm._v(\"1\")]\n          )\n        : _vm._e(),\n      _vm.showPrevMore\n        ? _c(\"li\", {\n            staticClass: \"el-icon more btn-quickprev\",\n            class: [_vm.quickprevIconClass, { disabled: _vm.disabled }],\n            on: {\n              mouseenter: function($event) {\n                _vm.onMouseenter(\"left\")\n              },\n              mouseleave: function($event) {\n                _vm.quickprevIconClass = \"el-icon-more\"\n              }\n            }\n          })\n        : _vm._e(),\n      _vm._l(_vm.pagers, function(pager) {\n        return _c(\n          \"li\",\n          {\n            key: pager,\n            staticClass: \"number\",\n            class: { active: _vm.currentPage === pager, disabled: _vm.disabled }\n          },\n          [_vm._v(_vm._s(pager))]\n        )\n      }),\n      _vm.showNextMore\n        ? _c(\"li\", {\n            staticClass: \"el-icon more btn-quicknext\",\n            class: [_vm.quicknextIconClass, { disabled: _vm.disabled }],\n            on: {\n              mouseenter: function($event) {\n                _vm.onMouseenter(\"right\")\n              },\n              mouseleave: function($event) {\n                _vm.quicknextIconClass = \"el-icon-more\"\n              }\n            }\n          })\n        : _vm._e(),\n      _vm.pageCount > 1\n        ? _c(\n            \"li\",\n            {\n              staticClass: \"number\",\n              class: {\n                active: _vm.currentPage === _vm.pageCount,\n                disabled: _vm.disabled\n              }\n            },\n            [_vm._v(_vm._s(_vm.pageCount))]\n          )\n        : _vm._e()\n    ],\n    2\n  )\n}\nvar staticRenderFns = []\npagervue_type_template_id_7274f267_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/pagination/src/pager.vue?vue&type=template&id=7274f267&\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/pagination/src/pager.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* harmony default export */ var pagervue_type_script_lang_js_ = ({\n  name: 'ElPager',\n\n  props: {\n    currentPage: Number,\n\n    pageCount: Number,\n\n    pagerCount: Number,\n\n    disabled: Boolean\n  },\n\n  watch: {\n    showPrevMore: function showPrevMore(val) {\n      if (!val) this.quickprevIconClass = 'el-icon-more';\n    },\n    showNextMore: function showNextMore(val) {\n      if (!val) this.quicknextIconClass = 'el-icon-more';\n    }\n  },\n\n  methods: {\n    onPagerClick: function onPagerClick(event) {\n      var target = event.target;\n      if (target.tagName === 'UL' || this.disabled) {\n        return;\n      }\n\n      var newPage = Number(event.target.textContent);\n      var pageCount = this.pageCount;\n      var currentPage = this.currentPage;\n      var pagerCountOffset = this.pagerCount - 2;\n\n      if (target.className.indexOf('more') !== -1) {\n        if (target.className.indexOf('quickprev') !== -1) {\n          newPage = currentPage - pagerCountOffset;\n        } else if (target.className.indexOf('quicknext') !== -1) {\n          newPage = currentPage + pagerCountOffset;\n        }\n      }\n\n      /* istanbul ignore if */\n      if (!isNaN(newPage)) {\n        if (newPage < 1) {\n          newPage = 1;\n        }\n\n        if (newPage > pageCount) {\n          newPage = pageCount;\n        }\n      }\n\n      if (newPage !== currentPage) {\n        this.$emit('change', newPage);\n      }\n    },\n    onMouseenter: function onMouseenter(direction) {\n      if (this.disabled) return;\n      if (direction === 'left') {\n        this.quickprevIconClass = 'el-icon-d-arrow-left';\n      } else {\n        this.quicknextIconClass = 'el-icon-d-arrow-right';\n      }\n    }\n  },\n\n  computed: {\n    pagers: function pagers() {\n      var pagerCount = this.pagerCount;\n      var halfPagerCount = (pagerCount - 1) / 2;\n\n      var currentPage = Number(this.currentPage);\n      var pageCount = Number(this.pageCount);\n\n      var showPrevMore = false;\n      var showNextMore = false;\n\n      if (pageCount > pagerCount) {\n        if (currentPage > pagerCount - halfPagerCount) {\n          showPrevMore = true;\n        }\n\n        if (currentPage < pageCount - halfPagerCount) {\n          showNextMore = true;\n        }\n      }\n\n      var array = [];\n\n      if (showPrevMore && !showNextMore) {\n        var startPage = pageCount - (pagerCount - 2);\n        for (var i = startPage; i < pageCount; i++) {\n          array.push(i);\n        }\n      } else if (!showPrevMore && showNextMore) {\n        for (var _i = 2; _i < pagerCount; _i++) {\n          array.push(_i);\n        }\n      } else if (showPrevMore && showNextMore) {\n        var offset = Math.floor(pagerCount / 2) - 1;\n        for (var _i2 = currentPage - offset; _i2 <= currentPage + offset; _i2++) {\n          array.push(_i2);\n        }\n      } else {\n        for (var _i3 = 2; _i3 < pageCount; _i3++) {\n          array.push(_i3);\n        }\n      }\n\n      this.showPrevMore = showPrevMore;\n      this.showNextMore = showNextMore;\n\n      return array;\n    }\n  },\n\n  data: function data() {\n    return {\n      current: null,\n      showPrevMore: false,\n      showNextMore: false,\n      quicknextIconClass: 'el-icon-more',\n      quickprevIconClass: 'el-icon-more'\n    };\n  }\n});\n// CONCATENATED MODULE: ./packages/pagination/src/pager.vue?vue&type=script&lang=js&\n /* harmony default export */ var src_pagervue_type_script_lang_js_ = (pagervue_type_script_lang_js_); \n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js\n/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nfunction normalizeComponent (\n  scriptExports,\n  render,\n  staticRenderFns,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier, /* server only */\n  shadowMode /* vue-cli only */\n) {\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (render) {\n    options.render = render\n    options.staticRenderFns = staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = 'data-v-' + scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = shadowMode\n      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }\n      : injectStyles\n  }\n\n  if (hook) {\n    if (options.functional) {\n      // for template-only hot-reload because in that case the render fn doesn't\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functioal component in vue file\n      var originalRender = options.render\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return originalRender(h, context)\n      }\n    } else {\n      // inject component registration as beforeCreate hook\n      var existing = options.beforeCreate\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    }\n  }\n\n  return {\n    exports: scriptExports,\n    options: options\n  }\n}\n\n// CONCATENATED MODULE: ./packages/pagination/src/pager.vue\n\n\n\n\n\n/* normalize component */\n\nvar component = normalizeComponent(\n  src_pagervue_type_script_lang_js_,\n  pagervue_type_template_id_7274f267_render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var api; }\ncomponent.options.__file = \"packages/pagination/src/pager.vue\"\n/* harmony default export */ var pager = (component.exports);\n// EXTERNAL MODULE: external \"element-ui/lib/select\"\nvar select_ = __webpack_require__(36);\nvar select_default = /*#__PURE__*/__webpack_require__.n(select_);\n\n// EXTERNAL MODULE: external \"element-ui/lib/option\"\nvar option_ = __webpack_require__(37);\nvar option_default = /*#__PURE__*/__webpack_require__.n(option_);\n\n// EXTERNAL MODULE: external \"element-ui/lib/input\"\nvar input_ = __webpack_require__(8);\nvar input_default = /*#__PURE__*/__webpack_require__.n(input_);\n\n// EXTERNAL MODULE: external \"element-ui/lib/mixins/locale\"\nvar locale_ = __webpack_require__(4);\nvar locale_default = /*#__PURE__*/__webpack_require__.n(locale_);\n\n// EXTERNAL MODULE: external \"element-ui/lib/utils/util\"\nvar util_ = __webpack_require__(2);\n\n// CONCATENATED MODULE: ./packages/pagination/src/pagination.js\n\n\n\n\n\n\n\n/* harmony default export */ var pagination = ({\n  name: 'ElPagination',\n\n  props: {\n    pageSize: {\n      type: Number,\n      default: 10\n    },\n\n    small: Boolean,\n\n    total: Number,\n\n    pageCount: Number,\n\n    pagerCount: {\n      type: Number,\n      validator: function validator(value) {\n        return (value | 0) === value && value > 4 && value < 22 && value % 2 === 1;\n      },\n\n      default: 7\n    },\n\n    currentPage: {\n      type: Number,\n      default: 1\n    },\n\n    layout: {\n      default: 'prev, pager, next, jumper, ->, total'\n    },\n\n    pageSizes: {\n      type: Array,\n      default: function _default() {\n        return [10, 20, 30, 40, 50, 100];\n      }\n    },\n\n    popperClass: String,\n\n    prevText: String,\n\n    nextText: String,\n\n    background: Boolean,\n\n    disabled: Boolean,\n\n    hideOnSinglePage: Boolean\n  },\n\n  data: function data() {\n    return {\n      internalCurrentPage: 1,\n      internalPageSize: 0,\n      lastEmittedPage: -1,\n      userChangePageSize: false\n    };\n  },\n  render: function render(h) {\n    var layout = this.layout;\n    if (!layout) return null;\n    if (this.hideOnSinglePage && (!this.internalPageCount || this.internalPageCount === 1)) return null;\n\n    var template = h('div', { 'class': ['el-pagination', {\n        'is-background': this.background,\n        'el-pagination--small': this.small\n      }] });\n    var TEMPLATE_MAP = {\n      prev: h('prev'),\n      jumper: h('jumper'),\n      pager: h('pager', {\n        attrs: { currentPage: this.internalCurrentPage, pageCount: this.internalPageCount, pagerCount: this.pagerCount, disabled: this.disabled },\n        on: {\n          'change': this.handleCurrentChange\n        }\n      }),\n      next: h('next'),\n      sizes: h('sizes', {\n        attrs: { pageSizes: this.pageSizes }\n      }),\n      slot: h('slot', [this.$slots.default ? this.$slots.default : '']),\n      total: h('total')\n    };\n    var components = layout.split(',').map(function (item) {\n      return item.trim();\n    });\n    var rightWrapper = h('div', { 'class': 'el-pagination__rightwrapper' });\n    var haveRightWrapper = false;\n\n    template.children = template.children || [];\n    rightWrapper.children = rightWrapper.children || [];\n    components.forEach(function (compo) {\n      if (compo === '->') {\n        haveRightWrapper = true;\n        return;\n      }\n\n      if (!haveRightWrapper) {\n        template.children.push(TEMPLATE_MAP[compo]);\n      } else {\n        rightWrapper.children.push(TEMPLATE_MAP[compo]);\n      }\n    });\n\n    if (haveRightWrapper) {\n      template.children.unshift(rightWrapper);\n    }\n\n    return template;\n  },\n\n\n  components: {\n    Prev: {\n      render: function render(h) {\n        return h(\n          'button',\n          {\n            attrs: {\n              type: 'button',\n\n              disabled: this.$parent.disabled || this.$parent.internalCurrentPage <= 1\n            },\n            'class': 'btn-prev', on: {\n              'click': this.$parent.prev\n            }\n          },\n          [this.$parent.prevText ? h('span', [this.$parent.prevText]) : h('i', { 'class': 'el-icon el-icon-arrow-left' })]\n        );\n      }\n    },\n\n    Next: {\n      render: function render(h) {\n        return h(\n          'button',\n          {\n            attrs: {\n              type: 'button',\n\n              disabled: this.$parent.disabled || this.$parent.internalCurrentPage === this.$parent.internalPageCount || this.$parent.internalPageCount === 0\n            },\n            'class': 'btn-next', on: {\n              'click': this.$parent.next\n            }\n          },\n          [this.$parent.nextText ? h('span', [this.$parent.nextText]) : h('i', { 'class': 'el-icon el-icon-arrow-right' })]\n        );\n      }\n    },\n\n    Sizes: {\n      mixins: [locale_default.a],\n\n      props: {\n        pageSizes: Array\n      },\n\n      watch: {\n        pageSizes: {\n          immediate: true,\n          handler: function handler(newVal, oldVal) {\n            if (Object(util_[\"valueEquals\"])(newVal, oldVal)) return;\n            if (Array.isArray(newVal)) {\n              this.$parent.internalPageSize = newVal.indexOf(this.$parent.pageSize) > -1 ? this.$parent.pageSize : this.pageSizes[0];\n            }\n          }\n        }\n      },\n\n      render: function render(h) {\n        var _this = this;\n\n        return h(\n          'span',\n          { 'class': 'el-pagination__sizes' },\n          [h(\n            'el-select',\n            {\n              attrs: {\n                value: this.$parent.internalPageSize,\n                popperClass: this.$parent.popperClass || '',\n                size: 'mini',\n\n                disabled: this.$parent.disabled },\n              on: {\n                'input': this.handleChange\n              }\n            },\n            [this.pageSizes.map(function (item) {\n              return h('el-option', {\n                attrs: {\n                  value: item,\n                  label: item + _this.t('el.pagination.pagesize') }\n              });\n            })]\n          )]\n        );\n      },\n\n\n      components: {\n        ElSelect: select_default.a,\n        ElOption: option_default.a\n      },\n\n      methods: {\n        handleChange: function handleChange(val) {\n          if (val !== this.$parent.internalPageSize) {\n            this.$parent.internalPageSize = val = parseInt(val, 10);\n            this.$parent.userChangePageSize = true;\n            this.$parent.$emit('update:pageSize', val);\n            this.$parent.$emit('size-change', val);\n          }\n        }\n      }\n    },\n\n    Jumper: {\n      mixins: [locale_default.a],\n\n      components: { ElInput: input_default.a },\n\n      data: function data() {\n        return {\n          userInput: null\n        };\n      },\n\n\n      watch: {\n        '$parent.internalCurrentPage': function $parentInternalCurrentPage() {\n          this.userInput = null;\n        }\n      },\n\n      methods: {\n        handleKeyup: function handleKeyup(_ref) {\n          var keyCode = _ref.keyCode,\n              target = _ref.target;\n\n          // Chrome, Safari, Firefox triggers change event on Enter\n          // Hack for IE: https://github.com/ElemeFE/element/issues/11710\n          // Drop this method when we no longer supports IE\n          if (keyCode === 13) {\n            this.handleChange(target.value);\n          }\n        },\n        handleInput: function handleInput(value) {\n          this.userInput = value;\n        },\n        handleChange: function handleChange(value) {\n          this.$parent.internalCurrentPage = this.$parent.getValidCurrentPage(value);\n          this.$parent.emitChange();\n          this.userInput = null;\n        }\n      },\n\n      render: function render(h) {\n        return h(\n          'span',\n          { 'class': 'el-pagination__jump' },\n          [this.t('el.pagination.goto'), h('el-input', {\n            'class': 'el-pagination__editor is-in-pagination',\n            attrs: { min: 1,\n              max: this.$parent.internalPageCount,\n              value: this.userInput !== null ? this.userInput : this.$parent.internalCurrentPage,\n              type: 'number',\n              disabled: this.$parent.disabled\n            },\n            nativeOn: {\n              'keyup': this.handleKeyup\n            },\n            on: {\n              'input': this.handleInput,\n              'change': this.handleChange\n            }\n          }), this.t('el.pagination.pageClassifier')]\n        );\n      }\n    },\n\n    Total: {\n      mixins: [locale_default.a],\n\n      render: function render(h) {\n        return typeof this.$parent.total === 'number' ? h(\n          'span',\n          { 'class': 'el-pagination__total' },\n          [this.t('el.pagination.total', { total: this.$parent.total })]\n        ) : '';\n      }\n    },\n\n    Pager: pager\n  },\n\n  methods: {\n    handleCurrentChange: function handleCurrentChange(val) {\n      this.internalCurrentPage = this.getValidCurrentPage(val);\n      this.userChangePageSize = true;\n      this.emitChange();\n    },\n    prev: function prev() {\n      if (this.disabled) return;\n      var newVal = this.internalCurrentPage - 1;\n      this.internalCurrentPage = this.getValidCurrentPage(newVal);\n      this.$emit('prev-click', this.internalCurrentPage);\n      this.emitChange();\n    },\n    next: function next() {\n      if (this.disabled) return;\n      var newVal = this.internalCurrentPage + 1;\n      this.internalCurrentPage = this.getValidCurrentPage(newVal);\n      this.$emit('next-click', this.internalCurrentPage);\n      this.emitChange();\n    },\n    getValidCurrentPage: function getValidCurrentPage(value) {\n      value = parseInt(value, 10);\n\n      var havePageCount = typeof this.internalPageCount === 'number';\n\n      var resetValue = void 0;\n      if (!havePageCount) {\n        if (isNaN(value) || value < 1) resetValue = 1;\n      } else {\n        if (value < 1) {\n          resetValue = 1;\n        } else if (value > this.internalPageCount) {\n          resetValue = this.internalPageCount;\n        }\n      }\n\n      if (resetValue === undefined && isNaN(value)) {\n        resetValue = 1;\n      } else if (resetValue === 0) {\n        resetValue = 1;\n      }\n\n      return resetValue === undefined ? value : resetValue;\n    },\n    emitChange: function emitChange() {\n      var _this2 = this;\n\n      this.$nextTick(function () {\n        if (_this2.internalCurrentPage !== _this2.lastEmittedPage || _this2.userChangePageSize) {\n          _this2.$emit('current-change', _this2.internalCurrentPage);\n          _this2.lastEmittedPage = _this2.internalCurrentPage;\n          _this2.userChangePageSize = false;\n        }\n      });\n    }\n  },\n\n  computed: {\n    internalPageCount: function internalPageCount() {\n      if (typeof this.total === 'number') {\n        return Math.max(1, Math.ceil(this.total / this.internalPageSize));\n      } else if (typeof this.pageCount === 'number') {\n        return Math.max(1, this.pageCount);\n      }\n      return null;\n    }\n  },\n\n  watch: {\n    currentPage: {\n      immediate: true,\n      handler: function handler(val) {\n        this.internalCurrentPage = this.getValidCurrentPage(val);\n      }\n    },\n\n    pageSize: {\n      immediate: true,\n      handler: function handler(val) {\n        this.internalPageSize = isNaN(val) ? 10 : val;\n      }\n    },\n\n    internalCurrentPage: {\n      immediate: true,\n      handler: function handler(newVal) {\n        this.$emit('update:currentPage', newVal);\n        this.lastEmittedPage = -1;\n      }\n    },\n\n    internalPageCount: function internalPageCount(newVal) {\n      /* istanbul ignore if */\n      var oldPage = this.internalCurrentPage;\n      if (newVal > 0 && oldPage === 0) {\n        this.internalCurrentPage = 1;\n      } else if (oldPage > newVal) {\n        this.internalCurrentPage = newVal === 0 ? 1 : newVal;\n        this.userChangePageSize && this.emitChange();\n      }\n      this.userChangePageSize = false;\n    }\n  }\n});\n// CONCATENATED MODULE: ./packages/pagination/index.js\n\n\n/* istanbul ignore next */\npagination.install = function (Vue) {\n  Vue.component(pagination.name, pagination);\n};\n\n/* harmony default export */ var packages_pagination = (pagination);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/dialog/src/component.vue?vue&type=template&id=60140e62&\nvar componentvue_type_template_id_60140e62_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"transition\",\n    {\n      attrs: { name: \"dialog-fade\" },\n      on: { \"after-enter\": _vm.afterEnter, \"after-leave\": _vm.afterLeave }\n    },\n    [\n      _c(\n        \"div\",\n        {\n          directives: [\n            {\n              name: \"show\",\n              rawName: \"v-show\",\n              value: _vm.visible,\n              expression: \"visible\"\n            }\n          ],\n          staticClass: \"el-dialog__wrapper\",\n          on: {\n            click: function($event) {\n              if ($event.target !== $event.currentTarget) {\n                return null\n              }\n              return _vm.handleWrapperClick($event)\n            }\n          }\n        },\n        [\n          _c(\n            \"div\",\n            {\n              key: _vm.key,\n              ref: \"dialog\",\n              class: [\n                \"el-dialog\",\n                {\n                  \"is-fullscreen\": _vm.fullscreen,\n                  \"el-dialog--center\": _vm.center\n                },\n                _vm.customClass\n              ],\n              style: _vm.style,\n              attrs: {\n                role: \"dialog\",\n                \"aria-modal\": \"true\",\n                \"aria-label\": _vm.title || \"dialog\"\n              }\n            },\n            [\n              _c(\n                \"div\",\n                { staticClass: \"el-dialog__header\" },\n                [\n                  _vm._t(\"title\", [\n                    _c(\"span\", { staticClass: \"el-dialog__title\" }, [\n                      _vm._v(_vm._s(_vm.title))\n                    ])\n                  ]),\n                  _vm.showClose\n                    ? _c(\n                        \"button\",\n                        {\n                          staticClass: \"el-dialog__headerbtn\",\n                          attrs: { type: \"button\", \"aria-label\": \"Close\" },\n                          on: { click: _vm.handleClose }\n                        },\n                        [\n                          _c(\"i\", {\n                            staticClass:\n                              \"el-dialog__close el-icon el-icon-close\"\n                          })\n                        ]\n                      )\n                    : _vm._e()\n                ],\n                2\n              ),\n              _vm.rendered\n                ? _c(\n                    \"div\",\n                    { staticClass: \"el-dialog__body\" },\n                    [_vm._t(\"default\")],\n                    2\n                  )\n                : _vm._e(),\n              _vm.$slots.footer\n                ? _c(\n                    \"div\",\n                    { staticClass: \"el-dialog__footer\" },\n                    [_vm._t(\"footer\")],\n                    2\n                  )\n                : _vm._e()\n            ]\n          )\n        ]\n      )\n    ]\n  )\n}\nvar componentvue_type_template_id_60140e62_staticRenderFns = []\ncomponentvue_type_template_id_60140e62_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/dialog/src/component.vue?vue&type=template&id=60140e62&\n\n// EXTERNAL MODULE: external \"element-ui/lib/utils/popup\"\nvar popup_ = __webpack_require__(11);\nvar popup_default = /*#__PURE__*/__webpack_require__.n(popup_);\n\n// EXTERNAL MODULE: external \"element-ui/lib/mixins/migrating\"\nvar migrating_ = __webpack_require__(9);\nvar migrating_default = /*#__PURE__*/__webpack_require__.n(migrating_);\n\n// EXTERNAL MODULE: external \"element-ui/lib/mixins/emitter\"\nvar emitter_ = __webpack_require__(3);\nvar emitter_default = /*#__PURE__*/__webpack_require__.n(emitter_);\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/dialog/src/component.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n/* harmony default export */ var componentvue_type_script_lang_js_ = ({\n  name: 'ElDialog',\n\n  mixins: [popup_default.a, emitter_default.a, migrating_default.a],\n\n  props: {\n    title: {\n      type: String,\n      default: ''\n    },\n\n    modal: {\n      type: Boolean,\n      default: true\n    },\n\n    modalAppendToBody: {\n      type: Boolean,\n      default: true\n    },\n\n    appendToBody: {\n      type: Boolean,\n      default: false\n    },\n\n    lockScroll: {\n      type: Boolean,\n      default: true\n    },\n\n    closeOnClickModal: {\n      type: Boolean,\n      default: true\n    },\n\n    closeOnPressEscape: {\n      type: Boolean,\n      default: true\n    },\n\n    showClose: {\n      type: Boolean,\n      default: true\n    },\n\n    width: String,\n\n    fullscreen: Boolean,\n\n    customClass: {\n      type: String,\n      default: ''\n    },\n\n    top: {\n      type: String,\n      default: '15vh'\n    },\n    beforeClose: Function,\n    center: {\n      type: Boolean,\n      default: false\n    },\n\n    destroyOnClose: Boolean\n  },\n\n  data: function data() {\n    return {\n      closed: false,\n      key: 0\n    };\n  },\n\n\n  watch: {\n    visible: function visible(val) {\n      var _this = this;\n\n      if (val) {\n        this.closed = false;\n        this.$emit('open');\n        this.$el.addEventListener('scroll', this.updatePopper);\n        this.$nextTick(function () {\n          _this.$refs.dialog.scrollTop = 0;\n        });\n        if (this.appendToBody) {\n          document.body.appendChild(this.$el);\n        }\n      } else {\n        this.$el.removeEventListener('scroll', this.updatePopper);\n        if (!this.closed) this.$emit('close');\n        if (this.destroyOnClose) {\n          this.$nextTick(function () {\n            _this.key++;\n          });\n        }\n      }\n    }\n  },\n\n  computed: {\n    style: function style() {\n      var style = {};\n      if (!this.fullscreen) {\n        style.marginTop = this.top;\n        if (this.width) {\n          style.width = this.width;\n        }\n      }\n      return style;\n    }\n  },\n\n  methods: {\n    getMigratingConfig: function getMigratingConfig() {\n      return {\n        props: {\n          'size': 'size is removed.'\n        }\n      };\n    },\n    handleWrapperClick: function handleWrapperClick() {\n      if (!this.closeOnClickModal) return;\n      this.handleClose();\n    },\n    handleClose: function handleClose() {\n      if (typeof this.beforeClose === 'function') {\n        this.beforeClose(this.hide);\n      } else {\n        this.hide();\n      }\n    },\n    hide: function hide(cancel) {\n      if (cancel !== false) {\n        this.$emit('update:visible', false);\n        this.$emit('close');\n        this.closed = true;\n      }\n    },\n    updatePopper: function updatePopper() {\n      this.broadcast('ElSelectDropdown', 'updatePopper');\n      this.broadcast('ElDropdownMenu', 'updatePopper');\n    },\n    afterEnter: function afterEnter() {\n      this.$emit('opened');\n    },\n    afterLeave: function afterLeave() {\n      this.$emit('closed');\n    }\n  },\n\n  mounted: function mounted() {\n    if (this.visible) {\n      this.rendered = true;\n      this.open();\n      if (this.appendToBody) {\n        document.body.appendChild(this.$el);\n      }\n    }\n  },\n  destroyed: function destroyed() {\n    // if appendToBody is true, remove DOM node after destroy\n    if (this.appendToBody && this.$el && this.$el.parentNode) {\n      this.$el.parentNode.removeChild(this.$el);\n    }\n  }\n});\n// CONCATENATED MODULE: ./packages/dialog/src/component.vue?vue&type=script&lang=js&\n /* harmony default export */ var src_componentvue_type_script_lang_js_ = (componentvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/dialog/src/component.vue\n\n\n\n\n\n/* normalize component */\n\nvar component_component = normalizeComponent(\n  src_componentvue_type_script_lang_js_,\n  componentvue_type_template_id_60140e62_render,\n  componentvue_type_template_id_60140e62_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var component_api; }\ncomponent_component.options.__file = \"packages/dialog/src/component.vue\"\n/* harmony default export */ var src_component = (component_component.exports);\n// CONCATENATED MODULE: ./packages/dialog/index.js\n\n\n/* istanbul ignore next */\nsrc_component.install = function (Vue) {\n  Vue.component(src_component.name, src_component);\n};\n\n/* harmony default export */ var dialog = (src_component);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/autocomplete/src/autocomplete.vue?vue&type=template&id=152f2ee6&\nvar autocompletevue_type_template_id_152f2ee6_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    {\n      directives: [\n        {\n          name: \"clickoutside\",\n          rawName: \"v-clickoutside\",\n          value: _vm.close,\n          expression: \"close\"\n        }\n      ],\n      staticClass: \"el-autocomplete\",\n      attrs: {\n        \"aria-haspopup\": \"listbox\",\n        role: \"combobox\",\n        \"aria-expanded\": _vm.suggestionVisible,\n        \"aria-owns\": _vm.id\n      }\n    },\n    [\n      _c(\n        \"el-input\",\n        _vm._b(\n          {\n            ref: \"input\",\n            on: {\n              input: _vm.handleInput,\n              change: _vm.handleChange,\n              focus: _vm.handleFocus,\n              blur: _vm.handleBlur,\n              clear: _vm.handleClear\n            },\n            nativeOn: {\n              keydown: [\n                function($event) {\n                  if (\n                    !(\"button\" in $event) &&\n                    _vm._k($event.keyCode, \"up\", 38, $event.key, [\n                      \"Up\",\n                      \"ArrowUp\"\n                    ])\n                  ) {\n                    return null\n                  }\n                  $event.preventDefault()\n                  _vm.highlight(_vm.highlightedIndex - 1)\n                },\n                function($event) {\n                  if (\n                    !(\"button\" in $event) &&\n                    _vm._k($event.keyCode, \"down\", 40, $event.key, [\n                      \"Down\",\n                      \"ArrowDown\"\n                    ])\n                  ) {\n                    return null\n                  }\n                  $event.preventDefault()\n                  _vm.highlight(_vm.highlightedIndex + 1)\n                },\n                function($event) {\n                  if (\n                    !(\"button\" in $event) &&\n                    _vm._k($event.keyCode, \"enter\", 13, $event.key, \"Enter\")\n                  ) {\n                    return null\n                  }\n                  return _vm.handleKeyEnter($event)\n                },\n                function($event) {\n                  if (\n                    !(\"button\" in $event) &&\n                    _vm._k($event.keyCode, \"tab\", 9, $event.key, \"Tab\")\n                  ) {\n                    return null\n                  }\n                  return _vm.close($event)\n                }\n              ]\n            }\n          },\n          \"el-input\",\n          [_vm.$props, _vm.$attrs],\n          false\n        ),\n        [\n          _vm.$slots.prepend\n            ? _c(\"template\", { slot: \"prepend\" }, [_vm._t(\"prepend\")], 2)\n            : _vm._e(),\n          _vm.$slots.append\n            ? _c(\"template\", { slot: \"append\" }, [_vm._t(\"append\")], 2)\n            : _vm._e(),\n          _vm.$slots.prefix\n            ? _c(\"template\", { slot: \"prefix\" }, [_vm._t(\"prefix\")], 2)\n            : _vm._e(),\n          _vm.$slots.suffix\n            ? _c(\"template\", { slot: \"suffix\" }, [_vm._t(\"suffix\")], 2)\n            : _vm._e()\n        ],\n        2\n      ),\n      _c(\n        \"el-autocomplete-suggestions\",\n        {\n          ref: \"suggestions\",\n          class: [_vm.popperClass ? _vm.popperClass : \"\"],\n          attrs: {\n            \"visible-arrow\": \"\",\n            \"popper-options\": _vm.popperOptions,\n            \"append-to-body\": _vm.popperAppendToBody,\n            placement: _vm.placement,\n            id: _vm.id\n          }\n        },\n        _vm._l(_vm.suggestions, function(item, index) {\n          return _c(\n            \"li\",\n            {\n              key: index,\n              class: { highlighted: _vm.highlightedIndex === index },\n              attrs: {\n                id: _vm.id + \"-item-\" + index,\n                role: \"option\",\n                \"aria-selected\": _vm.highlightedIndex === index\n              },\n              on: {\n                click: function($event) {\n                  _vm.select(item)\n                }\n              }\n            },\n            [\n              _vm._t(\n                \"default\",\n                [\n                  _vm._v(\"\\n        \" + _vm._s(item[_vm.valueKey]) + \"\\n      \")\n                ],\n                { item: item }\n              )\n            ],\n            2\n          )\n        }),\n        0\n      )\n    ],\n    1\n  )\n}\nvar autocompletevue_type_template_id_152f2ee6_staticRenderFns = []\nautocompletevue_type_template_id_152f2ee6_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/autocomplete/src/autocomplete.vue?vue&type=template&id=152f2ee6&\n\n// EXTERNAL MODULE: external \"throttle-debounce/debounce\"\nvar debounce_ = __webpack_require__(16);\nvar debounce_default = /*#__PURE__*/__webpack_require__.n(debounce_);\n\n// EXTERNAL MODULE: external \"element-ui/lib/utils/clickoutside\"\nvar clickoutside_ = __webpack_require__(10);\nvar clickoutside_default = /*#__PURE__*/__webpack_require__.n(clickoutside_);\n\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/autocomplete/src/autocomplete-suggestions.vue?vue&type=template&id=cd10dcf0&\nvar autocomplete_suggestionsvue_type_template_id_cd10dcf0_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"transition\",\n    { attrs: { name: \"el-zoom-in-top\" }, on: { \"after-leave\": _vm.doDestroy } },\n    [\n      _c(\n        \"div\",\n        {\n          directives: [\n            {\n              name: \"show\",\n              rawName: \"v-show\",\n              value: _vm.showPopper,\n              expression: \"showPopper\"\n            }\n          ],\n          staticClass: \"el-autocomplete-suggestion el-popper\",\n          class: {\n            \"is-loading\": !_vm.parent.hideLoading && _vm.parent.loading\n          },\n          style: { width: _vm.dropdownWidth },\n          attrs: { role: \"region\" }\n        },\n        [\n          _c(\n            \"el-scrollbar\",\n            {\n              attrs: {\n                tag: \"ul\",\n                \"wrap-class\": \"el-autocomplete-suggestion__wrap\",\n                \"view-class\": \"el-autocomplete-suggestion__list\"\n              }\n            },\n            [\n              !_vm.parent.hideLoading && _vm.parent.loading\n                ? _c(\"li\", [_c(\"i\", { staticClass: \"el-icon-loading\" })])\n                : _vm._t(\"default\")\n            ],\n            2\n          )\n        ],\n        1\n      )\n    ]\n  )\n}\nvar autocomplete_suggestionsvue_type_template_id_cd10dcf0_staticRenderFns = []\nautocomplete_suggestionsvue_type_template_id_cd10dcf0_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/autocomplete/src/autocomplete-suggestions.vue?vue&type=template&id=cd10dcf0&\n\n// EXTERNAL MODULE: external \"element-ui/lib/utils/vue-popper\"\nvar vue_popper_ = __webpack_require__(5);\nvar vue_popper_default = /*#__PURE__*/__webpack_require__.n(vue_popper_);\n\n// EXTERNAL MODULE: external \"element-ui/lib/scrollbar\"\nvar scrollbar_ = __webpack_require__(18);\nvar scrollbar_default = /*#__PURE__*/__webpack_require__.n(scrollbar_);\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/autocomplete/src/autocomplete-suggestions.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n/* harmony default export */ var autocomplete_suggestionsvue_type_script_lang_js_ = ({\n  components: { ElScrollbar: scrollbar_default.a },\n  mixins: [vue_popper_default.a, emitter_default.a],\n\n  componentName: 'ElAutocompleteSuggestions',\n\n  data: function data() {\n    return {\n      parent: this.$parent,\n      dropdownWidth: ''\n    };\n  },\n\n\n  props: {\n    options: {\n      default: function _default() {\n        return {\n          gpuAcceleration: false\n        };\n      }\n    },\n    id: String\n  },\n\n  methods: {\n    select: function select(item) {\n      this.dispatch('ElAutocomplete', 'item-click', item);\n    }\n  },\n\n  updated: function updated() {\n    var _this = this;\n\n    this.$nextTick(function (_) {\n      _this.popperJS && _this.updatePopper();\n    });\n  },\n  mounted: function mounted() {\n    this.$parent.popperElm = this.popperElm = this.$el;\n    this.referenceElm = this.$parent.$refs.input.$refs.input || this.$parent.$refs.input.$refs.textarea;\n    this.referenceList = this.$el.querySelector('.el-autocomplete-suggestion__list');\n    this.referenceList.setAttribute('role', 'listbox');\n    this.referenceList.setAttribute('id', this.id);\n  },\n  created: function created() {\n    var _this2 = this;\n\n    this.$on('visible', function (val, inputWidth) {\n      _this2.dropdownWidth = inputWidth + 'px';\n      _this2.showPopper = val;\n    });\n  }\n});\n// CONCATENATED MODULE: ./packages/autocomplete/src/autocomplete-suggestions.vue?vue&type=script&lang=js&\n /* harmony default export */ var src_autocomplete_suggestionsvue_type_script_lang_js_ = (autocomplete_suggestionsvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/autocomplete/src/autocomplete-suggestions.vue\n\n\n\n\n\n/* normalize component */\n\nvar autocomplete_suggestions_component = normalizeComponent(\n  src_autocomplete_suggestionsvue_type_script_lang_js_,\n  autocomplete_suggestionsvue_type_template_id_cd10dcf0_render,\n  autocomplete_suggestionsvue_type_template_id_cd10dcf0_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var autocomplete_suggestions_api; }\nautocomplete_suggestions_component.options.__file = \"packages/autocomplete/src/autocomplete-suggestions.vue\"\n/* harmony default export */ var autocomplete_suggestions = (autocomplete_suggestions_component.exports);\n// EXTERNAL MODULE: external \"element-ui/lib/mixins/focus\"\nvar focus_ = __webpack_require__(23);\nvar focus_default = /*#__PURE__*/__webpack_require__.n(focus_);\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/autocomplete/src/autocomplete.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n\n\n\n\n\n/* harmony default export */ var autocompletevue_type_script_lang_js_ = ({\n  name: 'ElAutocomplete',\n\n  mixins: [emitter_default.a, focus_default()('input'), migrating_default.a],\n\n  inheritAttrs: false,\n\n  componentName: 'ElAutocomplete',\n\n  components: {\n    ElInput: input_default.a,\n    ElAutocompleteSuggestions: autocomplete_suggestions\n  },\n\n  directives: { Clickoutside: clickoutside_default.a },\n\n  props: {\n    valueKey: {\n      type: String,\n      default: 'value'\n    },\n    popperClass: String,\n    popperOptions: Object,\n    placeholder: String,\n    clearable: {\n      type: Boolean,\n      default: false\n    },\n    disabled: Boolean,\n    name: String,\n    size: String,\n    value: String,\n    maxlength: Number,\n    minlength: Number,\n    autofocus: Boolean,\n    fetchSuggestions: Function,\n    triggerOnFocus: {\n      type: Boolean,\n      default: true\n    },\n    customItem: String,\n    selectWhenUnmatched: {\n      type: Boolean,\n      default: false\n    },\n    prefixIcon: String,\n    suffixIcon: String,\n    label: String,\n    debounce: {\n      type: Number,\n      default: 300\n    },\n    placement: {\n      type: String,\n      default: 'bottom-start'\n    },\n    hideLoading: Boolean,\n    popperAppendToBody: {\n      type: Boolean,\n      default: true\n    },\n    highlightFirstItem: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data: function data() {\n    return {\n      activated: false,\n      suggestions: [],\n      loading: false,\n      highlightedIndex: -1,\n      suggestionDisabled: false\n    };\n  },\n\n  computed: {\n    suggestionVisible: function suggestionVisible() {\n      var suggestions = this.suggestions;\n      var isValidData = Array.isArray(suggestions) && suggestions.length > 0;\n      return (isValidData || this.loading) && this.activated;\n    },\n    id: function id() {\n      return 'el-autocomplete-' + Object(util_[\"generateId\"])();\n    }\n  },\n  watch: {\n    suggestionVisible: function suggestionVisible(val) {\n      var $input = this.getInput();\n      if ($input) {\n        this.broadcast('ElAutocompleteSuggestions', 'visible', [val, $input.offsetWidth]);\n      }\n    }\n  },\n  methods: {\n    getMigratingConfig: function getMigratingConfig() {\n      return {\n        props: {\n          'custom-item': 'custom-item is removed, use scoped slot instead.',\n          'props': 'props is removed, use value-key instead.'\n        }\n      };\n    },\n    getData: function getData(queryString) {\n      var _this = this;\n\n      if (this.suggestionDisabled) {\n        return;\n      }\n      this.loading = true;\n      this.fetchSuggestions(queryString, function (suggestions) {\n        _this.loading = false;\n        if (_this.suggestionDisabled) {\n          return;\n        }\n        if (Array.isArray(suggestions)) {\n          _this.suggestions = suggestions;\n          _this.highlightedIndex = _this.highlightFirstItem ? 0 : -1;\n        } else {\n          console.error('[Element Error][Autocomplete]autocomplete suggestions must be an array');\n        }\n      });\n    },\n    handleInput: function handleInput(value) {\n      this.$emit('input', value);\n      this.suggestionDisabled = false;\n      if (!this.triggerOnFocus && !value) {\n        this.suggestionDisabled = true;\n        this.suggestions = [];\n        return;\n      }\n      this.debouncedGetData(value);\n    },\n    handleChange: function handleChange(value) {\n      this.$emit('change', value);\n    },\n    handleFocus: function handleFocus(event) {\n      this.activated = true;\n      this.$emit('focus', event);\n      if (this.triggerOnFocus) {\n        this.debouncedGetData(this.value);\n      }\n    },\n    handleBlur: function handleBlur(event) {\n      this.$emit('blur', event);\n    },\n    handleClear: function handleClear() {\n      this.activated = false;\n      this.$emit('clear');\n    },\n    close: function close(e) {\n      this.activated = false;\n    },\n    handleKeyEnter: function handleKeyEnter(e) {\n      var _this2 = this;\n\n      if (this.suggestionVisible && this.highlightedIndex >= 0 && this.highlightedIndex < this.suggestions.length) {\n        e.preventDefault();\n        this.select(this.suggestions[this.highlightedIndex]);\n      } else if (this.selectWhenUnmatched) {\n        this.$emit('select', { value: this.value });\n        this.$nextTick(function (_) {\n          _this2.suggestions = [];\n          _this2.highlightedIndex = -1;\n        });\n      }\n    },\n    select: function select(item) {\n      var _this3 = this;\n\n      this.$emit('input', item[this.valueKey]);\n      this.$emit('select', item);\n      this.$nextTick(function (_) {\n        _this3.suggestions = [];\n        _this3.highlightedIndex = -1;\n      });\n    },\n    highlight: function highlight(index) {\n      if (!this.suggestionVisible || this.loading) {\n        return;\n      }\n      if (index < 0) {\n        this.highlightedIndex = -1;\n        return;\n      }\n      if (index >= this.suggestions.length) {\n        index = this.suggestions.length - 1;\n      }\n      var suggestion = this.$refs.suggestions.$el.querySelector('.el-autocomplete-suggestion__wrap');\n      var suggestionList = suggestion.querySelectorAll('.el-autocomplete-suggestion__list li');\n\n      var highlightItem = suggestionList[index];\n      var scrollTop = suggestion.scrollTop;\n      var offsetTop = highlightItem.offsetTop;\n\n      if (offsetTop + highlightItem.scrollHeight > scrollTop + suggestion.clientHeight) {\n        suggestion.scrollTop += highlightItem.scrollHeight;\n      }\n      if (offsetTop < scrollTop) {\n        suggestion.scrollTop -= highlightItem.scrollHeight;\n      }\n      this.highlightedIndex = index;\n      var $input = this.getInput();\n      $input.setAttribute('aria-activedescendant', this.id + '-item-' + this.highlightedIndex);\n    },\n    getInput: function getInput() {\n      return this.$refs.input.getInput();\n    }\n  },\n  mounted: function mounted() {\n    var _this4 = this;\n\n    this.debouncedGetData = debounce_default()(this.debounce, this.getData);\n    this.$on('item-click', function (item) {\n      _this4.select(item);\n    });\n    var $input = this.getInput();\n    $input.setAttribute('role', 'textbox');\n    $input.setAttribute('aria-autocomplete', 'list');\n    $input.setAttribute('aria-controls', 'id');\n    $input.setAttribute('aria-activedescendant', this.id + '-item-' + this.highlightedIndex);\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.$refs.suggestions.$destroy();\n  }\n});\n// CONCATENATED MODULE: ./packages/autocomplete/src/autocomplete.vue?vue&type=script&lang=js&\n /* harmony default export */ var src_autocompletevue_type_script_lang_js_ = (autocompletevue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/autocomplete/src/autocomplete.vue\n\n\n\n\n\n/* normalize component */\n\nvar autocomplete_component = normalizeComponent(\n  src_autocompletevue_type_script_lang_js_,\n  autocompletevue_type_template_id_152f2ee6_render,\n  autocompletevue_type_template_id_152f2ee6_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var autocomplete_api; }\nautocomplete_component.options.__file = \"packages/autocomplete/src/autocomplete.vue\"\n/* harmony default export */ var autocomplete = (autocomplete_component.exports);\n// CONCATENATED MODULE: ./packages/autocomplete/index.js\n\n\n/* istanbul ignore next */\nautocomplete.install = function (Vue) {\n  Vue.component(autocomplete.name, autocomplete);\n};\n\n/* harmony default export */ var packages_autocomplete = (autocomplete);\n// EXTERNAL MODULE: external \"element-ui/lib/button\"\nvar button_ = __webpack_require__(13);\nvar button_default = /*#__PURE__*/__webpack_require__.n(button_);\n\n// EXTERNAL MODULE: external \"element-ui/lib/button-group\"\nvar button_group_ = __webpack_require__(28);\nvar button_group_default = /*#__PURE__*/__webpack_require__.n(button_group_);\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/dropdown/src/dropdown.vue?vue&type=script&lang=js&\n\n\n\n\n\n\n\n\n/* harmony default export */ var dropdownvue_type_script_lang_js_ = ({\n  name: 'ElDropdown',\n\n  componentName: 'ElDropdown',\n\n  mixins: [emitter_default.a, migrating_default.a],\n\n  directives: { Clickoutside: clickoutside_default.a },\n\n  components: {\n    ElButton: button_default.a,\n    ElButtonGroup: button_group_default.a\n  },\n\n  provide: function provide() {\n    return {\n      dropdown: this\n    };\n  },\n\n\n  props: {\n    trigger: {\n      type: String,\n      default: 'hover'\n    },\n    type: String,\n    size: {\n      type: String,\n      default: ''\n    },\n    splitButton: Boolean,\n    hideOnClick: {\n      type: Boolean,\n      default: true\n    },\n    placement: {\n      type: String,\n      default: 'bottom-end'\n    },\n    visibleArrow: {\n      default: true\n    },\n    showTimeout: {\n      type: Number,\n      default: 250\n    },\n    hideTimeout: {\n      type: Number,\n      default: 150\n    },\n    tabindex: {\n      type: Number,\n      default: 0\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    }\n  },\n\n  data: function data() {\n    return {\n      timeout: null,\n      visible: false,\n      triggerElm: null,\n      menuItems: null,\n      menuItemsArray: null,\n      dropdownElm: null,\n      focusing: false,\n      listId: 'dropdown-menu-' + Object(util_[\"generateId\"])()\n    };\n  },\n\n\n  computed: {\n    dropdownSize: function dropdownSize() {\n      return this.size || (this.$ELEMENT || {}).size;\n    }\n  },\n\n  mounted: function mounted() {\n    this.$on('menu-item-click', this.handleMenuItemClick);\n  },\n\n\n  watch: {\n    visible: function visible(val) {\n      this.broadcast('ElDropdownMenu', 'visible', val);\n      this.$emit('visible-change', val);\n    },\n    focusing: function focusing(val) {\n      var selfDefine = this.$el.querySelector('.el-dropdown-selfdefine');\n      if (selfDefine) {\n        // 自定义\n        if (val) {\n          selfDefine.className += ' focusing';\n        } else {\n          selfDefine.className = selfDefine.className.replace('focusing', '');\n        }\n      }\n    }\n  },\n\n  methods: {\n    getMigratingConfig: function getMigratingConfig() {\n      return {\n        props: {\n          'menu-align': 'menu-align is renamed to placement.'\n        }\n      };\n    },\n    show: function show() {\n      var _this = this;\n\n      if (this.disabled) return;\n      clearTimeout(this.timeout);\n      this.timeout = setTimeout(function () {\n        _this.visible = true;\n      }, this.trigger === 'click' ? 0 : this.showTimeout);\n    },\n    hide: function hide() {\n      var _this2 = this;\n\n      if (this.disabled) return;\n      this.removeTabindex();\n      if (this.tabindex >= 0) {\n        this.resetTabindex(this.triggerElm);\n      }\n      clearTimeout(this.timeout);\n      this.timeout = setTimeout(function () {\n        _this2.visible = false;\n      }, this.trigger === 'click' ? 0 : this.hideTimeout);\n    },\n    handleClick: function handleClick() {\n      if (this.disabled) return;\n      if (this.visible) {\n        this.hide();\n      } else {\n        this.show();\n      }\n    },\n    handleTriggerKeyDown: function handleTriggerKeyDown(ev) {\n      var keyCode = ev.keyCode;\n      if ([38, 40].indexOf(keyCode) > -1) {\n        // up/down\n        this.removeTabindex();\n        this.resetTabindex(this.menuItems[0]);\n        this.menuItems[0].focus();\n        ev.preventDefault();\n        ev.stopPropagation();\n      } else if (keyCode === 13) {\n        // space enter选中\n        this.handleClick();\n      } else if ([9, 27].indexOf(keyCode) > -1) {\n        // tab || esc\n        this.hide();\n      }\n    },\n    handleItemKeyDown: function handleItemKeyDown(ev) {\n      var keyCode = ev.keyCode;\n      var target = ev.target;\n      var currentIndex = this.menuItemsArray.indexOf(target);\n      var max = this.menuItemsArray.length - 1;\n      var nextIndex = void 0;\n      if ([38, 40].indexOf(keyCode) > -1) {\n        // up/down\n        if (keyCode === 38) {\n          // up\n          nextIndex = currentIndex !== 0 ? currentIndex - 1 : 0;\n        } else {\n          // down\n          nextIndex = currentIndex < max ? currentIndex + 1 : max;\n        }\n        this.removeTabindex();\n        this.resetTabindex(this.menuItems[nextIndex]);\n        this.menuItems[nextIndex].focus();\n        ev.preventDefault();\n        ev.stopPropagation();\n      } else if (keyCode === 13) {\n        // enter选中\n        this.triggerElmFocus();\n        target.click();\n        if (this.hideOnClick) {\n          // click关闭\n          this.visible = false;\n        }\n      } else if ([9, 27].indexOf(keyCode) > -1) {\n        // tab // esc\n        this.hide();\n        this.triggerElmFocus();\n      }\n    },\n    resetTabindex: function resetTabindex(ele) {\n      // 下次tab时组件聚焦元素\n      this.removeTabindex();\n      ele.setAttribute('tabindex', '0'); // 下次期望的聚焦元素\n    },\n    removeTabindex: function removeTabindex() {\n      this.triggerElm.setAttribute('tabindex', '-1');\n      this.menuItemsArray.forEach(function (item) {\n        item.setAttribute('tabindex', '-1');\n      });\n    },\n    initAria: function initAria() {\n      this.dropdownElm.setAttribute('id', this.listId);\n      this.triggerElm.setAttribute('aria-haspopup', 'list');\n      this.triggerElm.setAttribute('aria-controls', this.listId);\n\n      if (!this.splitButton) {\n        // 自定义\n        this.triggerElm.setAttribute('role', 'button');\n        this.triggerElm.setAttribute('tabindex', this.tabindex);\n        this.triggerElm.setAttribute('class', (this.triggerElm.getAttribute('class') || '') + ' el-dropdown-selfdefine'); // 控制\n      }\n    },\n    initEvent: function initEvent() {\n      var _this3 = this;\n\n      var trigger = this.trigger,\n          show = this.show,\n          hide = this.hide,\n          handleClick = this.handleClick,\n          splitButton = this.splitButton,\n          handleTriggerKeyDown = this.handleTriggerKeyDown,\n          handleItemKeyDown = this.handleItemKeyDown;\n\n      this.triggerElm = splitButton ? this.$refs.trigger.$el : this.$slots.default[0].elm;\n\n      var dropdownElm = this.dropdownElm;\n\n      this.triggerElm.addEventListener('keydown', handleTriggerKeyDown); // triggerElm keydown\n      dropdownElm.addEventListener('keydown', handleItemKeyDown, true); // item keydown\n      // 控制自定义元素的样式\n      if (!splitButton) {\n        this.triggerElm.addEventListener('focus', function () {\n          _this3.focusing = true;\n        });\n        this.triggerElm.addEventListener('blur', function () {\n          _this3.focusing = false;\n        });\n        this.triggerElm.addEventListener('click', function () {\n          _this3.focusing = false;\n        });\n      }\n      if (trigger === 'hover') {\n        this.triggerElm.addEventListener('mouseenter', show);\n        this.triggerElm.addEventListener('mouseleave', hide);\n        dropdownElm.addEventListener('mouseenter', show);\n        dropdownElm.addEventListener('mouseleave', hide);\n      } else if (trigger === 'click') {\n        this.triggerElm.addEventListener('click', handleClick);\n      }\n    },\n    handleMenuItemClick: function handleMenuItemClick(command, instance) {\n      if (this.hideOnClick) {\n        this.visible = false;\n      }\n      this.$emit('command', command, instance);\n    },\n    triggerElmFocus: function triggerElmFocus() {\n      this.triggerElm.focus && this.triggerElm.focus();\n    },\n    initDomOperation: function initDomOperation() {\n      this.dropdownElm = this.popperElm;\n      this.menuItems = this.dropdownElm.querySelectorAll(\"[tabindex='-1']\");\n      this.menuItemsArray = [].slice.call(this.menuItems);\n\n      this.initEvent();\n      this.initAria();\n    }\n  },\n\n  render: function render(h) {\n    var _this4 = this;\n\n    var hide = this.hide,\n        splitButton = this.splitButton,\n        type = this.type,\n        dropdownSize = this.dropdownSize,\n        disabled = this.disabled;\n\n\n    var handleMainButtonClick = function handleMainButtonClick(event) {\n      _this4.$emit('click', event);\n      hide();\n    };\n\n    var triggerElm = null;\n    if (splitButton) {\n      triggerElm = h('el-button-group', [h(\n        'el-button',\n        {\n          attrs: { type: type, size: dropdownSize, disabled: disabled },\n          nativeOn: {\n            'click': handleMainButtonClick\n          }\n        },\n        [this.$slots.default]\n      ), h(\n        'el-button',\n        { ref: 'trigger', attrs: { type: type, size: dropdownSize, disabled: disabled },\n          'class': 'el-dropdown__caret-button' },\n        [h('i', { 'class': 'el-dropdown__icon el-icon-arrow-down' })]\n      )]);\n    } else {\n      triggerElm = this.$slots.default;\n      var vnodeData = triggerElm[0].data || {};\n      var _vnodeData$attrs = vnodeData.attrs,\n          attrs = _vnodeData$attrs === undefined ? {} : _vnodeData$attrs;\n\n      if (disabled && !attrs.disabled) {\n        attrs.disabled = true;\n        vnodeData.attrs = attrs;\n      }\n    }\n    var menuElm = disabled ? null : this.$slots.dropdown;\n\n    return h(\n      'div',\n      { 'class': 'el-dropdown', directives: [{\n          name: 'clickoutside',\n          value: hide\n        }],\n        attrs: { 'aria-disabled': disabled }\n      },\n      [triggerElm, menuElm]\n    );\n  }\n});\n// CONCATENATED MODULE: ./packages/dropdown/src/dropdown.vue?vue&type=script&lang=js&\n /* harmony default export */ var src_dropdownvue_type_script_lang_js_ = (dropdownvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/dropdown/src/dropdown.vue\nvar dropdown_render, dropdown_staticRenderFns\n\n\n\n\n/* normalize component */\n\nvar dropdown_component = normalizeComponent(\n  src_dropdownvue_type_script_lang_js_,\n  dropdown_render,\n  dropdown_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var dropdown_api; }\ndropdown_component.options.__file = \"packages/dropdown/src/dropdown.vue\"\n/* harmony default export */ var dropdown = (dropdown_component.exports);\n// CONCATENATED MODULE: ./packages/dropdown/index.js\n\n\n/* istanbul ignore next */\ndropdown.install = function (Vue) {\n  Vue.component(dropdown.name, dropdown);\n};\n\n/* harmony default export */ var packages_dropdown = (dropdown);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/dropdown/src/dropdown-menu.vue?vue&type=template&id=0da6b714&\nvar dropdown_menuvue_type_template_id_0da6b714_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"transition\",\n    { attrs: { name: \"el-zoom-in-top\" }, on: { \"after-leave\": _vm.doDestroy } },\n    [\n      _c(\n        \"ul\",\n        {\n          directives: [\n            {\n              name: \"show\",\n              rawName: \"v-show\",\n              value: _vm.showPopper,\n              expression: \"showPopper\"\n            }\n          ],\n          staticClass: \"el-dropdown-menu el-popper\",\n          class: [_vm.size && \"el-dropdown-menu--\" + _vm.size]\n        },\n        [_vm._t(\"default\")],\n        2\n      )\n    ]\n  )\n}\nvar dropdown_menuvue_type_template_id_0da6b714_staticRenderFns = []\ndropdown_menuvue_type_template_id_0da6b714_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/dropdown/src/dropdown-menu.vue?vue&type=template&id=0da6b714&\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/dropdown/src/dropdown-menu.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n\n\n\n/* harmony default export */ var dropdown_menuvue_type_script_lang_js_ = ({\n  name: 'ElDropdownMenu',\n\n  componentName: 'ElDropdownMenu',\n\n  mixins: [vue_popper_default.a],\n\n  props: {\n    visibleArrow: {\n      type: Boolean,\n      default: true\n    },\n    arrowOffset: {\n      type: Number,\n      default: 0\n    }\n  },\n\n  data: function data() {\n    return {\n      size: this.dropdown.dropdownSize\n    };\n  },\n\n\n  inject: ['dropdown'],\n\n  created: function created() {\n    var _this = this;\n\n    this.$on('updatePopper', function () {\n      if (_this.showPopper) _this.updatePopper();\n    });\n    this.$on('visible', function (val) {\n      _this.showPopper = val;\n    });\n  },\n  mounted: function mounted() {\n    this.dropdown.popperElm = this.popperElm = this.$el;\n    this.referenceElm = this.dropdown.$el;\n    // compatible with 2.6 new v-slot syntax\n    // issue link https://github.com/ElemeFE/element/issues/14345\n    this.dropdown.initDomOperation();\n  },\n\n\n  watch: {\n    'dropdown.placement': {\n      immediate: true,\n      handler: function handler(val) {\n        this.currentPlacement = val;\n      }\n    }\n  }\n});\n// CONCATENATED MODULE: ./packages/dropdown/src/dropdown-menu.vue?vue&type=script&lang=js&\n /* harmony default export */ var src_dropdown_menuvue_type_script_lang_js_ = (dropdown_menuvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/dropdown/src/dropdown-menu.vue\n\n\n\n\n\n/* normalize component */\n\nvar dropdown_menu_component = normalizeComponent(\n  src_dropdown_menuvue_type_script_lang_js_,\n  dropdown_menuvue_type_template_id_0da6b714_render,\n  dropdown_menuvue_type_template_id_0da6b714_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var dropdown_menu_api; }\ndropdown_menu_component.options.__file = \"packages/dropdown/src/dropdown-menu.vue\"\n/* harmony default export */ var dropdown_menu = (dropdown_menu_component.exports);\n// CONCATENATED MODULE: ./packages/dropdown-menu/index.js\n\n\n/* istanbul ignore next */\ndropdown_menu.install = function (Vue) {\n  Vue.component(dropdown_menu.name, dropdown_menu);\n};\n\n/* harmony default export */ var packages_dropdown_menu = (dropdown_menu);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/dropdown/src/dropdown-item.vue?vue&type=template&id=6359102a&\nvar dropdown_itemvue_type_template_id_6359102a_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"li\",\n    {\n      staticClass: \"el-dropdown-menu__item\",\n      class: {\n        \"is-disabled\": _vm.disabled,\n        \"el-dropdown-menu__item--divided\": _vm.divided\n      },\n      attrs: {\n        \"aria-disabled\": _vm.disabled,\n        tabindex: _vm.disabled ? null : -1\n      },\n      on: { click: _vm.handleClick }\n    },\n    [_vm.icon ? _c(\"i\", { class: _vm.icon }) : _vm._e(), _vm._t(\"default\")],\n    2\n  )\n}\nvar dropdown_itemvue_type_template_id_6359102a_staticRenderFns = []\ndropdown_itemvue_type_template_id_6359102a_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/dropdown/src/dropdown-item.vue?vue&type=template&id=6359102a&\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/dropdown/src/dropdown-item.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n/* harmony default export */ var dropdown_itemvue_type_script_lang_js_ = ({\n  name: 'ElDropdownItem',\n\n  mixins: [emitter_default.a],\n\n  props: {\n    command: {},\n    disabled: Boolean,\n    divided: Boolean,\n    icon: String\n  },\n\n  methods: {\n    handleClick: function handleClick(e) {\n      this.dispatch('ElDropdown', 'menu-item-click', [this.command, this]);\n    }\n  }\n});\n// CONCATENATED MODULE: ./packages/dropdown/src/dropdown-item.vue?vue&type=script&lang=js&\n /* harmony default export */ var src_dropdown_itemvue_type_script_lang_js_ = (dropdown_itemvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/dropdown/src/dropdown-item.vue\n\n\n\n\n\n/* normalize component */\n\nvar dropdown_item_component = normalizeComponent(\n  src_dropdown_itemvue_type_script_lang_js_,\n  dropdown_itemvue_type_template_id_6359102a_render,\n  dropdown_itemvue_type_template_id_6359102a_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var dropdown_item_api; }\ndropdown_item_component.options.__file = \"packages/dropdown/src/dropdown-item.vue\"\n/* harmony default export */ var dropdown_item = (dropdown_item_component.exports);\n// CONCATENATED MODULE: ./packages/dropdown-item/index.js\n\n\n/* istanbul ignore next */\ndropdown_item.install = function (Vue) {\n  Vue.component(dropdown_item.name, dropdown_item);\n};\n\n/* harmony default export */ var packages_dropdown_item = (dropdown_item);\n// CONCATENATED MODULE: ./src/utils/aria-utils.js\nvar aria = aria || {};\n\naria.Utils = aria.Utils || {};\n\n/**\n * @desc Set focus on descendant nodes until the first focusable element is\n *       found.\n * @param element\n *          DOM node for which to find the first focusable descendant.\n * @returns\n *  true if a focusable element is found and focus is set.\n */\naria.Utils.focusFirstDescendant = function (element) {\n  for (var i = 0; i < element.childNodes.length; i++) {\n    var child = element.childNodes[i];\n    if (aria.Utils.attemptFocus(child) || aria.Utils.focusFirstDescendant(child)) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * @desc Find the last descendant node that is focusable.\n * @param element\n *          DOM node for which to find the last focusable descendant.\n * @returns\n *  true if a focusable element is found and focus is set.\n */\n\naria.Utils.focusLastDescendant = function (element) {\n  for (var i = element.childNodes.length - 1; i >= 0; i--) {\n    var child = element.childNodes[i];\n    if (aria.Utils.attemptFocus(child) || aria.Utils.focusLastDescendant(child)) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * @desc Set Attempt to set focus on the current node.\n * @param element\n *          The node to attempt to focus on.\n * @returns\n *  true if element is focused.\n */\naria.Utils.attemptFocus = function (element) {\n  if (!aria.Utils.isFocusable(element)) {\n    return false;\n  }\n  aria.Utils.IgnoreUtilFocusChanges = true;\n  try {\n    element.focus();\n  } catch (e) {}\n  aria.Utils.IgnoreUtilFocusChanges = false;\n  return document.activeElement === element;\n};\n\naria.Utils.isFocusable = function (element) {\n  if (element.tabIndex > 0 || element.tabIndex === 0 && element.getAttribute('tabIndex') !== null) {\n    return true;\n  }\n\n  if (element.disabled) {\n    return false;\n  }\n\n  switch (element.nodeName) {\n    case 'A':\n      return !!element.href && element.rel !== 'ignore';\n    case 'INPUT':\n      return element.type !== 'hidden' && element.type !== 'file';\n    case 'BUTTON':\n    case 'SELECT':\n    case 'TEXTAREA':\n      return true;\n    default:\n      return false;\n  }\n};\n\n/**\n * 触发一个事件\n * mouseenter, mouseleave, mouseover, keyup, change, click 等\n * @param  {Element} elm\n * @param  {String} name\n * @param  {*} opts\n */\naria.Utils.triggerEvent = function (elm, name) {\n  var eventName = void 0;\n\n  if (/^mouse|click/.test(name)) {\n    eventName = 'MouseEvents';\n  } else if (/^key/.test(name)) {\n    eventName = 'KeyboardEvent';\n  } else {\n    eventName = 'HTMLEvents';\n  }\n  var evt = document.createEvent(eventName);\n\n  for (var _len = arguments.length, opts = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    opts[_key - 2] = arguments[_key];\n  }\n\n  evt.initEvent.apply(evt, [name].concat(opts));\n  elm.dispatchEvent ? elm.dispatchEvent(evt) : elm.fireEvent('on' + name, evt);\n\n  return elm;\n};\n\naria.Utils.keys = {\n  tab: 9,\n  enter: 13,\n  space: 32,\n  left: 37,\n  up: 38,\n  right: 39,\n  down: 40,\n  esc: 27\n};\n\n/* harmony default export */ var aria_utils = (aria.Utils);\n// CONCATENATED MODULE: ./src/utils/menu/aria-submenu.js\n\n\nvar SubMenu = function SubMenu(parent, domNode) {\n  this.domNode = domNode;\n  this.parent = parent;\n  this.subMenuItems = [];\n  this.subIndex = 0;\n  this.init();\n};\n\nSubMenu.prototype.init = function () {\n  this.subMenuItems = this.domNode.querySelectorAll('li');\n  this.addListeners();\n};\n\nSubMenu.prototype.gotoSubIndex = function (idx) {\n  if (idx === this.subMenuItems.length) {\n    idx = 0;\n  } else if (idx < 0) {\n    idx = this.subMenuItems.length - 1;\n  }\n  this.subMenuItems[idx].focus();\n  this.subIndex = idx;\n};\n\nSubMenu.prototype.addListeners = function () {\n  var _this = this;\n\n  var keys = aria_utils.keys;\n  var parentNode = this.parent.domNode;\n  Array.prototype.forEach.call(this.subMenuItems, function (el) {\n    el.addEventListener('keydown', function (event) {\n      var prevDef = false;\n      switch (event.keyCode) {\n        case keys.down:\n          _this.gotoSubIndex(_this.subIndex + 1);\n          prevDef = true;\n          break;\n        case keys.up:\n          _this.gotoSubIndex(_this.subIndex - 1);\n          prevDef = true;\n          break;\n        case keys.tab:\n          aria_utils.triggerEvent(parentNode, 'mouseleave');\n          break;\n        case keys.enter:\n        case keys.space:\n          prevDef = true;\n          event.currentTarget.click();\n          break;\n      }\n      if (prevDef) {\n        event.preventDefault();\n        event.stopPropagation();\n      }\n      return false;\n    });\n  });\n};\n\n/* harmony default export */ var aria_submenu = (SubMenu);\n// CONCATENATED MODULE: ./src/utils/menu/aria-menuitem.js\n\n\n\nvar MenuItem = function MenuItem(domNode) {\n  this.domNode = domNode;\n  this.submenu = null;\n  this.init();\n};\n\nMenuItem.prototype.init = function () {\n  this.domNode.setAttribute('tabindex', '0');\n  var menuChild = this.domNode.querySelector('.el-menu');\n  if (menuChild) {\n    this.submenu = new aria_submenu(this, menuChild);\n  }\n  this.addListeners();\n};\n\nMenuItem.prototype.addListeners = function () {\n  var _this = this;\n\n  var keys = aria_utils.keys;\n  this.domNode.addEventListener('keydown', function (event) {\n    var prevDef = false;\n    switch (event.keyCode) {\n      case keys.down:\n        aria_utils.triggerEvent(event.currentTarget, 'mouseenter');\n        _this.submenu && _this.submenu.gotoSubIndex(0);\n        prevDef = true;\n        break;\n      case keys.up:\n