taticClass: \"el-time-panel__footer\" }, [\n            _c(\n              \"button\",\n              {\n                staticClass: \"el-time-panel__btn cancel\",\n                attrs: { type: \"button\" },\n                on: {\n                  click: function($event) {\n                    _vm.handleCancel()\n                  }\n                }\n              },\n              [_vm._v(_vm._s(_vm.t(\"el.datepicker.cancel\")))]\n            ),\n            _c(\n              \"button\",\n              {\n                staticClass: \"el-time-panel__btn confirm\",\n                attrs: { type: \"button\", disabled: _vm.btnDisabled },\n                on: {\n                  click: function($event) {\n                    _vm.handleConfirm()\n                  }\n                }\n              },\n              [_vm._v(_vm._s(_vm.t(\"el.datepicker.confirm\")))]\n            )\n          ])\n        ]\n      )\n    ]\n  )\n}\nvar time_rangevue_type_template_id_fb28660e_staticRenderFns = []\ntime_rangevue_type_template_id_fb28660e_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/date-picker/src/panel/time-range.vue?vue&type=template&id=fb28660e&\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/date-picker/src/panel/time-range.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\nvar MIN_TIME = Object(date_util_[\"parseDate\"])('00:00:00', 'HH:mm:ss');\nvar MAX_TIME = Object(date_util_[\"parseDate\"])('23:59:59', 'HH:mm:ss');\n\nvar time_rangevue_type_script_lang_js_minTimeOfDay = function minTimeOfDay(date) {\n  return Object(date_util_[\"modifyDate\"])(MIN_TIME, date.getFullYear(), date.getMonth(), date.getDate());\n};\n\nvar time_rangevue_type_script_lang_js_maxTimeOfDay = function maxTimeOfDay(date) {\n  return Object(date_util_[\"modifyDate\"])(MAX_TIME, date.getFullYear(), date.getMonth(), date.getDate());\n};\n\n// increase time by amount of milliseconds, but within the range of day\nvar advanceTime = function advanceTime(date, amount) {\n  return new Date(Math.min(date.getTime() + amount, time_rangevue_type_script_lang_js_maxTimeOfDay(date).getTime()));\n};\n\n/* harmony default export */ var time_rangevue_type_script_lang_js_ = ({\n  mixins: [locale_default.a],\n\n  components: { TimeSpinner: time_spinner },\n\n  computed: {\n    showSeconds: function showSeconds() {\n      return (this.format || '').indexOf('ss') !== -1;\n    },\n    offset: function offset() {\n      return this.showSeconds ? 11 : 8;\n    },\n    spinner: function spinner() {\n      return this.selectionRange[0] < this.offset ? this.$refs.minSpinner : this.$refs.maxSpinner;\n    },\n    btnDisabled: function btnDisabled() {\n      return this.minDate.getTime() > this.maxDate.getTime();\n    },\n    amPmMode: function amPmMode() {\n      if ((this.format || '').indexOf('A') !== -1) return 'A';\n      if ((this.format || '').indexOf('a') !== -1) return 'a';\n      return '';\n    }\n  },\n\n  data: function data() {\n    return {\n      popperClass: '',\n      minDate: new Date(),\n      maxDate: new Date(),\n      value: [],\n      oldValue: [new Date(), new Date()],\n      defaultValue: null,\n      format: 'HH:mm:ss',\n      visible: false,\n      selectionRange: [0, 2],\n      arrowControl: false\n    };\n  },\n\n\n  watch: {\n    value: function value(_value) {\n      if (Array.isArray(_value)) {\n        this.minDate = new Date(_value[0]);\n        this.maxDate = new Date(_value[1]);\n      } else {\n        if (Array.isArray(this.defaultValue)) {\n          this.minDate = new Date(this.defaultValue[0]);\n          this.maxDate = new Date(this.defaultValue[1]);\n        } else if (this.defaultValue) {\n          this.minDate = new Date(this.defaultValue);\n          this.maxDate = advanceTime(new Date(this.defaultValue), 60 * 60 * 1000);\n        } else {\n          this.minDate = new Date();\n          this.maxDate = advanceTime(new Date(), 60 * 60 * 1000);\n        }\n      }\n    },\n    visible: function visible(val) {\n      var _this = this;\n\n      if (val) {\n        this.oldValue = this.value;\n        this.$nextTick(function () {\n          return _this.$refs.minSpinner.emitSelectRange('hours');\n        });\n      }\n    }\n  },\n\n  methods: {\n    handleClear: function handleClear() {\n      this.$emit('pick', null);\n    },\n    handleCancel: function handleCancel() {\n      this.$emit('pick', this.oldValue);\n    },\n    handleMinChange: function handleMinChange(date) {\n      this.minDate = Object(date_util_[\"clearMilliseconds\"])(date);\n      this.handleChange();\n    },\n    handleMaxChange: function handleMaxChange(date) {\n      this.maxDate = Object(date_util_[\"clearMilliseconds\"])(date);\n      this.handleChange();\n    },\n    handleChange: function handleChange() {\n      if (this.isValidValue([this.minDate, this.maxDate])) {\n        this.$refs.minSpinner.selectableRange = [[time_rangevue_type_script_lang_js_minTimeOfDay(this.minDate), this.maxDate]];\n        this.$refs.maxSpinner.selectableRange = [[this.minDate, time_rangevue_type_script_lang_js_maxTimeOfDay(this.maxDate)]];\n        this.$emit('pick', [this.minDate, this.maxDate], true);\n      }\n    },\n    setMinSelectionRange: function setMinSelectionRange(start, end) {\n      this.$emit('select-range', start, end, 'min');\n      this.selectionRange = [start, end];\n    },\n    setMaxSelectionRange: function setMaxSelectionRange(start, end) {\n      this.$emit('select-range', start, end, 'max');\n      this.selectionRange = [start + this.offset, end + this.offset];\n    },\n    handleConfirm: function handleConfirm() {\n      var visible = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      var minSelectableRange = this.$refs.minSpinner.selectableRange;\n      var maxSelectableRange = this.$refs.maxSpinner.selectableRange;\n\n      this.minDate = Object(date_util_[\"limitTimeRange\"])(this.minDate, minSelectableRange, this.format);\n      this.maxDate = Object(date_util_[\"limitTimeRange\"])(this.maxDate, maxSelectableRange, this.format);\n\n      this.$emit('pick', [this.minDate, this.maxDate], visible);\n    },\n    adjustSpinners: function adjustSpinners() {\n      this.$refs.minSpinner.adjustSpinners();\n      this.$refs.maxSpinner.adjustSpinners();\n    },\n    changeSelectionRange: function changeSelectionRange(step) {\n      var list = this.showSeconds ? [0, 3, 6, 11, 14, 17] : [0, 3, 8, 11];\n      var mapping = ['hours', 'minutes'].concat(this.showSeconds ? ['seconds'] : []);\n      var index = list.indexOf(this.selectionRange[0]);\n      var next = (index + step + list.length) % list.length;\n      var half = list.length / 2;\n      if (next < half) {\n        this.$refs.minSpinner.emitSelectRange(mapping[next]);\n      } else {\n        this.$refs.maxSpinner.emitSelectRange(mapping[next - half]);\n      }\n    },\n    isValidValue: function isValidValue(date) {\n      return Array.isArray(date) && Object(date_util_[\"timeWithinRange\"])(this.minDate, this.$refs.minSpinner.selectableRange) && Object(date_util_[\"timeWithinRange\"])(this.maxDate, this.$refs.maxSpinner.selectableRange);\n    },\n    handleKeydown: function handleKeydown(event) {\n      var keyCode = event.keyCode;\n      var mapping = { 38: -1, 40: 1, 37: -1, 39: 1 };\n\n      // Left or Right\n      if (keyCode === 37 || keyCode === 39) {\n        var step = mapping[keyCode];\n        this.changeSelectionRange(step);\n        event.preventDefault();\n        return;\n      }\n\n      // Up or Down\n      if (keyCode === 38 || keyCode === 40) {\n        var _step = mapping[keyCode];\n        this.spinner.scrollDown(_step);\n        event.preventDefault();\n        return;\n      }\n    }\n  }\n});\n// CONCATENATED MODULE: ./packages/date-picker/src/panel/time-range.vue?vue&type=script&lang=js&\n /* harmony default export */ var panel_time_rangevue_type_script_lang_js_ = (time_rangevue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/date-picker/src/panel/time-range.vue\n\n\n\n\n\n/* normalize component */\n\nvar time_range_component = normalizeComponent(\n  panel_time_rangevue_type_script_lang_js_,\n  time_rangevue_type_template_id_fb28660e_render,\n  time_rangevue_type_template_id_fb28660e_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var time_range_api; }\ntime_range_component.options.__file = \"packages/date-picker/src/panel/time-range.vue\"\n/* harmony default export */ var time_range = (time_range_component.exports);\n// CONCATENATED MODULE: ./packages/date-picker/src/picker/time-picker.js\n\n\n\n\n/* harmony default export */ var time_picker = ({\n  mixins: [picker],\n\n  name: 'ElTimePicker',\n\n  props: {\n    isRange: Boolean,\n    arrowControl: Boolean\n  },\n\n  data: function data() {\n    return {\n      type: ''\n    };\n  },\n\n\n  watch: {\n    isRange: function isRange(_isRange) {\n      if (this.picker) {\n        this.unmountPicker();\n        this.type = _isRange ? 'timerange' : 'time';\n        this.panel = _isRange ? time_range : panel_time;\n        this.mountPicker();\n      } else {\n        this.type = _isRange ? 'timerange' : 'time';\n        this.panel = _isRange ? time_range : panel_time;\n      }\n    }\n  },\n\n  created: function created() {\n    this.type = this.isRange ? 'timerange' : 'time';\n    this.panel = this.isRange ? time_range : panel_time;\n  }\n});\n// CONCATENATED MODULE: ./packages/time-picker/index.js\n\n\n/* istanbul ignore next */\ntime_picker.install = function (Vue) {\n  Vue.component(time_picker.name, time_picker);\n};\n\n/* harmony default export */ var packages_time_picker = (time_picker);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/popover/src/main.vue?vue&type=template&id=52060272&\nvar mainvue_type_template_id_52060272_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"span\",\n    [\n      _c(\n        \"transition\",\n        {\n          attrs: { name: _vm.transition },\n          on: {\n            \"after-enter\": _vm.handleAfterEnter,\n            \"after-leave\": _vm.handleAfterLeave\n          }\n        },\n        [\n          _c(\n            \"div\",\n            {\n              directives: [\n                {\n                  name: \"show\",\n                  rawName: \"v-show\",\n                  value: !_vm.disabled && _vm.showPopper,\n                  expression: \"!disabled && showPopper\"\n                }\n              ],\n              ref: \"popper\",\n              staticClass: \"el-popover el-popper\",\n              class: [_vm.popperClass, _vm.content && \"el-popover--plain\"],\n              style: { width: _vm.width + \"px\" },\n              attrs: {\n                role: \"tooltip\",\n                id: _vm.tooltipId,\n                \"aria-hidden\":\n                  _vm.disabled || !_vm.showPopper ? \"true\" : \"false\"\n              }\n            },\n            [\n              _vm.title\n                ? _c(\"div\", {\n                    staticClass: \"el-popover__title\",\n                    domProps: { textContent: _vm._s(_vm.title) }\n                  })\n                : _vm._e(),\n              _vm._t(\"default\", [_vm._v(_vm._s(_vm.content))])\n            ],\n            2\n          )\n        ]\n      ),\n      _c(\n        \"span\",\n        { ref: \"wrapper\", staticClass: \"el-popover__reference-wrapper\" },\n        [_vm._t(\"reference\")],\n        2\n      )\n    ],\n    1\n  )\n}\nvar mainvue_type_template_id_52060272_staticRenderFns = []\nmainvue_type_template_id_52060272_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/popover/src/main.vue?vue&type=template&id=52060272&\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/popover/src/main.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n\n/* harmony default export */ var mainvue_type_script_lang_js_ = ({\n  name: 'ElPopover',\n\n  mixins: [vue_popper_default.a],\n\n  props: {\n    trigger: {\n      type: String,\n      default: 'click',\n      validator: function validator(value) {\n        return ['click', 'focus', 'hover', 'manual'].indexOf(value) > -1;\n      }\n    },\n    openDelay: {\n      type: Number,\n      default: 0\n    },\n    closeDelay: {\n      type: Number,\n      default: 200\n    },\n    title: String,\n    disabled: Boolean,\n    content: String,\n    reference: {},\n    popperClass: String,\n    width: {},\n    visibleArrow: {\n      default: true\n    },\n    arrowOffset: {\n      type: Number,\n      default: 0\n    },\n    transition: {\n      type: String,\n      default: 'fade-in-linear'\n    },\n    tabindex: {\n      type: Number,\n      default: 0\n    }\n  },\n\n  computed: {\n    tooltipId: function tooltipId() {\n      return 'el-popover-' + Object(util_[\"generateId\"])();\n    }\n  },\n  watch: {\n    showPopper: function showPopper(val) {\n      if (this.disabled) {\n        return;\n      }\n      val ? this.$emit('show') : this.$emit('hide');\n    }\n  },\n\n  mounted: function mounted() {\n    var _this = this;\n\n    var reference = this.referenceElm = this.reference || this.$refs.reference;\n    var popper = this.popper || this.$refs.popper;\n\n    if (!reference && this.$refs.wrapper.children) {\n      reference = this.referenceElm = this.$refs.wrapper.children[0];\n    }\n    // 可访问性\n    if (reference) {\n      Object(dom_[\"addClass\"])(reference, 'el-popover__reference');\n      reference.setAttribute('aria-describedby', this.tooltipId);\n      reference.setAttribute('tabindex', this.tabindex); // tab序列\n      popper.setAttribute('tabindex', 0);\n\n      if (this.trigger !== 'click') {\n        Object(dom_[\"on\"])(reference, 'focusin', function () {\n          _this.handleFocus();\n          var instance = reference.__vue__;\n          if (instance && typeof instance.focus === 'function') {\n            instance.focus();\n          }\n        });\n        Object(dom_[\"on\"])(popper, 'focusin', this.handleFocus);\n        Object(dom_[\"on\"])(reference, 'focusout', this.handleBlur);\n        Object(dom_[\"on\"])(popper, 'focusout', this.handleBlur);\n      }\n      Object(dom_[\"on\"])(reference, 'keydown', this.handleKeydown);\n      Object(dom_[\"on\"])(reference, 'click', this.handleClick);\n    }\n    if (this.trigger === 'click') {\n      Object(dom_[\"on\"])(reference, 'click', this.doToggle);\n      Object(dom_[\"on\"])(document, 'click', this.handleDocumentClick);\n    } else if (this.trigger === 'hover') {\n      Object(dom_[\"on\"])(reference, 'mouseenter', this.handleMouseEnter);\n      Object(dom_[\"on\"])(popper, 'mouseenter', this.handleMouseEnter);\n      Object(dom_[\"on\"])(reference, 'mouseleave', this.handleMouseLeave);\n      Object(dom_[\"on\"])(popper, 'mouseleave', this.handleMouseLeave);\n    } else if (this.trigger === 'focus') {\n      if (this.tabindex < 0) {\n        console.warn('[Element Warn][Popover]a negative taindex means that the element cannot be focused by tab key');\n      }\n      if (reference.querySelector('input, textarea')) {\n        Object(dom_[\"on\"])(reference, 'focusin', this.doShow);\n        Object(dom_[\"on\"])(reference, 'focusout', this.doClose);\n      } else {\n        Object(dom_[\"on\"])(reference, 'mousedown', this.doShow);\n        Object(dom_[\"on\"])(reference, 'mouseup', this.doClose);\n      }\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.cleanup();\n  },\n  deactivated: function deactivated() {\n    this.cleanup();\n  },\n\n\n  methods: {\n    doToggle: function doToggle() {\n      this.showPopper = !this.showPopper;\n    },\n    doShow: function doShow() {\n      this.showPopper = true;\n    },\n    doClose: function doClose() {\n      this.showPopper = false;\n    },\n    handleFocus: function handleFocus() {\n      Object(dom_[\"addClass\"])(this.referenceElm, 'focusing');\n      if (this.trigger === 'click' || this.trigger === 'focus') this.showPopper = true;\n    },\n    handleClick: function handleClick() {\n      Object(dom_[\"removeClass\"])(this.referenceElm, 'focusing');\n    },\n    handleBlur: function handleBlur() {\n      Object(dom_[\"removeClass\"])(this.referenceElm, 'focusing');\n      if (this.trigger === 'click' || this.trigger === 'focus') this.showPopper = false;\n    },\n    handleMouseEnter: function handleMouseEnter() {\n      var _this2 = this;\n\n      clearTimeout(this._timer);\n      if (this.openDelay) {\n        this._timer = setTimeout(function () {\n          _this2.showPopper = true;\n        }, this.openDelay);\n      } else {\n        this.showPopper = true;\n      }\n    },\n    handleKeydown: function handleKeydown(ev) {\n      if (ev.keyCode === 27 && this.trigger !== 'manual') {\n        // esc\n        this.doClose();\n      }\n    },\n    handleMouseLeave: function handleMouseLeave() {\n      var _this3 = this;\n\n      clearTimeout(this._timer);\n      if (this.closeDelay) {\n        this._timer = setTimeout(function () {\n          _this3.showPopper = false;\n        }, this.closeDelay);\n      } else {\n        this.showPopper = false;\n      }\n    },\n    handleDocumentClick: function handleDocumentClick(e) {\n      var reference = this.reference || this.$refs.reference;\n      var popper = this.popper || this.$refs.popper;\n\n      if (!reference && this.$refs.wrapper.children) {\n        reference = this.referenceElm = this.$refs.wrapper.children[0];\n      }\n      if (!this.$el || !reference || this.$el.contains(e.target) || reference.contains(e.target) || !popper || popper.contains(e.target)) return;\n      this.showPopper = false;\n    },\n    handleAfterEnter: function handleAfterEnter() {\n      this.$emit('after-enter');\n    },\n    handleAfterLeave: function handleAfterLeave() {\n      this.$emit('after-leave');\n      this.doDestroy();\n    },\n    cleanup: function cleanup() {\n      if (this.openDelay || this.closeDelay) {\n        clearTimeout(this._timer);\n      }\n    }\n  },\n\n  destroyed: function destroyed() {\n    var reference = this.reference;\n\n    Object(dom_[\"off\"])(reference, 'click', this.doToggle);\n    Object(dom_[\"off\"])(reference, 'mouseup', this.doClose);\n    Object(dom_[\"off\"])(reference, 'mousedown', this.doShow);\n    Object(dom_[\"off\"])(reference, 'focusin', this.doShow);\n    Object(dom_[\"off\"])(reference, 'focusout', this.doClose);\n    Object(dom_[\"off\"])(reference, 'mousedown', this.doShow);\n    Object(dom_[\"off\"])(reference, 'mouseup', this.doClose);\n    Object(dom_[\"off\"])(reference, 'mouseleave', this.handleMouseLeave);\n    Object(dom_[\"off\"])(reference, 'mouseenter', this.handleMouseEnter);\n    Object(dom_[\"off\"])(document, 'click', this.handleDocumentClick);\n  }\n});\n// CONCATENATED MODULE: ./packages/popover/src/main.vue?vue&type=script&lang=js&\n /* harmony default export */ var src_mainvue_type_script_lang_js_ = (mainvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/popover/src/main.vue\n\n\n\n\n\n/* normalize component */\n\nvar main_component = normalizeComponent(\n  src_mainvue_type_script_lang_js_,\n  mainvue_type_template_id_52060272_render,\n  mainvue_type_template_id_52060272_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var main_api; }\nmain_component.options.__file = \"packages/popover/src/main.vue\"\n/* harmony default export */ var main = (main_component.exports);\n// CONCATENATED MODULE: ./packages/popover/src/directive.js\nvar getReference = function getReference(el, binding, vnode) {\n  var _ref = binding.expression ? binding.value : binding.arg;\n  var popper = vnode.context.$refs[_ref];\n  if (popper) {\n    if (Array.isArray(popper)) {\n      popper[0].$refs.reference = el;\n    } else {\n      popper.$refs.reference = el;\n    }\n  }\n};\n\n/* harmony default export */ var directive = ({\n  bind: function bind(el, binding, vnode) {\n    getReference(el, binding, vnode);\n  },\n  inserted: function inserted(el, binding, vnode) {\n    getReference(el, binding, vnode);\n  }\n});\n// CONCATENATED MODULE: ./packages/popover/index.js\n\n\n\n\nexternal_vue_default.a.directive('popover', directive);\n\n/* istanbul ignore next */\nmain.install = function (Vue) {\n  Vue.directive('popover', directive);\n  Vue.component(main.name, main);\n};\nmain.directive = directive;\n\n/* harmony default export */ var popover = (main);\n// CONCATENATED MODULE: ./packages/tooltip/src/main.js\n\n\n\n\n\n\n/* harmony default export */ var src_main = ({\n  name: 'ElTooltip',\n\n  mixins: [vue_popper_default.a],\n\n  props: {\n    openDelay: {\n      type: Number,\n      default: 0\n    },\n    disabled: Boolean,\n    manual: Boolean,\n    effect: {\n      type: String,\n      default: 'dark'\n    },\n    arrowOffset: {\n      type: Number,\n      default: 0\n    },\n    popperClass: String,\n    content: String,\n    visibleArrow: {\n      default: true\n    },\n    transition: {\n      type: String,\n      default: 'el-fade-in-linear'\n    },\n    popperOptions: {\n      default: function _default() {\n        return {\n          boundariesPadding: 10,\n          gpuAcceleration: false\n        };\n      }\n    },\n    enterable: {\n      type: Boolean,\n      default: true\n    },\n    hideAfter: {\n      type: Number,\n      default: 0\n    },\n    tabindex: {\n      type: Number,\n      default: 0\n    }\n  },\n\n  data: function data() {\n    return {\n      tooltipId: 'el-tooltip-' + Object(util_[\"generateId\"])(),\n      timeoutPending: null,\n      focusing: false\n    };\n  },\n  beforeCreate: function beforeCreate() {\n    var _this = this;\n\n    if (this.$isServer) return;\n\n    this.popperVM = new external_vue_default.a({\n      data: { node: '' },\n      render: function render(h) {\n        return this.node;\n      }\n    }).$mount();\n\n    this.debounceClose = debounce_default()(200, function () {\n      return _this.handleClosePopper();\n    });\n  },\n  render: function render(h) {\n    var _this2 = this;\n\n    if (this.popperVM) {\n      this.popperVM.node = h(\n        'transition',\n        {\n          attrs: {\n            name: this.transition\n          },\n          on: {\n            'afterLeave': this.doDestroy\n          }\n        },\n        [h(\n          'div',\n          {\n            on: {\n              'mouseleave': function mouseleave() {\n                _this2.setExpectedState(false);_this2.debounceClose();\n              },\n              'mouseenter': function mouseenter() {\n                _this2.setExpectedState(true);\n              }\n            },\n\n            ref: 'popper',\n            attrs: { role: 'tooltip',\n              id: this.tooltipId,\n              'aria-hidden': this.disabled || !this.showPopper ? 'true' : 'false'\n            },\n            directives: [{\n              name: 'show',\n              value: !this.disabled && this.showPopper\n            }],\n\n            'class': ['el-tooltip__popper', 'is-' + this.effect, this.popperClass] },\n          [this.$slots.content || this.content]\n        )]\n      );\n    }\n\n    var firstElement = this.getFirstElement();\n    if (!firstElement) return null;\n\n    var data = firstElement.data = firstElement.data || {};\n    data.staticClass = this.addTooltipClass(data.staticClass);\n\n    return firstElement;\n  },\n  mounted: function mounted() {\n    var _this3 = this;\n\n    this.referenceElm = this.$el;\n    if (this.$el.nodeType === 1) {\n      this.$el.setAttribute('aria-describedby', this.tooltipId);\n      this.$el.setAttribute('tabindex', this.tabindex);\n      Object(dom_[\"on\"])(this.referenceElm, 'mouseenter', this.show);\n      Object(dom_[\"on\"])(this.referenceElm, 'mouseleave', this.hide);\n      Object(dom_[\"on\"])(this.referenceElm, 'focus', function () {\n        if (!_this3.$slots.default || !_this3.$slots.default.length) {\n          _this3.handleFocus();\n          return;\n        }\n        var instance = _this3.$slots.default[0].componentInstance;\n        if (instance && instance.focus) {\n          instance.focus();\n        } else {\n          _this3.handleFocus();\n        }\n      });\n      Object(dom_[\"on\"])(this.referenceElm, 'blur', this.handleBlur);\n      Object(dom_[\"on\"])(this.referenceElm, 'click', this.removeFocusing);\n    }\n    // fix issue https://github.com/ElemeFE/element/issues/14424\n    if (this.value && this.popperVM) {\n      this.popperVM.$nextTick(function () {\n        if (_this3.value) {\n          _this3.updatePopper();\n        }\n      });\n    }\n  },\n\n  watch: {\n    focusing: function focusing(val) {\n      if (val) {\n        Object(dom_[\"addClass\"])(this.referenceElm, 'focusing');\n      } else {\n        Object(dom_[\"removeClass\"])(this.referenceElm, 'focusing');\n      }\n    }\n  },\n  methods: {\n    show: function show() {\n      this.setExpectedState(true);\n      this.handleShowPopper();\n    },\n    hide: function hide() {\n      this.setExpectedState(false);\n      this.debounceClose();\n    },\n    handleFocus: function handleFocus() {\n      this.focusing = true;\n      this.show();\n    },\n    handleBlur: function handleBlur() {\n      this.focusing = false;\n      this.hide();\n    },\n    removeFocusing: function removeFocusing() {\n      this.focusing = false;\n    },\n    addTooltipClass: function addTooltipClass(prev) {\n      if (!prev) {\n        return 'el-tooltip';\n      } else {\n        return 'el-tooltip ' + prev.replace('el-tooltip', '');\n      }\n    },\n    handleShowPopper: function handleShowPopper() {\n      var _this4 = this;\n\n      if (!this.expectedState || this.manual) return;\n      clearTimeout(this.timeout);\n      this.timeout = setTimeout(function () {\n        _this4.showPopper = true;\n      }, this.openDelay);\n\n      if (this.hideAfter > 0) {\n        this.timeoutPending = setTimeout(function () {\n          _this4.showPopper = false;\n        }, this.hideAfter);\n      }\n    },\n    handleClosePopper: function handleClosePopper() {\n      if (this.enterable && this.expectedState || this.manual) return;\n      clearTimeout(this.timeout);\n\n      if (this.timeoutPending) {\n        clearTimeout(this.timeoutPending);\n      }\n      this.showPopper = false;\n\n      if (this.disabled) {\n        this.doDestroy();\n      }\n    },\n    setExpectedState: function setExpectedState(expectedState) {\n      if (expectedState === false) {\n        clearTimeout(this.timeoutPending);\n      }\n      this.expectedState = expectedState;\n    },\n    getFirstElement: function getFirstElement() {\n      var slots = this.$slots.default;\n      if (!Array.isArray(slots)) return null;\n      var element = null;\n      for (var index = 0; index < slots.length; index++) {\n        if (slots[index] && slots[index].tag) {\n          element = slots[index];\n        };\n      }\n      return element;\n    }\n  },\n\n  beforeDestroy: function beforeDestroy() {\n    this.popperVM && this.popperVM.$destroy();\n  },\n  destroyed: function destroyed() {\n    var reference = this.referenceElm;\n    if (reference.nodeType === 1) {\n      Object(dom_[\"off\"])(reference, 'mouseenter', this.show);\n      Object(dom_[\"off\"])(reference, 'mouseleave', this.hide);\n      Object(dom_[\"off\"])(reference, 'focus', this.handleFocus);\n      Object(dom_[\"off\"])(reference, 'blur', this.handleBlur);\n      Object(dom_[\"off\"])(reference, 'click', this.removeFocusing);\n    }\n  }\n});\n// CONCATENATED MODULE: ./packages/tooltip/index.js\n\n\n/* istanbul ignore next */\nsrc_main.install = function (Vue) {\n  Vue.component(src_main.name, src_main);\n};\n\n/* harmony default export */ var packages_tooltip = (src_main);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/message-box/src/main.vue?vue&type=template&id=6b29b012&\nvar mainvue_type_template_id_6b29b012_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"transition\", { attrs: { name: \"msgbox-fade\" } }, [\n    _c(\n      \"div\",\n      {\n        directives: [\n          {\n            name: \"show\",\n            rawName: \"v-show\",\n            value: _vm.visible,\n            expression: \"visible\"\n          }\n        ],\n        staticClass: \"el-message-box__wrapper\",\n        attrs: {\n          tabindex: \"-1\",\n          role: \"dialog\",\n          \"aria-modal\": \"true\",\n          \"aria-label\": _vm.title || \"dialog\"\n        },\n        on: {\n          click: function($event) {\n            if ($event.target !== $event.currentTarget) {\n              return null\n            }\n            return _vm.handleWrapperClick($event)\n          }\n        }\n      },\n      [\n        _c(\n          \"div\",\n          {\n            staticClass: \"el-message-box\",\n            class: [_vm.customClass, _vm.center && \"el-message-box--center\"]\n          },\n          [\n            _vm.title !== null\n              ? _c(\"div\", { staticClass: \"el-message-box__header\" }, [\n                  _c(\"div\", { staticClass: \"el-message-box__title\" }, [\n                    _vm.icon && _vm.center\n                      ? _c(\"div\", {\n                          class: [\"el-message-box__status\", _vm.icon]\n                        })\n                      : _vm._e(),\n                    _c(\"span\", [_vm._v(_vm._s(_vm.title))])\n                  ]),\n                  _vm.showClose\n                    ? _c(\n                        \"button\",\n                        {\n                          staticClass: \"el-message-box__headerbtn\",\n                          attrs: { type: \"button\", \"aria-label\": \"Close\" },\n                          on: {\n                            click: function($event) {\n                              _vm.handleAction(\n                                _vm.distinguishCancelAndClose\n                                  ? \"close\"\n                                  : \"cancel\"\n                              )\n                            },\n                            keydown: function($event) {\n                              if (\n                                !(\"button\" in $event) &&\n                                _vm._k(\n                                  $event.keyCode,\n                                  \"enter\",\n                                  13,\n                                  $event.key,\n                                  \"Enter\"\n                                )\n                              ) {\n                                return null\n                              }\n                              _vm.handleAction(\n                                _vm.distinguishCancelAndClose\n                                  ? \"close\"\n                                  : \"cancel\"\n                              )\n                            }\n                          }\n                        },\n                        [\n                          _c(\"i\", {\n                            staticClass: \"el-message-box__close el-icon-close\"\n                          })\n                        ]\n                      )\n                    : _vm._e()\n                ])\n              : _vm._e(),\n            _c(\"div\", { staticClass: \"el-message-box__content\" }, [\n              _c(\"div\", { staticClass: \"el-message-box__container\" }, [\n                _vm.icon && !_vm.center && _vm.message !== \"\"\n                  ? _c(\"div\", { class: [\"el-message-box__status\", _vm.icon] })\n                  : _vm._e(),\n                _vm.message !== \"\"\n                  ? _c(\n                      \"div\",\n                      { staticClass: \"el-message-box__message\" },\n                      [\n                        _vm._t(\"default\", [\n                          !_vm.dangerouslyUseHTMLString\n                            ? _c(\"p\", [_vm._v(_vm._s(_vm.message))])\n                            : _c(\"p\", {\n                                domProps: { innerHTML: _vm._s(_vm.message) }\n                              })\n                        ])\n                      ],\n                      2\n                    )\n                  : _vm._e()\n              ]),\n              _c(\n                \"div\",\n                {\n                  directives: [\n                    {\n                      name: \"show\",\n                      rawName: \"v-show\",\n                      value: _vm.showInput,\n                      expression: \"showInput\"\n                    }\n                  ],\n                  staticClass: \"el-message-box__input\"\n                },\n                [\n                  _c(\"el-input\", {\n                    ref: \"input\",\n                    attrs: {\n                      type: _vm.inputType,\n                      placeholder: _vm.inputPlaceholder\n                    },\n                    nativeOn: {\n                      keydown: function($event) {\n                        if (\n                          !(\"button\" in $event) &&\n                          _vm._k(\n                            $event.keyCode,\n                            \"enter\",\n                            13,\n                            $event.key,\n                            \"Enter\"\n                          )\n                        ) {\n                          return null\n                        }\n                        return _vm.handleInputEnter($event)\n                      }\n                    },\n                    model: {\n                      value: _vm.inputValue,\n                      callback: function($$v) {\n                        _vm.inputValue = $$v\n                      },\n                      expression: \"inputValue\"\n                    }\n                  }),\n                  _c(\n                    \"div\",\n                    {\n                      staticClass: \"el-message-box__errormsg\",\n                      style: {\n                        visibility: !!_vm.editorErrorMessage\n                          ? \"visible\"\n                          : \"hidden\"\n                      }\n                    },\n                    [_vm._v(_vm._s(_vm.editorErrorMessage))]\n                  )\n                ],\n                1\n              )\n            ]),\n            _c(\n              \"div\",\n              { staticClass: \"el-message-box__btns\" },\n              [\n                _vm.showCancelButton\n                  ? _c(\n                      \"el-button\",\n                      {\n                        class: [_vm.cancelButtonClasses],\n                        attrs: {\n                          loading: _vm.cancelButtonLoading,\n                          round: _vm.roundButton,\n                          size: \"small\"\n                        },\n                        on: {\n                          keydown: function($event) {\n                            if (\n                              !(\"button\" in $event) &&\n                              _vm._k(\n                                $event.keyCode,\n                                \"enter\",\n                                13,\n                                $event.key,\n                                \"Enter\"\n                              )\n                            ) {\n                              return null\n                            }\n                            _vm.handleAction(\"cancel\")\n                          }\n                        },\n                        nativeOn: {\n                          click: function($event) {\n                            _vm.handleAction(\"cancel\")\n                          }\n                        }\n                      },\n                      [\n                        _vm._v(\n                          \"\\n          \" +\n                            _vm._s(\n                              _vm.cancelButtonText ||\n                                _vm.t(\"el.messagebox.cancel\")\n                            ) +\n                            \"\\n        \"\n                        )\n                      ]\n                    )\n                  : _vm._e(),\n                _c(\n                  \"el-button\",\n                  {\n                    directives: [\n                      {\n                        name: \"show\",\n                        rawName: \"v-show\",\n                        value: _vm.showConfirmButton,\n                        expression: \"showConfirmButton\"\n                      }\n                    ],\n                    ref: \"confirm\",\n                    class: [_vm.confirmButtonClasses],\n                    attrs: {\n                      loading: _vm.confirmButtonLoading,\n                      round: _vm.roundButton,\n                      size: \"small\"\n                    },\n                    on: {\n                      keydown: function($event) {\n                        if (\n                          !(\"button\" in $event) &&\n                          _vm._k(\n                            $event.keyCode,\n                            \"enter\",\n                            13,\n                            $event.key,\n                            \"Enter\"\n                          )\n                        ) {\n                          return null\n                        }\n                        _vm.handleAction(\"confirm\")\n                      }\n                    },\n                    nativeOn: {\n                      click: function($event) {\n                        _vm.handleAction(\"confirm\")\n                      }\n                    }\n                  },\n                  [\n                    _vm._v(\n                      \"\\n          \" +\n                        _vm._s(\n                          _vm.confirmButtonText ||\n                            _vm.t(\"el.messagebox.confirm\")\n                        ) +\n                        \"\\n        \"\n                    )\n                  ]\n                )\n              ],\n              1\n            )\n          ]\n        )\n      ]\n    )\n  ])\n}\nvar mainvue_type_template_id_6b29b012_staticRenderFns = []\nmainvue_type_template_id_6b29b012_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/message-box/src/main.vue?vue&type=template&id=6b29b012&\n\n// EXTERNAL MODULE: external \"element-ui/lib/locale\"\nvar lib_locale_ = __webpack_require__(12);\nvar lib_locale_default = /*#__PURE__*/__webpack_require__.n(lib_locale_);\n\n// EXTERNAL MODULE: external \"element-ui/lib/utils/aria-dialog\"\nvar aria_dialog_ = __webpack_require__(39);\nvar aria_dialog_default = /*#__PURE__*/__webpack_require__.n(aria_dialog_);\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/message-box/src/main.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n\n\n\n\nvar messageBox = void 0;\nvar typeMap = {\n  success: 'success',\n  info: 'info',\n  warning: 'warning',\n  error: 'error'\n};\n\n/* harmony default export */ var message_box_src_mainvue_type_script_lang_js_ = ({\n  mixins: [popup_default.a, locale_default.a],\n\n  props: {\n    modal: {\n      default: true\n    },\n    lockScroll: {\n      default: true\n    },\n    showClose: {\n      type: Boolean,\n      default: true\n    },\n    closeOnClickModal: {\n      default: true\n    },\n    closeOnPressEscape: {\n      default: true\n    },\n    closeOnHashChange: {\n      default: true\n    },\n    center: {\n      default: false,\n      type: Boolean\n    },\n    roundButton: {\n      default: false,\n      type: Boolean\n    }\n  },\n\n  components: {\n    ElInput: input_default.a,\n    ElButton: button_default.a\n  },\n\n  computed: {\n    icon: function icon() {\n      var type = this.type,\n          iconClass = this.iconClass;\n\n      return iconClass || (type && typeMap[type] ? 'el-icon-' + typeMap[type] : '');\n    },\n    confirmButtonClasses: function confirmButtonClasses() {\n      return 'el-button--primary ' + this.confirmButtonClass;\n    },\n    cancelButtonClasses: function cancelButtonClasses() {\n      return '' + this.cancelButtonClass;\n    }\n  },\n\n  methods: {\n    getSafeClose: function getSafeClose() {\n      var _this = this;\n\n      var currentId = this.uid;\n      return function () {\n        _this.$nextTick(function () {\n          if (currentId === _this.uid) _this.doClose();\n        });\n      };\n    },\n    doClose: function doClose() {\n      var _this2 = this;\n\n      if (!this.visible) return;\n      this.visible = false;\n      this._closing = true;\n\n      this.onClose && this.onClose();\n      messageBox.closeDialog(); // 解绑\n      if (this.lockScroll) {\n        setTimeout(this.restoreBodyStyle, 200);\n      }\n      this.opened = false;\n      this.doAfterClose();\n      setTimeout(function () {\n        if (_this2.action) _this2.callback(_this2.action, _this2);\n      });\n    },\n    handleWrapperClick: function handleWrapperClick() {\n      if (this.closeOnClickModal) {\n        this.handleAction(this.distinguishCancelAndClose ? 'close' : 'cancel');\n      }\n    },\n    handleInputEnter: function handleInputEnter() {\n      if (this.inputType !== 'textarea') {\n        return this.handleAction('confirm');\n      }\n    },\n    handleAction: function handleAction(action) {\n      if (this.$type === 'prompt' && action === 'confirm' && !this.validate()) {\n        return;\n      }\n      this.action = action;\n      if (typeof this.beforeClose === 'function') {\n        this.close = this.getSafeClose();\n        this.beforeClose(action, this, this.close);\n      } else {\n        this.doClose();\n      }\n    },\n    validate: function validate() {\n      if (this.$type === 'prompt') {\n        var inputPattern = this.inputPattern;\n        if (inputPattern && !inputPattern.test(this.inputValue || '')) {\n          this.editorErrorMessage = this.inputErrorMessage || Object(lib_locale_[\"t\"])('el.messagebox.error');\n          Object(dom_[\"addClass\"])(this.getInputElement(), 'invalid');\n          return false;\n        }\n        var inputValidator = this.inputValidator;\n        if (typeof inputValidator === 'function') {\n          var validateResult = inputValidator(this.inputValue);\n          if (validateResult === false) {\n            this.editorErrorMessage = this.inputErrorMessage || Object(lib_locale_[\"t\"])('el.messagebox.error');\n            Object(dom_[\"addClass\"])(this.getInputElement(), 'invalid');\n            return false;\n          }\n          if (typeof validateResult === 'string') {\n            this.editorErrorMessage = validateResult;\n            Object(dom_[\"addClass\"])(this.getInputElement(), 'invalid');\n            return false;\n          }\n        }\n      }\n      this.editorErrorMessage = '';\n      Object(dom_[\"removeClass\"])(this.getInputElement(), 'invalid');\n      return true;\n    },\n    getFirstFocus: function getFirstFocus() {\n      var btn = this.$el.querySelector('.el-message-box__btns .el-button');\n      var title = this.$el.querySelector('.el-message-box__btns .el-message-box__title');\n      return btn || title;\n    },\n    getInputElement: function getInputElement() {\n      var inputRefs = this.$refs.input.$refs;\n      return inputRefs.input || inputRefs.textarea;\n    },\n    handleClose: function handleClose() {\n      this.handleAction('close');\n    }\n  },\n\n  watch: {\n    inputValue: {\n      immediate: true,\n      handler: function handler(val) {\n        var _this3 = this;\n\n        this.$nextTick(function (_) {\n          if (_this3.$type === 'prompt' && val !== null) {\n            _this3.validate();\n          }\n        });\n      }\n    },\n\n    visible: function visible(val) {\n      var _this4 = this;\n\n      if (val) {\n        this.uid++;\n        if (this.$type === 'alert' || this.$type === 'confirm') {\n          this.$nextTick(function () {\n            _this4.$refs.confirm.$el.focus();\n          });\n        }\n        this.focusAfterClosed = document.activeElement;\n        messageBox = new aria_dialog_default.a(this.$el, this.focusAfterClosed, this.getFirstFocus());\n      }\n\n      // prompt\n      if (this.$type !== 'prompt') return;\n      if (val) {\n        setTimeout(function () {\n          if (_this4.$refs.input && _this4.$refs.input.$el) {\n            _this4.getInputElement().focus();\n          }\n        }, 500);\n      } else {\n        this.editorErrorMessage = '';\n        Object(dom_[\"removeClass\"])(this.getInputElement(), 'invalid');\n      }\n    }\n  },\n\n  mounted: function mounted() {\n    var _this5 = this;\n\n    this.$nextTick(function () {\n      if (_this5.closeOnHashChange) {\n        window.addEventListener('hashchange', _this5.close);\n      }\n    });\n  },\n  beforeDestroy: function beforeDestroy() {\n    if (this.closeOnHashChange) {\n      window.removeEventListener('hashchange', this.close);\n    }\n    setTimeout(function () {\n      messageBox.closeDialog();\n    });\n  },\n  data: function data() {\n    return {\n      uid: 1,\n      title: undefined,\n      message: '',\n      type: '',\n      iconClass: '',\n      customClass: '',\n      showInput: false,\n      inputValue: null,\n      inputPlaceholder: '',\n      inputType: 'text',\n      inputPattern: null,\n      inputValidator: null,\n      inputErrorMessage: '',\n      showConfirmButton: true,\n      showCancelButton: false,\n      action: '',\n      confirmButtonText: '',\n      cancelButtonText: '',\n      confirmButtonLoading: false,\n      cancelButtonLoading: false,\n      confirmButtonClass: '',\n      confirmButtonDisabled: false,\n      cancelButtonClass: '',\n      editorErrorMessage: null,\n      callback: null,\n      dangerouslyUseHTMLString: false,\n      focusAfterClosed: null,\n      isOnComposition: false,\n      distinguishCancelAndClose: false\n    };\n  }\n});\n// CONCATENATED MODULE: ./packages/message-box/src/main.vue?vue&type=script&lang=js&\n /* harmony default export */ var packages_message_box_src_mainvue_type_script_lang_js_ = (message_box_src_mainvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/message-box/src/main.vue\n\n\n\n\n\n/* normalize component */\n\nvar src_main_component = normalizeComponent(\n  packages_message_box_src_mainvue_type_script_lang_js_,\n  mainvue_type_template_id_6b29b012_render,\n  mainvue_type_template_id_6b29b012_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var src_main_api; }\nsrc_main_component.options.__file = \"packages/message-box/src/main.vue\"\n/* harmony default export */ var message_box_src_main = (src_main_component.exports);\n// EXTERNAL MODULE: external \"element-ui/lib/utils/vdom\"\nvar vdom_ = __webpack_require__(22);\n\n// CONCATENATED MODULE: ./packages/message-box/src/main.js\nvar main_typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar main_defaults = {\n  title: null,\n  message: '',\n  type: '',\n  iconClass: '',\n  showInput: false,\n  showClose: true,\n  modalFade: true,\n  lockScroll: true,\n  closeOnClickModal: true,\n  closeOnPressEscape: true,\n  closeOnHashChange: true,\n  inputValue: null,\n  inputPlaceholder: '',\n  inputType: 'text',\n  inputPattern: null,\n  inputValidator: null,\n  inputErrorMessage: '',\n  showConfirmButton: true,\n  showCancelButton: false,\n  confirmButtonPosition: 'right',\n  confirmButtonHighlight: false,\n  cancelButtonHighlight: false,\n  confirmButtonText: '',\n  cancelButtonText: '',\n  confirmButtonClass: '',\n  cancelButtonClass: '',\n  customClass: '',\n  beforeClose: null,\n  dangerouslyUseHTMLString: false,\n  center: false,\n  roundButton: false,\n  distinguishCancelAndClose: false\n};\n\n\n\n\n\n\nvar MessageBoxConstructor = external_vue_default.a.extend(message_box_src_main);\n\nvar currentMsg = void 0,\n    main_instance = void 0;\nvar msgQueue = [];\n\nvar defaultCallback = function defaultCallback(action) {\n  if (currentMsg) {\n    var callback = currentMsg.callback;\n    if (typeof callback === 'function') {\n      if (main_instance.showInput) {\n        callback(main_instance.inputValue, action);\n      } else {\n        callback(action);\n      }\n    }\n    if (currentMsg.resolve) {\n      if (action === 'confirm') {\n        if (main_instance.showInput) {\n          currentMsg.resolve({ value: main_instance.inputValue, action: action });\n        } else {\n          currentMsg.resolve(action);\n        }\n      } else if (currentMsg.reject && (action === 'cancel' || action === 'close')) {\n        currentMsg.reject(action);\n      }\n    }\n  }\n};\n\nvar initInstance = function initInstance() {\n  main_instance = new MessageBoxConstructor({\n    el: document.createElement('div')\n  });\n\n  main_instance.callback = defaultCallback;\n};\n\nvar main_showNextMsg = function showNextMsg() {\n  if (!main_instance) {\n    initInstance();\n  }\n  main_instance.action = '';\n\n  if (!main_instance.visible || main_instance.closeTimer) {\n    if (msgQueue.length > 0) {\n      currentMsg = msgQueue.shift();\n\n      var options = currentMsg.options;\n      for (var prop in options) {\n        if (options.hasOwnProperty(prop)) {\n          main_instance[prop] = options[prop];\n        }\n      }\n      if (options.callback === undefined) {\n        main_instance.callback = defaultCallback;\n      }\n\n      var oldCb = main_instance.callback;\n      main_instance.callback = function (action, instance) {\n        oldCb(action, instance);\n        showNextMsg();\n      };\n      if (Object(vdom_[\"isVNode\"])(main_instance.message)) {\n        main_instance.$slots.default = [main_instance.message];\n        main_instance.message = null;\n      } else {\n        delete main_instance.$slots.default;\n      }\n      ['modal', 'showClose', 'closeOnClickModal', 'closeOnPressEscape', 'closeOnHashChange'].forEach(function (prop) {\n        if (main_instance[prop] === undefined) {\n          main_instance[prop] = true;\n        }\n      });\n      document.body.appendChild(main_instance.$el);\n\n      external_vue_default.a.nextTick(function () {\n        main_instance.visible = true;\n      });\n    }\n  }\n};\n\nvar main_MessageBox = function MessageBox(options, callback) {\n  if (external_vue_default.a.prototype.$isServer) return;\n  if (typeof options === 'string' || Object(vdom_[\"isVNode\"])(options)) {\n    options = {\n      message: options\n    };\n    if (typeof arguments[1] === 'string') {\n      options.title = arguments[1];\n    }\n  } else if (options.callback && !callback) {\n    callback = options.callback;\n  }\n\n  if (typeof Promise !== 'undefined') {\n    return new Promise(function (resolve, reject) {\n      // eslint-disable-line\n      msgQueue.push({\n        options: merge_default()({}, main_defaults, MessageBox.defaults, options),\n        callback: callback,\n        resolve: resolve,\n        reject: reject\n      });\n\n      main_showNextMsg();\n    });\n  } else {\n    msgQueue.push({\n      options: merge_default()({}, main_defaults, MessageBox.defaults, options),\n      callback: callback\n    });\n\n    main_showNextMsg();\n  }\n};\n\nmain_MessageBox.setDefaults = function (defaults) {\n  main_MessageBox.defaults = defaults;\n};\n\nmain_MessageBox.alert = function (message, title, options) {\n  if ((typeof title === 'undefined' ? 'undefined' : main_typeof(title)) === 'object') {\n    options = title;\n    title = '';\n  } else if (title === undefined) {\n    title = '';\n  }\n  return main_MessageBox(merge_default()({\n    title: title,\n    message: message,\n    $type: 'alert',\n    closeOnPressEscape: false,\n    closeOnClickModal: false\n  }, options));\n};\n\nmain_MessageBox.confirm = function (message, title, options) {\n  if ((typeof title === 'undefined' ? 'undefined' : main_typeof(title)) === 'object') {\n    options = title;\n    title = '';\n  } else if (title === undefined) {\n    title = '';\n  }\n  return main_MessageBox(merge_default()({\n    title: title,\n    message: message,\n    $type: 'confirm',\n    showCancelButton: true\n  }, options));\n};\n\nmain_MessageBox.prompt = function (message, title, options) {\n  if ((typeof title === 'undefined' ? 'undefined' : main_typeof(title)) === 'object') {\n    options = title;\n    title = '';\n  } else if (title === undefined) {\n    title = '';\n  }\n  return main_MessageBox(merge_default()({\n    title: title,\n    message: message,\n    showCancelButton: true,\n    showInput: true,\n    $type: 'prompt'\n  }, options));\n};\n\nmain_MessageBox.close = function () {\n  main_instance.doClose();\n  main_instance.visible = false;\n  msgQueue = [];\n  currentMsg = null;\n};\n\n/* harmony default export */ var packages_message_box_src_main = (main_MessageBox);\n\n// CONCATENATED MODULE: ./packages/message-box/index.js\n\n/* harmony default export */ var message_box = (packages_message_box_src_main);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/breadcrumb/src/breadcrumb.vue?vue&type=template&id=4b464c06&\nvar breadcrumbvue_type_template_id_4b464c06_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    {\n      staticClass: \"el-breadcrumb\",\n      attrs: { \"aria-label\": \"Breadcrumb\", role: \"navigation\" }\n    },\n    [_vm._t(\"default\")],\n    2\n  )\n}\nvar breadcrumbvue_type_template_id_4b464c06_staticRenderFns = []\nbreadcrumbvue_type_template_id_4b464c06_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/breadcrumb/src/breadcrumb.vue?vue&type=template&id=4b464c06&\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/breadcrumb/src/breadcrumb.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n\n/* harmony default export */ var breadcrumbvue_type_script_lang_js_ = ({\n  name: 'ElBreadcrumb',\n\n  props: {\n    separator: {\n      type: String,\n      default: '/'\n    },\n    separatorClass: {\n      type: String,\n      default: ''\n    }\n  },\n\n  provide: function provide() {\n    return {\n      elBreadcrumb: this\n    };\n  },\n  mounted: function mounted() {\n    var items = this.$el.querySelectorAll('.el-breadcrumb__item');\n    if (items.length) {\n      items[items.length - 1].setAttribute('aria-current', 'page');\n    }\n  }\n});\n// CONCATENATED MODULE: ./packages/breadcrumb/src/breadcrumb.vue?vue&type=script&lang=js&\n /* harmony default export */ var src_breadcrumbvue_type_script_lang_js_ = (breadcrumbvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/breadcrumb/src/breadcrumb.vue\n\n\n\n\n\n/* normalize component */\n\nvar breadcrumb_component = normalizeComponent(\n  src_breadcrumbvue_type_script_lang_js_,\n  breadcrumbvue_type_template_id_4b464c06_render,\n  breadcrumbvue_type_template_id_4b464c06_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var breadcrumb_api; }\nbreadcrumb_component.options.__file = \"packages/breadcrumb/src/breadcrumb.vue\"\n/* harmony default export */ var breadcrumb = (breadcrumb_component.exports);\n// CONCATENATED MODULE: ./packages/breadcrumb/index.js\n\n\n/* istanbul ignore next */\nbreadcrumb.install = function (Vue) {\n  Vue.component(breadcrumb.name, breadcrumb);\n};\n\n/* harmony default export */ var packages_breadcrumb = (breadcrumb);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/breadcrumb/src/breadcrumb-item.vue?vue&type=template&id=fcf9eaac&\nvar breadcrumb_itemvue_type_template_id_fcf9eaac_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"span\", { staticClass: \"el-breadcrumb__item\" }, [\n    _c(\n      \"span\",\n      {\n        ref: \"link\",\n        class: [\"el-breadcrumb__inner\", _vm.to ? \"is-link\" : \"\"],\n        attrs: { role: \"link\" }\n      },\n      [_vm._t(\"default\")],\n      2\n    ),\n    _vm.separatorClass\n      ? _c(\"i\", {\n          staticClass: \"el-breadcrumb__separator\",\n          class: _vm.separatorClass\n        })\n      : _c(\n          \"span\",\n          {\n            staticClass: \"el-breadcrumb__separator\",\n            attrs: { role: \"presentation\" }\n          },\n          [_vm._v(_vm._s(_vm.separator))]\n        )\n  ])\n}\nvar breadcrumb_itemvue_type_template_id_fcf9eaac_staticRenderFns = []\nbreadcrumb_itemvue_type_template_id_fcf9eaac_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/breadcrumb/src/breadcrumb-item.vue?vue&type=template&id=fcf9eaac&\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/breadcrumb/src/breadcrumb-item.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* harmony default export */ var breadcrumb_itemvue_type_script_lang_js_ = ({\n  name: 'ElBreadcrumbItem',\n  props: {\n    to: {},\n    replace: Boolean\n  },\n  data: function data() {\n    return {\n      separator: '',\n      separatorClass: ''\n    };\n  },\n\n\n  inject: ['elBreadcrumb'],\n\n  mounted: function mounted() {\n    var _this = this;\n\n    this.separator = this.elBreadcrumb.separator;\n    this.separatorClass = this.elBreadcrumb.separatorClass;\n    var link = this.$refs.link;\n    link.setAttribute('role', 'link');\n    link.addEventListener('click', function (_) {\n      var to = _this.to,\n          $router = _this.$router;\n\n      if (!to || !$router) return;\n      _this.replace ? $router.replace(to) : $router.push(to);\n    });\n  }\n});\n// CONCATENATED MODULE: ./packages/breadcrumb/src/breadcrumb-item.vue?vue&type=script&lang=js&\n /* harmony default export */ var src_breadcrumb_itemvue_type_script_lang_js_ = (breadcrumb_itemvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/breadcrumb/src/breadcrumb-item.vue\n\n\n\n\n\n/* normalize component */\n\nvar breadcrumb_item_component = normalizeComponent(\n  src_breadcrumb_itemvue_type_script_lang_js_,\n  breadcrumb_itemvue_type_template_id_fcf9eaac_render,\n  breadcrumb_itemvue_type_template_id_fcf9eaac_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var breadcrumb_item_api; }\nbreadcrumb_item_component.options.__file = \"packages/breadcrumb/src/breadcrumb-item.vue\"\n/* harmony default export */ var breadcrumb_item = (breadcrumb_item_component.exports);\n// CONCATENATED MODULE: ./packages/breadcrumb-item/index.js\n\n\n/* istanbul ignore next */\nbreadcrumb_item.install = function (Vue) {\n  Vue.component(breadcrumb_item.name, breadcrumb_item);\n};\n\n/* harmony default export */ var packages_breadcrumb_item = (breadcrumb_item);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/form/src/form.vue?vue&type=template&id=a1b5ff34&\nvar formvue_type_template_id_a1b5ff34_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"form\",\n    {\n      staticClass: \"el-form\",\n      class: [\n        _vm.labelPosition ? \"el-form--label-\" + _vm.labelPosition : \"\",\n        { \"el-form--inline\": _vm.inline }\n      ]\n    },\n    [_vm._t(\"default\")],\n    2\n  )\n}\nvar formvue_type_template_id_a1b5ff34_staticRenderFns = []\nformvue_type_template_id_a1b5ff34_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/form/src/form.vue?vue&type=template&id=a1b5ff34&\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/form/src/form.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n/* harmony default export */ var formvue_type_script_lang_js_ = ({\n  name: 'ElForm',\n\n  componentName: 'ElForm',\n\n  provide: function provide() {\n    return {\n      elForm: this\n    };\n  },\n\n\n  props: {\n    model: Object,\n    rules: Object,\n    labelPosition: String,\n    labelWidth: String,\n    labelSuffix: {\n      type: String,\n      default: ''\n    },\n    inline: Boolean,\n    inlineMessage: Boolean,\n    statusIcon: Boolean,\n    showMessage: {\n      type: Boolean,\n      default: true\n    },\n    size: String,\n    disabled: Boolean,\n    validateOnRuleChange: {\n      type: Boolean,\n      default: true\n    },\n    hideRequiredAsterisk: {\n      type: Boolean,\n      default: false\n    }\n  },\n  watch: {\n    rules: function rules() {\n      // remove then add event listeners on form-item after form rules change\n      this.fields.forEach(function (field) {\n        field.removeValidateEvents();\n        field.addValidateEvents();\n      });\n\n      if (this.validateOnRuleChange) {\n        this.validate(function () {});\n      }\n    }\n  },\n  computed: {\n    autoLabelWidth: function autoLabelWidth() {\n      if (!this.potentialLabelWidthArr.length) return 0;\n      var max = Math.max.apply(Math, this.potentialLabelWidthArr);\n      return max ? max + 'px' : '';\n    }\n  },\n  data: function data() {\n    return {\n      fields: [],\n      potentialLabelWidthArr: [] // use this array to calculate auto width\n    };\n  },\n  created: function created() {\n    var _this = this;\n\n    this.$on('el.form.addField', function (field) {\n      if (field) {\n        _this.fields.push(field);\n      }\n    });\n    /* istanbul ignore next */\n    this.$on('el.form.removeField', function (field) {\n      if (field.prop) {\n        _this.fields.splice(_this.fields.indexOf(field), 1);\n      }\n    });\n  },\n\n  methods: {\n    resetFields: function resetFields() {\n      if (!this.model) {\n        console.warn('[Element Warn][Form]model is required for resetFields to work.');\n        return;\n      }\n      this.fields.forEach(function (field) {\n        field.resetField();\n      });\n    },\n    clearValidate: function clearValidate() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      var fields = props.length ? typeof props === 'string' ? this.fields.filter(function (field) {\n        return props === field.prop;\n      }) : this.fields.filter(function (field) {\n        return props.indexOf(field.prop) > -1;\n      }) : this.fields;\n      fields.forEach(function (field) {\n        field.clearValidate();\n      });\n    },\n    validate: function validate(callback) {\n      var _this2 = this;\n\n      if (!this.model) {\n        console.warn('[Element Warn][Form]model is required for validate to work!');\n        return;\n      }\n\n      var promise = void 0;\n      // if no callback, return promise\n      if (typeof callback !== 'function' && window.Promise) {\n        promise = new window.Promise(function (resolve, reject) {\n          callback = function callback(valid) {\n            valid ? resolve(valid) : reject(valid);\n          };\n        });\n      }\n\n      var valid = true;\n      var count = 0;\n      // 如果需要验证的fields为空，调用验证时立刻返回callback\n      if (this.fields.length === 0 && callback) {\n        callback(true);\n      }\n      var invalidFields = {};\n      this.fields.forEach(function (field) {\n        field.validate('', function (message, field) {\n          if (message) {\n            valid = false;\n          }\n          invalidFields = merge_default()({}, invalidFields, field);\n          if (typeof callback === 'function' && ++count === _this2.fields.length) {\n            callback(valid, invalidFields);\n          }\n        });\n      });\n\n      if (promise) {\n        return promise;\n      }\n    },\n    validateField: function validateField(props, cb) {\n      props = [].concat(props);\n      var fields = this.fields.filter(function (field) {\n        return props.indexOf(field.prop) !== -1;\n      });\n      if (!fields.length) {\n        console.warn('[Element Warn]please pass correct props!');\n        return;\n      }\n\n      fields.forEach(function (field) {\n        field.validate('', cb);\n      });\n    },\n    getLabelWidthIndex: function getLabelWidthIndex(width) {\n      var index = this.potentialLabelWidthArr.indexOf(width);\n      // it's impossible\n      if (index === -1) {\n        throw new Error('[ElementForm]unpected width ', width);\n      }\n      return index;\n    },\n    registerLabelWidth: function registerLabelWidth(val, oldVal) {\n      if (val && oldVal) {\n        var index = this.getLabelWidthIndex(oldVal);\n        this.potentialLabelWidthArr.splice(index, 1, val);\n      } else if (val) {\n        this.potentialLabelWidthArr.push(val);\n      }\n    },\n    deregisterLabelWidth: function deregisterLabelWidth(val) {\n      var index = this.getLabelWidthIndex(val);\n      this.potentialLabelWidthArr.splice(index, 1);\n    }\n  }\n});\n// CONCATENATED MODULE: ./packages/form/src/form.vue?vue&type=script&lang=js&\n /* harmony default export */ var src_formvue_type_script_lang_js_ = (formvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/form/src/form.vue\n\n\n\n\n\n/* normalize component */\n\nvar form_component = normalizeComponent(\n  src_formvue_type_script_lang_js_,\n  formvue_type_template_id_a1b5ff34_render,\n  formvue_type_template_id_a1b5ff34_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var form_api; }\nform_component.options.__file = \"packages/form/src/form.vue\"\n/* harmony default export */ var src_form = (form_component.exports);\n// CONCATENATED MODULE: ./packages/form/index.js\n\n\n/* istanbul ignore next */\nsrc_form.install = function (Vue) {\n  Vue.component(src_form.name, src_form);\n};\n\n/* harmony default export */ var packages_form = (src_form);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/form/src/form-item.vue?vue&type=template&id=b6f3db6c&\nvar form_itemvue_type_template_id_b6f3db6c_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    {\n      staticClass: \"el-form-item\",\n      class: [\n        {\n          \"el-form-item--feedback\": _vm.elForm && _vm.elForm.statusIcon,\n          \"is-error\": _vm.validateState === \"error\",\n          \"is-validating\": _vm.validateState === \"validating\",\n          \"is-success\": _vm.validateState === \"success\",\n          \"is-required\": _vm.isRequired || _vm.required,\n          \"is-no-asterisk\": _vm.elForm && _vm.elForm.hideRequiredAsterisk\n        },\n        _vm.sizeClass ? \"el-form-item--\" + _vm.sizeClass : \"\"\n      ]\n    },\n    [\n      _c(\n        \"label-wrap\",\n        {\n          attrs: {\n            \"is-auto-width\": _vm.labelStyle && _vm.labelStyle.width === \"auto\",\n            \"update-all\": _vm.form.labelWidth === \"auto\"\n          }\n        },\n        [\n          _vm.label || _vm.$slots.label\n            ? _c(\n                \"label\",\n                {\n                  staticClass: \"el-form-item__label\",\n                  style: _vm.labelStyle,\n                  attrs: { for: _vm.labelFor }\n                },\n                [\n                  _vm._t(\"label\", [\n                    _vm._v(_vm._s(_vm.label + _vm.form.labelSuffix))\n                  ])\n                ],\n                2\n              )\n            : _vm._e()\n        ]\n      ),\n      _c(\n        \"div\",\n        { staticClass: \"el-form-item__content\", style: _vm.contentStyle },\n        [\n          _vm._t(\"default\"),\n          _c(\n            \"transition\",\n            { attrs: { name: \"el-zoom-in-top\" } },\n            [\n              _vm.validateState === \"error\" &&\n              _vm.showMessage &&\n              _vm.form.showMessage\n                ? _vm._t(\n                    \"error\",\n                    [\n                      _c(\n                        \"div\",\n                        {\n                          staticClass: \"el-form-item__error\",\n                          class: {\n                            \"el-form-item__error--inline\":\n                              typeof _vm.inlineMessage === \"boolean\"\n                                ? _vm.inlineMessage\n                                : (_vm.elForm && _vm.elForm.inlineMessage) ||\n                                  false\n                          }\n                        },\n                        [\n                          _vm._v(\n                            \"\\n          \" +\n                              _vm._s(_vm.validateMessage) +\n                              \"\\n        \"\n                          )\n                        ]\n                      )\n                    ],\n                    { error: _vm.validateMessage }\n                  )\n                : _vm._e()\n            ],\n            2\n          )\n        ],\n        2\n      )\n    ],\n    1\n  )\n}\nvar form_itemvue_type_template_id_b6f3db6c_staticRenderFns = []\nform_itemvue_type_template_id_b6f3db6c_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/form/src/form-item.vue?vue&type=template&id=b6f3db6c&\n\n// EXTERNAL MODULE: external \"async-validator\"\nvar external_async_validator_ = __webpack_require__(40);\nvar external_async_validator_default = /*#__PURE__*/__webpack_require__.n(external_async_validator_);\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/form/src/label-wrap.vue?vue&type=script&lang=js&\n\n\n/* harmony default export */ var label_wrapvue_type_script_lang_js_ = ({\n  props: {\n    isAutoWidth: Boolean,\n    updateAll: Boolean\n  },\n\n  inject: ['elForm', 'elFormItem'],\n\n  render: function render() {\n    var h = arguments[0];\n\n    var slots = this.$slots.default;\n    if (!slots) return null;\n    if (this.isAutoWidth) {\n      var autoLabelWidth = this.elForm.autoLabelWidth;\n      var style = {};\n      if (autoLabelWidth && autoLabelWidth !== 'auto') {\n        var marginLeft = parseInt(autoLabelWidth, 10) - this.computedWidth;\n        if (marginLeft) {\n          style.marginLeft = marginLeft + 'px';\n        }\n      }\n      return h(\n        'div',\n        { 'class': 'el-form-item__label-wrap', style: style },\n        [slots]\n      );\n    } else {\n      return slots[0];\n    }\n  },\n\n\n  methods: {\n    getLabelWidth: function getLabelWidth() {\n      if (this.$el && this.$el.firstElementChild) {\n        var computedWidth = window.getComputedStyle(this.$el.firstElementChild).width;\n        return Math.ceil(parseFloat(computedWidth));\n      } else {\n        return 0;\n      }\n    },\n    updateLabelWidth: function updateLabelWidth() {\n      var action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'update';\n\n      if (this.$slots.default && this.isAutoWidth && this.$el.firstElementChild) {\n        if (action === 'update') {\n          this.computedWidth = this.getLabelWidth();\n        } else if (action === 'remove') {\n          this.elForm.deregisterLabelWidth(this.computedWidth);\n        }\n      }\n    }\n  },\n\n  watch: {\n    computedWidth: function computedWidth(val, oldVal) {\n      if (this.updateAll) {\n        this.elForm.registerLabelWidth(val, oldVal);\n        this.elFormItem.updateComputedLabelWidth(val);\n      }\n    }\n  },\n\n  data: function data() {\n    return {\n      computedWidth: 0\n    };\n  },\n  mounted: function mounted() {\n    this.updateLabelWidth('update');\n  },\n  updated: function updated() {\n    this.updateLabelWidth('update');\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.updateLabelWidth('remove');\n  }\n});\n// CONCATENATED MODULE: ./packages/form/src/label-wrap.vue?vue&type=script&lang=js&\n /* harmony default export */ var src_label_wrapvue_type_script_lang_js_ = (label_wrapvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/form/src/label-wrap.vue\nvar label_wrap_render, label_wrap_staticRenderFns\n\n\n\n\n/* normalize component */\n\nvar label_wrap_component = normalizeComponent(\n  src_label_wrapvue_type_script_lang_js_,\n  label_wrap_render,\n  label_wrap_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var label_wrap_api; }\nlabel_wrap_component.options.__file = \"packages/form/src/label-wrap.vue\"\n/* harmony default export */ var label_wrap = (label_wrap_component.exports);\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/form/src/form-item.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n\n/* harmony default export */ var form_itemvue_type_script_lang_js_ = ({\n  name: 'ElFormItem',\n\n  componentName: 'ElFormItem',\n\n  mixins: [emitter_default.a],\n\n  provide: function provide() {\n    return {\n      elFormItem: this\n    };\n  },\n\n\n  inject: ['elForm'],\n\n  props: {\n    label: String,\n    labelWidth: String,\n    prop: String,\n    required: {\n      type: Boolean,\n      default: undefined\n    },\n    rules: [Object, Array],\n    error: String,\n    validateStatus: String,\n    for: String,\n    inlineMessage: {\n      type: [String, Boolean],\n      default: ''\n    },\n    showMessage: {\n      type: Boolean,\n      default: true\n    },\n    size: String\n  },\n  components: {\n    // use this component to calculate auto width\n    LabelWrap: label_wrap\n  },\n  watch: {\n    error: {\n      immediate: true,\n      handler: function handler(value) {\n        this.validateMessage = value;\n        this.validateState = value ? 'error' : '';\n      }\n    },\n    validateStatus: function validateStatus(value) {\n      this.validateState = value;\n    }\n  },\n  computed: {\n    labelFor: function labelFor() {\n      return this.for || this.prop;\n    },\n    labelStyle: function labelStyle() {\n      var ret = {};\n      if (this.form.labelPosition === 'top') return ret;\n      var labelWidth = this.labelWidth || this.form.labelWidth;\n      if (labelWidth) {\n        ret.width = labelWidth;\n      }\n      return ret;\n    },\n    contentStyle: function contentStyle() {\n      var ret = {};\n      var label = this.label;\n      if (this.form.labelPosition === 'top' || this.form.inline) return ret;\n      if (!label && !this.labelWidth && this.isNested) return ret;\n      var labelWidth = this.labelWidth || this.form.labelWidth;\n      if (labelWidth === 'auto') {\n        if (this.labelWidth === 'auto') {\n          ret.marginLeft = this.computedLabelWidth;\n        } else if (this.form.labelWidth === 'auto') {\n          ret.marginLeft = this.elForm.autoLabelWidth;\n        }\n      } else {\n        ret.marginLeft = labelWidth;\n      }\n      return ret;\n    },\n    form: function form() {\n      var parent = this