",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": 204,
          "bodySize": 0,
          "_transferSize": 204,
          "_error": null
        },
        "serverIPAddress": "127.0.0.1",
        "startedDateTime": "2021-11-16T08:39:28.561Z",
        "time": 61.7500000007567,
        "timings": {
          "blocked": 36.37500000215368,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 24.74999999802094,
          "receive": 0.6250000005820766,
          "_blocked_queueing": 3.8750000021536835
        }
      },
      {
        "_initiator": {
          "type": "parser",
          "url": "http://localhost:8080/article/b38c58b3-b50b-416d-9161-f67ea3725bfa",
          "lineNumber": 8
        },
        "_priority": "VeryLow",
        "_resourceType": "other",
        "cache": {},
        "connection": "105129",
        "pageref": "page_52",
        "request": {
          "method": "GET",
          "url": "http://localhost:8080/js/0.js",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Host",
              "value": "localhost:8080"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"95\", \"Chromium\";v=\"95\", \";Not A Brand\";v=\"99\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"macOS\""
            },
            {
              "name": "Accept",
              "value": "application/signed-exchange;v=b3;q=0.7,*/*;q=0.8"
            },
            {
              "name": "Purpose",
              "value": "prefetch"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-origin"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "no-cors"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "empty"
            },
            {
              "name": "Referer",
              "value": "http://localhost:8080/article/b38c58b3-b50b-416d-9161-f67ea3725bfa"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Accept-Language",
              "value": "zh-CN,zh;q=0.9,en;q=0.8"
            },
            {
              "name": "If-None-Match",
              "value": "W/\"494894-E8hAb0IozeEhrZB21y3s69qtlUY\""
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": 695,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "OK",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "X-Powered-By",
              "value": "Express"
            },
            {
              "name": "Accept-Ranges",
              "value": "bytes"
            },
            {
              "name": "ETag",
              "value": "W/\"494894-E8hAb0IozeEhrZB21y3s69qtlUY\""
            },
            {
              "name": "Date",
              "value": "Tue, 16 Nov 2021 08:39:28 GMT"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "cookies": [],
          "content": {
            "size": 0,
            "mimeType": "application/javascript",
            "compression": 0
          },
          "redirectURL": "",
          "headersSize": 204,
          "bodySize": 0,
          "_transferSize": 204,
          "_error": null
        },
        "serverIPAddress": "127.0.0.1",
        "startedDateTime": "2021-11-16T08:39:28.585Z",
        "time": 54.62499999703141,
        "timings": {
          "blocked": 11.999999993888196,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 33.8750000022701,
          "receive": 8.750000000873115,
          "_blocked_queueing": 1.2499999938881956
        }
      },
      {
        "_initiator": {
          "type": "parser",
          "url": "http://localhost:8080/article/b38c58b3-b50b-416d-9161-f67ea3725bfa",
          "lineNumber": 8
        },
        "_priority": "VeryLow",
        "_resourceType": "other",
        "cache": {},
        "connection": "105073",
        "pageref": "page_52",
        "request": {
          "method": "GET",
          "url": "http://localhost:8080/js/1.js",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Host",
              "value": "localhost:8080"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"95\", \"Chromium\";v=\"95\", \";Not A Brand\";v=\"99\""
            },
            {
              "name": "If-None-Match",
              "value": "W/\"1d84b-o3Xm5OqoxqQBvtZ5v/dKaltoi+I\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"macOS\""
            },
            {
              "name": "Accept",
              "value": "application/signed-exchange;v=b3;q=0.7,*/*;q=0.8"
            },
            {
              "name": "Purpose",
              "value": "prefetch"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-origin"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "no-cors"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "empty"
            },
            {
              "name": "Referer",
              "value": "http://localhost:8080/article/b38c58b3-b50b-416d-9161-f67ea3725bfa"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Accept-Language",
              "value": "zh-CN,zh;q=0.9,en;q=0.8"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": 694,
          "bodySize": 0
        },
        "response": {
          "status": 304,
          "statusText": "Not Modified",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "X-Powered-By",
              "value": "Express"
            },
            {
              "name": "Accept-Ranges",
              "value": "bytes"
            },
            {
              "name": "ETag",
              "value": "W/\"1d84b-o3Xm5OqoxqQBvtZ5v/dKaltoi+I\""
            },
            {
              "name": "Date",
              "value": "Tue, 16 Nov 2021 08:39:28 GMT"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "cookies": [],
          "content": {
            "size": 0,
            "mimeType": "application/javascript"
          },
          "redirectURL": "",
          "headersSize": 203,
          "bodySize": 0,
          "_transferSize": 203,
          "_error": null
        },
        "serverIPAddress": "127.0.0.1",
        "startedDateTime": "2021-11-16T08:39:28.586Z",
        "time": 47.87499999656575,
        "timings": {
          "blocked": 12.000000001164153,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 35.12500000343425,
          "receive": 0.7499999919673428,
          "_blocked_queueing": 1.2500000011641532
        }
      },
      {
        "_initiator": {
          "type": "parser",
          "url": "http://localhost:8080/article/b38c58b3-b50b-416d-9161-f67ea3725bfa",
          "lineNumber": 8
        },
        "_priority": "VeryLow",
        "_resourceType": "other",
        "cache": {},
        "connection": "105063",
        "pageref": "page_52",
        "request": {
          "method": "GET",
          "url": "http://localhost:8080/js/10.js",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Host",
              "value": "localhost:8080"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"95\", \"Chromium\";v=\"95\", \";Not A Brand\";v=\"99\""
            },
            {
              "name": "If-None-Match",
              "value": "W/\"8d5-e8iVtp6ZWdvNuc5mtA2r6faGssQ\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"macOS\""
            },
            {
              "name": "Accept",
              "value": "application/signed-exchange;v=b3;q=0.7,*/*;q=0.8"
            },
            {
              "name": "Purpose",
              "value": "prefetch"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-origin"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "no-cors"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "empty"
            },
            {
              "name": "Referer",
              "value": "http://localhost:8080/article/b38c58b3-b50b-416d-9161-f67ea3725bfa"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Accept-Language",
              "value": "zh-CN,zh;q=0.9,en;q=0.8"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": 693,
          "bodySize": 0
        },
        "response": {
          "status": 304,
          "statusText": "Not Modified",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "X-Powered-By",
              "value": "Express"
            },
            {
              "name": "Accept-Ranges",
              "value": "bytes"
            },
            {
              "name": "ETag",
              "value": "W/\"8d5-e8iVtp6ZWdvNuc5mtA2r6faGssQ\""
            },
            {
              "name": "Date",
              "value": "Tue, 16 Nov 2021 08:39:28 GMT"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "cookies": [],
          "content": {
            "size": 0,
            "mimeType": "application/javascript"
          },
          "redirectURL": "",
          "headersSize": 201,
          "bodySize": 0,
          "_transferSize": 201,
          "_error": null
        },
        "serverIPAddress": "127.0.0.1",
        "startedDateTime": "2021-11-16T08:39:28.586Z",
        "time": 48.12500000116415,
        "timings": {
          "blocked": 12.8749999984866,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 34.37499999749707,
          "receive": 0.8750000051804818,
          "_blocked_queueing": 1.4999999984866008
        }
      },
      {
        "_initiator": {
          "type": "parser",
          "url": "http://localhost:8080/article/b38c58b3-b50b-416d-9161-f67ea3725bfa",
          "lineNumber": 8
        },
        "_priority": "VeryLow",
        "_resourceType": "other",
        "cache": {},
        "connection": "105121",
        "pageref": "page_52",
        "request": {
          "method": "GET",
          "url": "http://localhost:8080/js/2.js",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Host",
              "value": "localhost:8080"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"95\", \"Chromium\";v=\"95\", \";Not A Brand\";v=\"99\""
            },
            {
              "name": "If-None-Match",
              "value": "W/\"488e-z+ze8C4GJ/ogZW5Q5+ElyjLJVC0\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"macOS\""
            },
            {
              "name": "Accept",
              "value": "application/signed-exchange;v=b3;q=0.7,*/*;q=0.8"
            },
            {
              "name": "Purpose",
              "value": "prefetch"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-origin"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "no-cors"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "empty"
            },
            {
              "name": "Referer",
              "value": "http://localhost:8080/article/b38c58b3-b50b-416d-9161-f67ea3725bfa"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Accept-Language",
              "value": "zh-CN,zh;q=0.9,en;q=0.8"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": 693,
          "bodySize": 0
        },
        "response": {
          "status": 304,
          "statusText": "Not Modified",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "X-Powered-By",
              "value": "Express"
            },
            {
              "name": "Accept-Ranges",
              "value": "bytes"
            },
            {
              "name": "ETag",
              "value": "W/\"488e-z+ze8C4GJ/ogZW5Q5+ElyjLJVC0\""
            },
            {
              "name": "Date",
              "value": "Tue, 16 Nov 2021 08:39:28 GMT"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "cookies": [],
          "content": {
            "size": 0,
            "mimeType": "application/javascript"
          },
          "redirectURL": "",
          "headersSize": 202,
          "bodySize": 0,
          "_transferSize": 202,
          "_error": null
        },
        "serverIPAddress": "127.0.0.1",
        "startedDateTime": "2021-11-16T08:39:28.586Z",
        "time": 46.750000001338776,
        "timings": {
          "blocked": 11.749999995809048,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.125,
          "wait": 34.249999997671694,
          "receive": 0.6250000078580342,
          "_blocked_queueing": 1.7499999958090484
        }
      },
      {
        "_initiator": {
          "type": "parser",
          "url": "http://localhost:8080/article/b38c58b3-b50b-416d-9161-f67ea3725bfa",
          "lineNumber": 8
        },
        "_priority": "VeryLow",
        "_resourceType": "other",
        "cache": {},
        "connection": "105134",
        "pageref": "page_52",
        "request": {
          "method": "GET",
          "url": "http://localhost:8080/js/3.js",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Host",
              "value": "localhost:8080"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"95\", \"Chromium\";v=\"95\", \";Not A Brand\";v=\"99\""
            },
            {
              "name": "If-None-Match",
              "value": "W/\"869-oQ9KoonNNiZJOt7nHtmcysomd88\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"macOS\""
            },
            {
              "name": "Accept",
              "value": "application/signed-exchange;v=b3;q=0.7,*/*;q=0.8"
            },
            {
              "name": "Purpose",
              "value": "prefetch"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-origin"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "no-cors"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "empty"
            },
            {
              "name": "Referer",
              "value": "http://localhost:8080/article/b38c58b3-b50b-416d-9161-f67ea3725bfa"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Accept-Language",
              "value": "zh-CN,zh;q=0.9,en;q=0.8"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": 692,
          "bodySize": 0
        },
        "response": {
          "status": 304,
          "statusText": "Not Modified",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "X-Powered-By",
              "value": "Express"
            },
            {
              "name": "Accept-Ranges",
              "value": "bytes"
            },
            {
              "name": "ETag",
              "value": "W/\"869-oQ9KoonNNiZJOt7nHtmcysomd88\""
            },
            {
              "name": "Date",
              "value": "Tue, 16 Nov 2021 08:39:28 GMT"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "cookies": [],
          "content": {
            "size": 0,
            "mimeType": "application/javascript"
          },
          "redirectURL": "",
          "headersSize": 201,
          "bodySize": 0,
          "_transferSize": 201,
          "_error": null
        },
        "serverIPAddress": "127.0.0.1",
        "startedDateTime": "2021-11-16T08:39:28.586Z",
        "time": 48.12500000116415,
        "timings": {
          "blocked": 38.87499999796273,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.125,
          "wait": 8.374999996682163,
          "receive": 0.750000006519258,
          "_blocked_queueing": 36.87499999796273
        }
      },
      {
        "_initiator": {
          "type": "parser",
          "url": "http://localhost:8080/article/b38c58b3-b50b-416d-9161-f67ea3725bfa",
          "lineNumber": 8
        },
        "_priority": "VeryLow",
        "_resourceType": "other",
        "cache": {},
        "connection": "105125",
        "pageref": "page_52",
        "request": {
          "method": "GET",
          "url": "http://localhost:8080/js/4.js",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Host",
              "value": "localhost:8080"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"95\", \"Chromium\";v=\"95\", \";Not A Brand\";v=\"99\""
            },
            {
              "name": "If-None-Match",
              "value": "W/\"869-qOx1V03xrQ5EDKskcvpxUbgYUYI\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"macOS\""
            },
            {
              "name": "Accept",
              "value": "application/signed-exchange;v=b3;q=0.7,*/*;q=0.8"
            },
            {
              "name": "Purpose",
              "value": "prefetch"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-origin"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "no-cors"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "empty"
            },
            {
              "name": "Referer",
              "value": "http://localhost:8080/article/b38c58b3-b50b-416d-9161-f67ea3725bfa"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Accept-Language",
              "value": "zh-CN,zh;q=0.9,en;q=0.8"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": 692,
          "bodySize": 0
        },
        "response": {
          "status": 304,
          "statusText": "Not Modified",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "X-Powered-By",
              "value": "Express"
            },
            {
              "name": "Accept-Ranges",
              "value": "bytes"
            },
            {
              "name": "ETag",
              "value": "W/\"869-qOx1V03xrQ5EDKskcvpxUbgYUYI\""
            },
            {
              "name": "Date",
              "value": "Tue, 16 Nov 2021 08:39:28 GMT"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "cookies": [],
          "content": {
            "size": 0,
            "mimeType": "application/javascript"
          },
          "redirectURL": "",
          "headersSize": 201,
          "bodySize": 0,
          "_transferSize": 201,
          "_error": null
        },
        "serverIPAddress": "127.0.0.1",
        "startedDateTime": "2021-11-16T08:39:28.586Z",
        "time": 48.3749999984866,
        "timings": {
          "blocked": 39.75000000104774,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.125,
          "wait": 7.874999996856786,
          "receive": 0.6250000005820766,
          "_blocked_queueing": 38.62500000104774
        }
      },
      {
        "_initiator": {
          "type": "parser",
          "url": "http://localhost:8080/article/b38c58b3-b50b-416d-9161-f67ea3725bfa",
          "lineNumber": 8
        },
        "_priority": "VeryLow",
        "_resourceType": "other",
        "cache": {},
        "connection": "105125",
        "pageref": "page_52",
        "request": {
          "method": "GET",
          "url": "http://localhost:8080/js/5.js",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Host",
              "value": "localhost:8080"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"95\", \"Chromium\";v=\"95\", \";Not A Brand\";v=\"99\""
            },
            {
              "name": "If-None-Match",
              "value": "W/\"887-8oizsza0Cni1LhhymPdbuW9w/nA\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"macOS\""
            },
            {
              "name": "Accept",
              "value": "application/signed-exchange;v=b3;q=0.7,*/*;q=0.8"
            },
            {
              "name": "Purpose",
              "value": "prefetch"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-origin"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "no-cors"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "empty"
            },
            {
              "name": "Referer",
              "value": "http://localhost:8080/article/b38c58b3-b50b-416d-9161-f67ea3725bfa"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Accept-Language",
              "value": "zh-CN,zh;q=0.9,en;q=0.8"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": 692,
          "bodySize": 0
        },
        "response": {
          "status": 304,
          "statusText": "Not Modified",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "X-Powered-By",
              "value": "Express"
            },
            {
              "name": "Accept-Ranges",
              "value": "bytes"
            },
            {
              "name": "ETag",
              "value": "W/\"887-8oizsza0Cni1LhhymPdbuW9w/nA\""
            },
            {
              "name": "Date",
              "value": "Tue, 16 Nov 2021 08:39:28 GMT"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "cookies": [],
          "content": {
            "size": 0,
            "mimeType": "application/javascript"
          },
          "redirectURL": "",
          "headersSize": 201,
          "bodySize": 0,
          "_transferSize": 201,
          "_error": null
        },
        "serverIPAddress": "127.0.0.1",
        "startedDateTime": "2021-11-16T08:39:28.586Z",
        "time": 50.12500000157161,
        "timings": {
          "blocked": 48.5,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 0.8750000023283064,
          "receive": 0.7499999992433004,
          "_blocked_queueing": 46.875
        }
      },
      {
        "_initiator": {
          "type": "parser",
          "url": "http://localhost:8080/article/b38c58b3-b50b-416d-9161-f67ea3725bfa",
          "lineNumber": 8
        },
        "_priority": "VeryLow",
        "_resourceType": "other",
        "cache": {},
        "connection": "105134",
        "pageref": "page_52",
        "request": {
          "method": "GET",
          "url": "http://localhost:8080/js/6.js",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Host",
              "value": "localhost:8080"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"95\", \"Chromium\";v=\"95\", \";Not A Brand\";v=\"99\""
            },
            {
              "name": "If-None-Match",
              "value": "W/\"8ca-WJGF49A1Nm7I4C2PAbCIaDK75Xg\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"macOS\""
            },
            {
              "name": "Accept",
              "value": "application/signed-exchange;v=b3;q=0.7,*/*;q=0.8"
            },
            {
              "name": "Purpose",
              "value": "prefetch"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-origin"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "no-cors"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "empty"
            },
            {
              "name": "Referer",
              "value": "http://localhost:8080/article/b38c58b3-b50b-416d-9161-f67ea3725bfa"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Accept-Language",
              "value": "zh-CN,zh;q=0.9,en;q=0.8"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": 692,
          "bodySize": 0
        },
        "response": {
          "status": 304,
          "statusText": "Not Modified",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "X-Powered-By",
              "value": "Express"
            },
            {
              "name": "Accept-Ranges",
              "value": "bytes"
            },
            {
              "name": "ETag",
              "value": "W/\"8ca-WJGF49A1Nm7I4C2PAbCIaDK75Xg\""
            },
            {
              "name": "Date",
              "value": "Tue, 16 Nov 2021 08:39:28 GMT"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "cookies": [],
          "content": {
            "size": 0,
            "mimeType": "application/javascript"
          },
          "redirectURL": "",
          "headersSize": 201,
          "bodySize": 0,
          "_transferSize": 201,
          "_error": null
        },
        "serverIPAddress": "127.0.0.1",
        "startedDateTime": "2021-11-16T08:39:28.586Z",
        "time": 50.12500000157161,
        "timings": {
          "blocked": 48.6249999992433,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.125,
          "wait": 0.7500000017462298,
          "receive": 0.6250000005820766,
          "_blocked_queueing": 47.6249999992433
        }
      },
      {
        "_initiator": {
          "type": "parser",
          "url": "http://localhost:8080/article/b38c58b3-b50b-416d-9161-f67ea3725bfa",
          "lineNumber": 8
        },
        "_priority": "VeryLow",
        "_resourceType": "other",
        "cache": {},
        "connection": "105134",
        "pageref": "page_52",
        "request": {
          "method": "GET",
          "url": "http://localhost:8080/js/7.js",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Host",
              "value": "localhost:8080"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"95\", \"Chromium\";v=\"95\", \";Not A Brand\";v=\"99\""
            },
            {
              "name": "If-None-Match",
              "value": "W/\"8c0-lR3+JISozzlpqHC21wCnTXTA8fs\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"macOS\""
            },
            {
              "name": "Accept",
              "value": "application/signed-exchange;v=b3;q=0.7,*/*;q=0.8"
            },
            {
              "name": "Purpose",
              "value": "prefetch"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-origin"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "no-cors"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "empty"
            },
            {
              "name": "Referer",
              "value": "http://localhost:8080/article/b38c58b3-b50b-416d-9161-f67ea3725bfa"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Accept-Language",
              "value": "zh-CN,zh;q=0.9,en;q=0.8"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": 692,
          "bodySize": 0
        },
        "response": {
          "status": 304,
          "statusText": "Not Modified",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "X-Powered-By",
              "value": "Express"
            },
            {
              "name": "Accept-Ranges",
              "value": "bytes"
            },
            {
              "name": "ETag",
              "value": "W/\"8c0-lR3+JISozzlpqHC21wCnTXTA8fs\""
            },
            {
              "name": "Date",
              "value": "Tue, 16 Nov 2021 08:39:28 GMT"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "cookies": [],
          "content": {
            "size": 0,
            "mimeType": "application/javascript"
          },
          "redirectURL": "",
          "headersSize": 201,
          "bodySize": 0,
          "_transferSize": 201,
          "_error": null
        },
        "serverIPAddress": "127.0.0.1",
        "startedDateTime": "2021-11-16T08:39:28.586Z",
        "time": 51.74999999871943,
        "timings": {
          "blocked": 50.50000000250293,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 0.8750000002328306,
          "receive": 0.3749999959836714,
          "_blocked_queueing": 48.00000000250293
        }
      },
      {
        "_initiator": {
          "type": "parser",
          "url": "http://localhost:8080/article/b38c58b3-b50b-416d-9161-f67ea3725bfa",
          "lineNumber": 8
        },
        "_priority": "VeryLow",
        "_resourceType": "other",
        "cache": {},
        "connection": "105063",
        "pageref": "page_52",
        "request": {
          "method": "GET",
          "url": "http://localhost:8080/js/8.js",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Host",
              "value": "localhost:8080"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"95\", \"Chromium\";v=\"95\", \";Not A Brand\";v=\"99\""
            },
            {
              "name": "If-None-Match",
              "value": "W/\"8ca-C+jJWwja9FANu2SnBxl9NR8O3IY\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"macOS\""
            },
            {
              "name": "Accept",
              "value": "application/signed-exchange;v=b3;q=0.7,*/*;q=0.8"
            },
            {
              "name": "Purpose",
              "value": "prefetch"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-origin"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "no-cors"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "empty"
            },
            {
              "name": "Referer",
              "value": "http://localhost:8080/article/b38c58b3-b50b-416d-9161-f67ea3725bfa"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Accept-Language",
              "value": "zh-CN,zh;q=0.9,en;q=0.8"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": 692,
          "bodySize": 0
        },
        "response": {
          "status": 304,
          "statusText": "Not Modified",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "X-Powered-By",
              "value": "Express"
            },
            {
              "name": "Accept-Ranges",
              "value": "bytes"
            },
            {
              "name": "ETag",
              "value": "W/\"8ca-C+jJWwja9FANu2SnBxl9NR8O3IY\""
            },
            {
              "name": "Date",
              "value": "Tue, 16 Nov 2021 08:39:28 GMT"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "cookies": [],
          "content": {
            "size": 0,
            "mimeType": "application/javascript"
          },
          "redirectURL": "",
          "headersSize": 201,
          "bodySize": 0,
          "_transferSize": 201,
          "_error": null
        },
        "serverIPAddress": "127.0.0.1",
        "startedDateTime": "2021-11-16T08:39:28.586Z",
        "time": 51.500000001396984,
        "timings": {
          "blocked": 50.25000000250293,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 0.7499999969732016,
          "receive": 0.5000000019208528,
          "_blocked_queueing": 48.00000000250293
        }
      },
      {
        "_initiator": {
          "type": "parser",
          "url": "http://localhost:8080/article/b38c58b3-b50b-416d-9161-f67ea3725bfa",
          "lineNumber": 8
        },
        "_priority": "VeryLow",
        "_resourceType": "other",
        "cache": {},
        "connection": "105125",
        "pageref": "page_52",
        "request": {
          "method": "GET",
          "url": "http://localhost:8080/js/9.js",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Host",
              "value": "localhost:8080"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"95\", \"Chromium\";v=\"95\", \";Not A Brand\";v=\"99\""
            },
            {
              "name": "If-None-Match",
              "value": "W/\"8de-hEDOK40Vv/rrtz6SCooqgEChKfE\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"macOS\""
            },
            {
              "name": "Accept",
              "value": "application/signed-exchange;v=b3;q=0.7,*/*;q=0.8"
            },
            {
              "name": "Purpose",
              "value": "prefetch"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-origin"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "no-cors"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "empty"
            },
            {
              "name": "Referer",
              "value": "http://localhost:8080/article/b38c58b3-b50b-416d-9161-f67ea3725bfa"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Accept-Language",
              "value": "zh-CN,zh;q=0.9,en;q=0.8"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": 692,
          "bodySize": 0
        },
        "response": {
          "status": 304,
          "statusText": "Not Modified",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "X-Powered-By",
              "value": "Express"
            },
            {
              "name": "Accept-Ranges",
              "value": "bytes"
            },
            {
              "name": "ETag",
              "value": "W/\"8de-hEDOK40Vv/rrtz6SCooqgEChKfE\""
            },
            {
              "name": "Date",
              "value": "Tue, 16 Nov 2021 08:39:28 GMT"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "cookies": [],
          "content": {
            "size": 0,
            "mimeType": "application/javascript"
          },
          "redirectURL": "",
          "headersSize": 201,
          "bodySize": 0,
          "_transferSize": 201,
          "_error": null
        },
        "serverIPAddress": "127.0.0.1",
        "startedDateTime": "2021-11-16T08:39:28.586Z",
        "time": 52.12500000197906,
        "timings": {
          "blocked": 50.50000000116415,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 1.1249999988940544,
          "receive": 0.5000000019208528,
          "_blocked_queueing": 48.12500000116415
        }
      },
      {
        "_fromCache": "disk",
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [
              {
                "functionName": "requireEnsure",
                "scriptId": "46831",
                "url": "http://localhost:8080/js/app.js",
                "lineNumber": 918,
                "columnNumber": 27
              },
              {
                "functionName": "fn.e",
                "scriptId": "46831",
                "url": "http://localhost:8080/js/app.js",
                "lineNumber": 176,
                "columnNumber": 39
              },
              {
                "functionName": "component",
                "scriptId": "47019",
                "url": "webpack-internal:///./src/router/index.js",
                "lineNumber": 25,
                "columnNumber": 31
              },
              {
                "functionName": "eval",
                "scriptId": "47024",
                "url": "webpack-internal:///./node_modules/vue-router/dist/vue-router.esm.js",
                "lineNumber": 2144,
                "columnNumber": 16
              },
              {
                "functionName": "eval",
                "scriptId": "47024",
                "url": "webpack-internal:///./node_modules/vue-router/dist/vue-router.esm.js",
                "lineNumber": 2171,
                "columnNumber": 65
              },
              {
                "functionName": "eval",
                "scriptId": "47024",
                "url": "webpack-internal:///./node_modules/vue-router/dist/vue-router.esm.js",
                "lineNumber": 2171,
                "columnNumber": 37
              },
              {
                "functionName": "flatMapComponents",
                "scriptId": "47024",
                "url": "webpack-internal:///./node_modules/vue-router/dist/vue-router.esm.js",
                "lineNumber": 2170,
                "columnNumber": 25
              },
              {
                "functionName": "eval",
                "scriptId": "47024",
                "url": "webpack-internal:///./node_modules/vue-router/dist/vue-router.esm.js",
                "lineNumber": 2106,
                "columnNumber": 4
              },
              {
                "functionName": "iterator",
                "scriptId": "47024",
                "url": "webpack-internal:///./node_modules/vue-router/dist/vue-router.esm.js",
                "lineNumber": 2362,
                "columnNumber": 6
              },
              {
                "functionName": "step",
                "scriptId": "47024",
                "url": "webpack-internal:///./node_modules/vue-router/dist/vue-router.esm.js",
                "lineNumber": 2004,
                "columnNumber": 8
              },
              {
                "functionName": "step",
                "scriptId": "47024",
                "url": "webpack-internal:///./node_modules/vue-router/dist/vue-router.esm.js",
                "lineNumber": 2008,
                "columnNumber": 8
              },
              {
                "functionName": "runQueue",
                "scriptId": "47024",
                "url": "webpack-internal:///./node_modules/vue-router/dist/vue-router.esm.js",
                "lineNumber": 2012,
                "columnNumber": 2
              },
              {
                "functionName": "confirmTransition",
                "scriptId": "47024",
                "url": "webpack-internal:///./node_modules/vue-router/dist/vue-router.esm.js",
                "lineNumber": 2392,
                "columnNumber": 2
              },
              {
                "functionName": "transitionTo",
                "scriptId": "47024",
                "url": "webpack-internal:///./node_modules/vue-router/dist/vue-router.esm.js",
                "lineNumber": 2260,
                "columnNumber": 7
              },
              {
                "functionName": "init",
                "scriptId": "47024",
                "url": "webpack-internal:///./node_modules/vue-router/dist/vue-router.esm.js",
                "lineNumber": 2994,
                "columnNumber": 12
              },
              {
                "functionName": "beforeCreate",
                "scriptId": "47024",
                "url": "webpack-internal:///./node_modules/vue-router/dist/vue-router.esm.js",
                "lineNumber": 1298,
                "columnNumber": 21
              },
              {
                "functionName": "invokeWithErrorHandling",
                "scriptId": "46990",
                "url": "webpack-internal:///./node_modules/vue/dist/vue.runtime.esm.js",
                "lineNumber": 1861,
                "columnNumber": 56
              },
              {
                "functionName": "callHook",
                "scriptId": "46990",
                "url": "webpack-internal:///./node_modules/vue/dist/vue.runtime.esm.js",
                "lineNumber": 4228,
                "columnNumber": 6
              },
              {
                "functionName": "Vue._init",
                "scriptId": "46990",
                "url": "webpack-internal:///./node_modules/vue/dist/vue.runtime.esm.js",
                "lineNumber": 5007,
                "columnNumber": 4
              },
              {
                "functionName": "Vue",
                "scriptId": "46990",
                "url": "webpack-internal:///./node_modules/vue/dist/vue.runtime.esm.js",
                "lineNumber": 5088,
                "columnNumber": 7
              },
              {
                "functionName": "eval",
                "scriptId": "46867",
                "url": "webpack-internal:///./src/main.js",
                "lineNumber": 55,
                "columnNumber": 0
              },
              {
                "functionName": "./src/main.js",
                "scriptId": "46831",
                "url": "http://localhost:8080/js/app.js",
                "lineNumber": 1298,
                "columnNumber": 0
              },
              {
                "functionName": "__webpack_require__",
                "scriptId": "46831",
                "url": "http://localhost:8080/js/app.js",
                "lineNumber": 853,
                "columnNumber": 29
              },
              {
                "functionName": "fn",
                "scriptId": "46831",
                "url": "http://localhost:8080/js/app.js",
                "lineNumber": 150,
                "columnNumber": 19
              },
              {
                "functionName": "1",
                "scriptId": "46831",
                "url": "http://localhost:8080/js/app.js",
                "lineNumber": 1406,
                "columnNumber": 17
              },
              {
                "functionName": "__webpack_require__",
                "scriptId": "46831",
                "url": "http://localhost:8080/js/app.js",
                "lineNumber": 853,
                "columnNumber": 29
              },
              {
                "functionName": "checkDeferredModules",
                "scriptId": "46831",
                "url": "http://localhost:8080/js/app.js",
                "lineNumber": 45,
                "columnNumber": 22
              },
              {
                "functionName": "",
                "scriptId": "46831",
                "url": "http://localhost:8080/js/app.js",
                "lineNumber": 993,
                "columnNumber": 17
              },
              {
                "functionName": "",
                "scriptId": "46831",
                "url": "http://localhost:8080/js/app.js",
                "lineNumber": 996,
                "columnNumber": 9
              }
            ]
          }
        },
        "_priority": "Low",
        "_resourceType": "script",
        "cache": {},
        "pageref": "page_52",
        "request": {
          "method": "GET",
          "url": "http://localhost:8080/js/0.js",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"95\", \"Chromium\";v=\"95\", \";Not A Brand\";v=\"99\""
            },
            {
              "name": "Referer",
              "value": "http://localhost:8080/article/b38c58b3-b50b-416d-9161-f67ea3725bfa"
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"macOS\""
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": 362,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "OK",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "X-Powered-By",
              "value": "Express"
            },
            {
              "name": "Accept-Ranges",
              "value": "bytes"
            },
            {
              "name": "Date",
              "value": "Tue, 16 Nov 2021 08:39:28 GMT"
            },
            {
              "name": "Content-Type",
              "value": "application/javascript; charset=UTF-8"
            },
            {
              "name": "Content-Length",
              "value": "4802708"
            },
            {
              "name": "ETag",
              "value": "W/\"494894-E8hAb0IozeEhrZB21y3s69qtlUY\""
            }
          ],
          "cookies": [],
          "content": {
            "size": 4802708,
            "mimeType": "application/javascript",
            "text": "((typeof self !== 'undefined' ? self : this)[\"webpackJsonp\"] = (typeof self !== 'undefined' ? self : this)[\"webpackJsonp\"] || []).push([[0],{\n\n/***/ \"./node_modules/@babel/runtime/helpers/esm/defineProperty.js\":\n/*!*******************************************************************!*\\\n  !*** ./node_modules/@babel/runtime/helpers/esm/defineProperty.js ***!\n  \\*******************************************************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"default\\\", function() { return _defineProperty; });\\nfunction _defineProperty(obj, key, value) {\\n  if (key in obj) {\\n    Object.defineProperty(obj, key, {\\n      value: value,\\n      enumerable: true,\\n      configurable: true,\\n      writable: true\\n    });\\n  } else {\\n    obj[key] = value;\\n  }\\n\\n  return obj;\\n}//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHkuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHkuanM/YWRlMyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn0iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUpBO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/esm/defineProperty.js\\n\");\n\n/***/ }),\n\n/***/ \"./node_modules/@babel/runtime/helpers/esm/objectSpread2.js\":\n/*!******************************************************************!*\\\n  !*** ./node_modules/@babel/runtime/helpers/esm/objectSpread2.js ***!\n  \\******************************************************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"default\\\", function() { return _objectSpread2; });\\n/* harmony import */ var core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.object.keys.js */ \\\"./node_modules/core-js/modules/es.object.keys.js\\\");\\n/* harmony import */ var core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_0__);\\n/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.symbol.js */ \\\"./node_modules/core-js/modules/es.symbol.js\\\");\\n/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_1__);\\n/* harmony import */ var core_js_modules_es_array_filter_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.array.filter.js */ \\\"./node_modules/core-js/modules/es.array.filter.js\\\");\\n/* harmony import */ var core_js_modules_es_array_filter_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_filter_js__WEBPACK_IMPORTED_MODULE_2__);\\n/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ \\\"./node_modules/core-js/modules/es.object.to-string.js\\\");\\n/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_3__);\\n/* harmony import */ var core_js_modules_es_object_get_own_property_descriptor_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptor.js */ \\\"./node_modules/core-js/modules/es.object.get-own-property-descriptor.js\\\");\\n/* harmony import */ var core_js_modules_es_object_get_own_property_descriptor_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_get_own_property_descriptor_js__WEBPACK_IMPORTED_MODULE_4__);\\n/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ \\\"./node_modules/core-js/modules/web.dom-collections.for-each.js\\\");\\n/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_5__);\\n/* harmony import */ var core_js_modules_es_object_get_own_property_descriptors_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptors.js */ \\\"./node_modules/core-js/modules/es.object.get-own-property-descriptors.js\\\");\\n/* harmony import */ var core_js_modules_es_object_get_own_property_descriptors_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_get_own_property_descriptors_js__WEBPACK_IMPORTED_MODULE_6__);\\n/* harmony import */ var _defineProperty_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./defineProperty.js */ \\\"./node_modules/@babel/runtime/helpers/esm/defineProperty.js\\\");\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nfunction ownKeys(object, enumerableOnly) {\\n  var keys = Object.keys(object);\\n\\n  if (Object.getOwnPropertySymbols) {\\n    var symbols = Object.getOwnPropertySymbols(object);\\n\\n    if (enumerableOnly) {\\n      symbols = symbols.filter(function (sym) {\\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\\n      });\\n    }\\n\\n    keys.push.apply(keys, symbols);\\n  }\\n\\n  return keys;\\n}\\n\\nfunction _objectSpread2(target) {\\n  for (var i = 1; i < arguments.length; i++) {\\n    var source = arguments[i] != null ? arguments[i] : {};\\n\\n    if (i % 2) {\\n      ownKeys(Object(source), true).forEach(function (key) {\\n        Object(_defineProperty_js__WEBPACK_IMPORTED_MODULE_7__[\\\"default\\\"])(target, key, source[key]);\\n      });\\n    } else if (Object.getOwnPropertyDescriptors) {\\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\\n    } else {\\n      ownKeys(Object(source)).forEach(function (key) {\\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\\n      });\\n    }\\n  }\\n\\n  return target;\\n}//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMi5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyLmpzPzU1MzAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGRlZmluZVByb3BlcnR5IGZyb20gXCIuL2RlZmluZVByb3BlcnR5LmpzXCI7XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTtcblxuICAgIGlmIChlbnVtZXJhYmxlT25seSkge1xuICAgICAgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7XG4gIH1cblxuICByZXR1cm4ga2V5cztcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX29iamVjdFNwcmVhZDIodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307XG5cbiAgICBpZiAoaSAlIDIpIHtcbiAgICAgIG93bktleXMoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn0iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/esm/objectSpread2.js\\n\");\n\n/***/ }),\n\n/***/ \"./node_modules/cache-loader/dist/cjs.js?!./node_modules/babel-loader/lib/index.js!./node_modules/cache-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/components/HighLight.vue?vue&type=script&lang=js&\":\n/*!******************************************************************************************************************************************************************************************************************************************************!*\\\n  !*** ./node_modules/cache-loader/dist/cjs.js??ref--13-0!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/HighLight.vue?vue&type=script&lang=js& ***!\n  \\******************************************************************************************************************************************************************************************************************************************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony import */ var _Users_MJ_web_project_1903B_Project1_wipi_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/toConsumableArray */ \\\"./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\\\");\\n/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ \\\"./node_modules/core-js/modules/es.object.to-string.js\\\");\\n/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__);\\n/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ \\\"./node_modules/core-js/modules/web.dom-collections.for-each.js\\\");\\n/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_2__);\\n/* harmony import */ var highlight_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! highlight.js */ \\\"./node_modules/highlight.js/lib/index.js\\\");\\n/* harmony import */ var highlight_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(highlight_js__WEBPACK_IMPORTED_MODULE_3__);\\n/* harmony import */ var copy_to_clipboard__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! copy-to-clipboard */ \\\"./node_modules/copy-to-clipboard/index.js\\\");\\n/* harmony import */ var copy_to_clipboard__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(copy_to_clipboard__WEBPACK_IMPORTED_MODULE_4__);\\n/* harmony import */ var element_ui__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! element-ui */ \\\"./node_modules/element-ui/lib/element-ui.common.js\\\");\\n/* harmony import */ var element_ui__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(element_ui__WEBPACK_IMPORTED_MODULE_5__);\\n\\n\\n\\n//\\n//\\n//\\n//\\n//\\n//\\n\\n\\n\\n/* harmony default export */ __webpack_exports__[\\\"default\\\"] = ({\\n  updated: function updated() {\\n    var codes = Object(_Users_MJ_web_project_1903B_Project1_wipi_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__[\\\"default\\\"])(document.querySelectorAll('.markdown pre code'));\\n\\n    console.log('codes..', codes);\\n    codes.forEach(function (item) {\\n      var span = document.createElement('span');\\n      span.innerText = 'Copy';\\n      span.className = 'copy';\\n\\n      span.onclick = function () {\\n        copy_to_clipboard__WEBPACK_IMPORTED_MODULE_4___default()(item.innerText);\\n        element_ui__WEBPACK_IMPORTED_MODULE_5__[\\\"Message\\\"].success('复制成功');\\n      };\\n\\n      item.parentNode.appendChild(span);\\n      highlight_js__WEBPACK_IMPORTED_MODULE_3___default.a.highlightBlock(item);\\n    });\\n  }\\n});//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY2FjaGUtbG9hZGVyL2Rpc3QvY2pzLmpzPyEuL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4vbm9kZV9tb2R1bGVzL2NhY2hlLWxvYWRlci9kaXN0L2Nqcy5qcz8hLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/IS4vc3JjL2NvbXBvbmVudHMvSGlnaExpZ2h0LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vSGlnaExpZ2h0LnZ1ZT82M2U5Il0sInNvdXJjZXNDb250ZW50IjpbIjx0ZW1wbGF0ZT5cbiAgICA8ZGl2IHJlZj1cImNvbnRhaW5lclwiIGNsYXNzPVwibWFya2Rvd25cIj5cbiAgICAgICAgPHNsb3Q+PC9zbG90PlxuICAgIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCBobGpzIGZyb20gJ2hpZ2hsaWdodC5qcyc7XG5pbXBvcnQgY29weSBmcm9tICdjb3B5LXRvLWNsaXBib2FyZCc7XG5pbXBvcnQge01lc3NhZ2V9IGZyb20gJ2VsZW1lbnQtdWknO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgdXBkYXRlZCgpe1xuICAgICAgICBsZXQgY29kZXMgPSBbLi4uZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLm1hcmtkb3duIHByZSBjb2RlJyldO1xuICAgICAgICBjb25zb2xlLmxvZygnY29kZXMuLicsIGNvZGVzKTtcbiAgICAgICAgY29kZXMuZm9yRWFjaChpdGVtPT57XG4gICAgICAgICAgICBsZXQgc3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICAgICAgICAgIHNwYW4uaW5uZXJUZXh0ID0gJ0NvcHknO1xuICAgICAgICAgICAgc3Bhbi5jbGFzc05hbWUgPSAnY29weSc7XG4gICAgICAgICAgICBzcGFuLm9uY2xpY2sgPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIGNvcHkoaXRlbS5pbm5lclRleHQpO1xuICAgICAgICAgICAgICAgIE1lc3NhZ2Uuc3VjY2Vzcygn5aSN5Yi25oiQ5YqfJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpdGVtLnBhcmVudE5vZGUuYXBwZW5kQ2hpbGQoc3Bhbik7XG4gICAgICAgICAgICBobGpzLmhpZ2hsaWdodEJsb2NrKGl0ZW0pO1xuICAgICAgICB9KVxuICAgIH1cbn1cbjwvc2NyaXB0PlxuXG48c3R5bGUgc3R5bGU9XCJzY29wZWRcIiBsYW5nPVwic2Nzc1wiPlxuLmNvcHl7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHJpZ2h0OiA1cHg7XG4gICAgdG9wOiA0cHg7XG4gICAgZm9udC1zaXplOiAxMnB4O1xuICAgIHRyYW5zZm9ybTogc2NhbGUoMC45KTtcbiAgICBjb2xvcjogcmdiYSgxNDAsIDE0MCwgMTQwLCAwLjgpO1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbn1cbjwvc3R5bGU+Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFPQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQWZBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///./node_modules/cache-loader/dist/cjs.js?!./node_modules/babel-loader/lib/index.js!./node_modules/cache-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/components/HighLight.vue?vue&type=script&lang=js&\\n\");\n\n/***/ }),\n\n/***/ \"./node_modules/cache-loader/dist/cjs.js?!./node_modules/babel-loader/lib/index.js!./node_modules/cache-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/components/ImageViewer.vue?vue&type=script&lang=js&\":\n/*!********************************************************************************************************************************************************************************************************************************************************!*\\\n  !*** ./node_modules/cache-loader/dist/cjs.js??ref--13-0!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/ImageViewer.vue?vue&type=script&lang=js& ***!\n  \\********************************************************************************************************************************************************************************************************************************************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony import */ var viewerjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! viewerjs */ \\\"./node_modules/viewerjs/dist/viewer.js\\\");\\n/* harmony import */ var viewerjs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(viewerjs__WEBPACK_IMPORTED_MODULE_0__);\\n//\\n//\\n//\\n//\\n//\\n//\\n\\n/* harmony default export */ __webpack_exports__[\\\"default\\\"] = ({\\n  mounted: function mounted() {\\n    var container = this.$refs.container;\\n    console.log('container...', container);\\n    var viewer = new viewerjs__WEBPACK_IMPORTED_MODULE_0___default.a(container, {});\\n    var observer = new MutationObserver(function () {\\n      viewer.update();\\n    });\\n    observer.observe(container, {\\n      subtree: true,\\n      childList: true\\n    });\\n  }\\n});//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY2FjaGUtbG9hZGVyL2Rpc3QvY2pzLmpzPyEuL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4vbm9kZV9tb2R1bGVzL2NhY2hlLWxvYWRlci9kaXN0L2Nqcy5qcz8hLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/IS4vc3JjL2NvbXBvbmVudHMvSW1hZ2VWaWV3ZXIudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9JbWFnZVZpZXdlci52dWU/OWVmNSJdLCJzb3VyY2VzQ29udGVudCI6WyI8dGVtcGxhdGU+XG4gIDxkaXYgcmVmPVwiY29udGFpbmVyXCI+XG4gICAgPHNsb3Q+PC9zbG90PlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgVmlld2VyIGZyb20gXCJ2aWV3ZXJqc1wiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG1vdW50ZWQoKSB7XG4gICAgbGV0IGNvbnRhaW5lciA9IHRoaXMuJHJlZnMuY29udGFpbmVyO1xuICAgIGNvbnNvbGUubG9nKCdjb250YWluZXIuLi4nLCBjb250YWluZXIpO1xuICAgIGNvbnN0IHZpZXdlciA9IG5ldyBWaWV3ZXIoY29udGFpbmVyLCB7XG4gICAgfSk7XG4gICAgdmFyIG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoZnVuY3Rpb24gKCkge1xuICAgICAgdmlld2VyLnVwZGF0ZSgpO1xuICAgIH0pO1xuICAgIG9ic2VydmVyLm9ic2VydmUoY29udGFpbmVyLCB7IHN1YnRyZWU6IHRydWUsIGNoaWxkTGlzdDogdHJ1ZSB9KTtcbiAgfSxcbn07XG48L3NjcmlwdD5cblxuPHN0eWxlPlxuPC9zdHlsZT4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQU9BO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFWQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///./node_modules/cache-loader/dist/cjs.js?!./node_modules/babel-loader/lib/index.js!./node_modules/cache-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/components/ImageViewer.vue?vue&type=script&lang=js&\\n\");\n\n/***/ }),\n\n/***/ \"./node_modules/cache-loader/dist/cjs.js?!./node_modules/babel-loader/lib/index.js!./node_modules/cache-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/components/share/Share.vue?vue&type=script&lang=js&\":\n/*!********************************************************************************************************************************************************************************************************************************************************!*\\\n  !*** ./node_modules/cache-loader/dist/cjs.js??ref--13-0!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/share/Share.vue?vue&type=script&lang=js& ***!\n  \\********************************************************************************************************************************************************************************************************************************************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony import */ var _Users_MJ_web_project_1903B_Project1_wipi_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator */ \\\"./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\\\");\\n/* harmony import */ var regenerator_runtime_runtime_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! regenerator-runtime/runtime.js */ \\\"./node_modules/regenerator-runtime/runtime.js\\\");\\n/* harmony import */ var regenerator_runtime_runtime_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(regenerator_runtime_runtime_js__WEBPACK_IMPORTED_MODULE_1__);\\n/* harmony import */ var _services_index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/services/index */ \\\"./src/services/index.js\\\");\\n\\n\\n\\n//\\n//\\n//\\n//\\n//\\n//\\n//\\n//\\n//\\n//\\n//\\n//\\n//\\n//\\n//\\n//\\n//\\n//\\n//\\n//\\n//\\n//\\n//\\nvar QRCode = __webpack_require__(/*! qrcode-svg */ \\\"./node_modules/qrcode-svg/lib/qrcode.js\\\");\\n\\n\\n/* harmony default export */ __webpack_exports__[\\\"default\\\"] = ({\\n  data: function data() {\\n    return {\\n      dialogVisible: true\\n    };\\n  },\\n  props: {\\n    item: {\\n      default: function _default() {\\n        return {\\n          title: '使用 TS 类型实现自然数加减乘除',\\n          summary: '类型体操：使用 typescript 类型系统实现自然数的加减乘除法。',\\n          cover: 'https://wipi.oss-cn-shanghai.aliyuncs.com/2021-11-01/typescript-960x504.png',\\n          id: ''\\n        };\\n      }\\n    }\\n  },\\n  computed: {\\n    qrCode: function qrCode() {\\n      return new QRCode(\\\"\\\".concat( false ? undefined : \\\"http://localhost:8080/article/\\\".concat(this.item.id))).svg();\\n    }\\n  },\\n  methods: {\\n    genePoster: function genePoster() {\\n      var _this = this;\\n\\n      return Object(_Users_MJ_web_project_1903B_Project1_wipi_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__[\\\"default\\\"])( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\\n        var rect, result;\\n        return regeneratorRuntime.wrap(function _callee$(_context) {\\n          while (1) {\\n            switch (_context.prev = _context.next) {\\n              case 0:\\n                // console.log('dialog...', this.$refs.dialog, this.$refs);\\n                rect = _this.$refs.dialog.$el.getBoundingClientRect();\\n                _context.next = 3;\\n                return Object(_services_index__WEBPACK_IMPORTED_MODULE_2__[\\\"genePoster\\\"])({\\n                  height: 379 || false,\\n                  width: 391 || false,\\n                  name: _this.item.title,\\n                  pageUrl: \\\"/article/\\\".concat(_this.item.id),\\n                  html: _this.$refs.dialog.$el.innerHTML\\n                });\\n\\n              case 3:\\n                result = _context.sent;\\n                console.log('result...', result);\\n\\n              case 5:\\n              case \\\"end\\\":\\n                return _context.stop();\\n            }\\n          }\\n        }, _callee);\\n      }))();\\n    }\\n  }\\n});//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY2FjaGUtbG9hZGVyL2Rpc3QvY2pzLmpzPyEuL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4vbm9kZV9tb2R1bGVzL2NhY2hlLWxvYWRlci9kaXN0L2Nqcy5qcz8hLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/IS4vc3JjL2NvbXBvbmVudHMvc2hhcmUvU2hhcmUudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9TaGFyZS52dWU/N2M2ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8dGVtcGxhdGU+XG4gICAgPGVsLWRpYWxvZyBcbiAgICByZWY9XCJkaWFsb2dcIlxuICAgIHRpdGxlPVwi5YiG5Lqr5rW35oqlXCJcbiAgICA6dmlzaWJsZS5zeW5jPVwiZGlhbG9nVmlzaWJsZVwiXG4gICAgd2lkdGg9XCIzMCVcIj5cbiAgICAgICAgPGltZyA6c3JjPVwiaXRlbS5jb3ZlclwiIGFsdD1cIlwiPlxuICAgICAgICA8cD57e2l0ZW0udGl0bGV9fTwvcD5cbiAgICAgICAgPHA+e3tpdGVtLnN1bW1hcnl9fTwvcD5cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxkaXYgdi1odG1sPVwicXJDb2RlXCI+PC9kaXY+XG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgIDxwPuivhuWIq+S6jOe7tOeggeafpeeci+aWh+eroDwvcD5cbiAgICAgICAgICAgICAgICA8cD7ljp/mlofliIbkuqvoh6o8c3Bhbj7lsI/mpbzlj4jmuIXpo448L3NwYW4+PC9wPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8c2xvdCBuYW1lPVwiZm9vdGVyXCI+XG4gICAgICAgICAgICA8YnV0dG9uPuWFs+mXrTwvYnV0dG9uPlxuICAgICAgICAgICAgPGJ1dHRvbiBAY2xpY2s9XCJnZW5lUG9zdGVyXCI+5LiL6L29PC9idXR0b24+XG4gICAgICAgIDwvc2xvdD5cbiAgICA8L2VsLWRpYWxvZz5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG52YXIgUVJDb2RlID0gcmVxdWlyZShcInFyY29kZS1zdmdcIik7XG5pbXBvcnQge2dlbmVQb3N0ZXJ9IGZyb20gJ0Avc2VydmljZXMvaW5kZXgnXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBkYXRhKCl7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkaWFsb2dWaXNpYmxlOiB0cnVlXG4gICAgICAgIH1cbiAgICB9LFxuICAgIHByb3BzOiB7XG4gICAgICAgIGl0ZW06IHtcbiAgICAgICAgICAgIGRlZmF1bHQ6ICgpPT57XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICfkvb/nlKggVFMg57G75Z6L5a6e546w6Ieq54S25pWw5Yqg5YeP5LmY6ZmkJyxcbiAgICAgICAgICAgICAgICAgICAgc3VtbWFyeTogJ+exu+Wei+S9k+aTje+8muS9v+eUqCB0eXBlc2NyaXB0IOexu+Wei+ezu+e7n+WunueOsOiHqueEtuaVsOeahOWKoOWHj+S5mOmZpOazleOAgicsXG4gICAgICAgICAgICAgICAgICAgIGNvdmVyOiAnaHR0cHM6Ly93aXBpLm9zcy1jbi1zaGFuZ2hhaS5hbGl5dW5jcy5jb20vMjAyMS0xMS0wMS90eXBlc2NyaXB0LTk2MHg1MDQucG5nJyxcbiAgICAgICAgICAgICAgICAgICAgaWQ6ICcnXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcbiAgICBjb21wdXRlZDoge1xuICAgICAgICBxckNvZGUoKXtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUVJDb2RlKGAke1xuICAgICAgICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbic/YGh0dHBzOi8vYmxvZy53aXBpLnRlY2gvYXJ0aWNsZS8ke3RoaXMuaXRlbS5pZH1gOiBgaHR0cDovL2xvY2FsaG9zdDo4MDgwL2FydGljbGUvJHt0aGlzLml0ZW0uaWR9YFxuICAgICAgICAgICAgfWApLnN2ZygpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBtZXRob2RzOiB7XG4gICAgICAgIGFzeW5jIGdlbmVQb3N0ZXIoKXtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdkaWFsb2cuLi4nLCB0aGlzLiRyZWZzLmRpYWxvZywgdGhpcy4kcmVmcyk7XG5cbiAgICAgICAgICAgIGxldCByZWN0ID0gdGhpcy4kcmVmcy5kaWFsb2cuJGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgbGV0IHJlc3VsdCA9IGF3YWl0IGdlbmVQb3N0ZXIoe1xuICAgICAgICAgICAgICAgIGhlaWdodDogMzc5IHx8IHJlY3QuaGVpZ2h0LFxuICAgICAgICAgICAgICAgIHdpZHRoOiAzOTEgfHwgcmVjdC53aWR0aCxcbiAgICAgICAgICAgICAgICBuYW1lOiB0aGlzLml0ZW0udGl0bGUsXG4gICAgICAgICAgICAgICAgcGFnZVVybDogYC9hcnRpY2xlLyR7dGhpcy5pdGVtLmlkfWAsXG4gICAgICAgICAgICAgICAgaHRtbDogdGhpcy4kcmVmcy5kaWFsb2cuJGVsLmlubmVySFRNTFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdyZXN1bHQuLi4nLCByZXN1bHQpO1xuICAgICAgICB9XG4gICAgfVxufVxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBsYW5nPVwic2Nzc1wiIHNjb3BlZD5cbmltZ3tcbiAgICB3aWR0aDogMTAwJTtcbn1cbjwvc3R5bGU+Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBd0JBO0FBQ0E7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFKQTtBQU1BO0FBUkE7QUFEQTtBQVlBO0FBQ0E7QUFDQTtBQUdBO0FBTEE7QUFPQTtBQUNBO0FBQUE7QUFDQTtBQURBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBRUE7QUFIQTtBQUFBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUxBO0FBQ0E7QUFMQTtBQUlBO0FBT0E7QUFDQTtBQVpBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBWUE7QUFiQTtBQXpCQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///./node_modules/cache-loader/dist/cjs.js?!./node_modules/babel-loader/lib/index.js!./node_modules/cache-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/components/share/Share.vue?vue&type=script&lang=js&\\n\");\n\n/***/ }),\n\n/***/ \"./node_modules/cache-loader/dist/cjs.js?!./node_modules/babel-loader/lib/index.js!./node_modules/cache-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/views/article/Detail.vue?vue&type=script&lang=js&\":\n/*!******************************************************************************************************************************************************************************************************************************************************!*\\\n  !*** ./node_modules/cache-loader/dist/cjs.js??ref--13-0!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/views/article/Detail.vue?vue&type=script&lang=js& ***!\n  \\******************************************************************************************************************************************************************************************************************************************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony import */ var _Users_MJ_web_project_1903B_Project1_wipi_node_modules_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/objectSpread2 */ \\\"./node_modules/@babel/runtime/helpers/esm/objectSpread2.js\\\");\\n/* harmony import */ var vuex__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vuex */ \\\"./node_modules/vuex/dist/vuex.esm.js\\\");\\n/* harmony import */ var _components_LeftLayout__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/components/LeftLayout */ \\\"./src/components/LeftLayout.vue\\\");\\n/* harmony import */ var _components_RightLayout__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/components/RightLayout */ \\\"./src/components/RightLayout.vue\\\");\\n/* harmony import */ var _components_HighLight__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/components/HighLight */ \\\"./src/components/HighLight.vue\\\");\\n/* harmony import */ var _components_ImageViewer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/components/ImageViewer */ \\\"./src/components/ImageViewer.vue\\\");\\n/* harmony import */ var _components_share_index__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @/components/share/index */ \\\"./src/components/share/index.js\\\");\\n\\n//\\n//\\n//\\n//\\n//\\n//\\n//\\n//\\n//\\n//\\n//\\n//\\n//\\n//\\n//\\n//\\n//\\n//\\n//\\n//\\n//\\n//\\n//\\n//\\n\\n\\n\\n\\n // import Share from '@/components/share/Share';\\n\\n\\n/* harmony default export */ __webpack_exports__[\\\"default\\\"] = ({\\n  computed: Object(_Users_MJ_web_project_1903B_Project1_wipi_node_modules_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\\\"default\\\"])({}, Object(vuex__WEBPACK_IMPORTED_MODULE_1__[\\\"mapState\\\"])({\\n    articleDetail: function articleDetail(state) {\\n      return state.article.articleDetail;\\n    }\\n  })),\\n  methods: Object(_Users_MJ_web_project_1903B_Project1_wipi_node_modules_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\\\"default\\\"])(Object(_Users_MJ_web_project_1903B_Project1_wipi_node_modules_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\\\"default\\\"])({}, Object(vuex__WEBPACK_IMPORTED_MODULE_1__[\\\"mapActions\\\"])({\\n    getArticleDetail: 'article/getArticleDetail'\\n  })), {}, {\\n    shareArticle: function shareArticle() {\\n      Object(_components_share_index__WEBPACK_IMPORTED_MODULE_6__[\\\"default\\\"])(this.articleDetail);\\n    }\\n  }),\\n  components: {\\n    LeftLayout: _components_LeftLayout__WEBPACK_IMPORTED_MODULE_2__[\\\"default\\\"],\\n    RightLayout: _components_RightLayout__WEBPACK_IMPORTED_MODULE_3__[\\\"default\\\"],\\n    HighLight: _components_HighLight__WEBPACK_IMPORTED_MODULE_4__[\\\"default\\\"],\\n    ImageViewer: _components_ImageViewer__WEBPACK_IMPORTED_MODULE_5__[\\\"default\\\"] // Share\\n\\n  },\\n  created: function created() {\\n    // debugger;\\n    var id = this.$route.params.id;\\n    this.getArticleDetail(id);\\n  }\\n});//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY2FjaGUtbG9hZGVyL2Rpc3QvY2pzLmpzPyEuL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4vbm9kZV9tb2R1bGVzL2NhY2hlLWxvYWRlci9kaXN0L2Nqcy5qcz8hLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/IS4vc3JjL3ZpZXdzL2FydGljbGUvRGV0YWlsLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vRGV0YWlsLnZ1ZT9hMmExIl0sInNvdXJjZXNDb250ZW50IjpbIjx0ZW1wbGF0ZT5cbiAgICA8ZGl2PlxuICAgICAgICA8bGVmdC1sYXlvdXQ+XG4gICAgICAgICAgICA8aW1hZ2Utdmlld2VyPlxuICAgICAgICAgICAgICAgIDxoaWdoLWxpZ2h0PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz1cImNvdmVyXCIgOnNyYz1cImFydGljbGVEZXRhaWwuY292ZXJcIiBhbHQ9XCJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxwPnt7YXJ0aWNsZURldGFpbC50aXRsZX19PC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHA+5Y+R5biD5LqOe3thcnRpY2xlRGV0YWlsLnB1Ymxpc2hBdCB8IGZvcm1hdERhdGUoJ1lZWVktTU0tREQnKX19IOKAoiDpmIXor7vph48ge3thcnRpY2xlRGV0YWlsLnZpZXdzfX08L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHYtaHRtbD1cImFydGljbGVEZXRhaWwuaHRtbFwiPjwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2hpZ2gtbGlnaHQ+XG4gICAgICAgICAgICA8L2ltYWdlLXZpZXdlcj5cbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBAY2xpY2s9XCJzaGFyZUFydGljbGVcIj7liIbkuqs8L2J1dHRvbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2xlZnQtbGF5b3V0PlxuICAgICAgICA8cmlnaHQtbGF5b3V0PlxuXG4gICAgICAgIDwvcmlnaHQtbGF5b3V0PlxuICAgICAgICA8IS0tIDxzaGFyZSAvPiAtLT5cbiAgICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQge21hcFN0YXRlLCBtYXBBY3Rpb25zfSBmcm9tICd2dWV4JztcbmltcG9ydCBMZWZ0TGF5b3V0IGZyb20gJ0AvY29tcG9uZW50cy9MZWZ0TGF5b3V0JztcbmltcG9ydCBSaWdodExheW91dCBmcm9tICdAL2NvbXBvbmVudHMvUmlnaHRMYXlvdXQnO1xuaW1wb3J0IEhpZ2hMaWdodCBmcm9tICdAL2NvbXBvbmVudHMvSGlnaExpZ2h0JztcbmltcG9ydCBJbWFnZVZpZXdlciBmcm9tICdAL2NvbXBvbmVudHMvSW1hZ2VWaWV3ZXInO1xuXG4vLyBpbXBvcnQgU2hhcmUgZnJvbSAnQC9jb21wb25lbnRzL3NoYXJlL1NoYXJlJztcbmltcG9ydCBzaGFyZSBmcm9tICdAL2NvbXBvbmVudHMvc2hhcmUvaW5kZXgnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgY29tcHV0ZWQ6IHtcbiAgICAgICAgLi4ubWFwU3RhdGUoe1xuICAgICAgICAgICAgYXJ0aWNsZURldGFpbDogc3RhdGU9PnN0YXRlLmFydGljbGUuYXJ0aWNsZURldGFpbFxuICAgICAgICB9KVxuICAgIH0sXG4gICAgbWV0aG9kczoge1xuICAgICAgICAuLi5tYXBBY3Rpb25zKHtcbiAgICAgICAgICAgIGdldEFydGljbGVEZXRhaWw6ICdhcnRpY2xlL2dldEFydGljbGVEZXRhaWwnXG4gICAgICAgIH0pLFxuICAgICAgICBzaGFyZUFydGljbGUoKXtcbiAgICAgICAgICAgIHNoYXJlKHRoaXMuYXJ0aWNsZURldGFpbCk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGNvbXBvbmVudHM6IHtcbiAgICAgICAgTGVmdExheW91dCxcbiAgICAgICAgUmlnaHRMYXlvdXQsXG4gICAgICAgIEhpZ2hMaWdodCxcbiAgICAgICAgSW1hZ2VWaWV3ZXIsXG4gICAgICAgIC8vIFNoYXJlXG4gICAgfSxcbiAgICBjcmVhdGVkKCl7XG4gICAgICAgIC8vIGRlYnVnZ2VyO1xuICAgICAgICBsZXQgaWQgPSB0aGlzLiRyb3V0ZS5wYXJhbXMuaWQ7XG4gICAgICAgIHRoaXMuZ2V0QXJ0aWNsZURldGFpbChpZCk7XG4gICAgfVxufVxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBsYW5nPVwic2Nzc1wiIHNjb3BlZD5cbi5jb3ZlcntcbiAgICB3aWR0aDogMTAwJTtcbn1cblxuPC9zdHlsZT4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXlCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFFQTtBQUFBO0FBQUE7QUFEQTtBQUlBO0FBRUE7QUFEQTtBQUdBO0FBQ0E7QUFDQTtBQU5BO0FBUUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTEE7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBekJBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///./node_modules/cache-loader/dist/cjs.js?!./node_modules/babel-loader/lib/index.js!./node_modules/cache-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/views/article/Detail.vue?vue&type=script&lang=js&\\n\");\n\n/***/ }),\n\n/***/ \"./node_modules/cache-loader/dist/cjs.js?{\\\"cacheDirectory\\\":\\\"node_modules/.cache/vue-loader\\\",\\\"cacheIdentifier\\\":\\\"97333fa8-vue-loader-template\\\"}!./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/cache-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/components/HighLight.vue?vue&type=template&id=b105aad8&\":\n/*!**************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\\\n  !*** ./node_modules/cache-loader/dist/cjs.js?{\"cacheDirectory\":\"node_modules/.cache/vue-loader\",\"cacheIdentifier\":\"97333fa8-vue-loader-template\"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/HighLight.vue?vue&type=template&id=b105aad8& ***!\n  \\**************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/\n/*! exports provided: render, staticRenderFns */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"render\\\", function() { return render; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"staticRenderFns\\\", function() { return staticRenderFns; });\\nvar render = function () {\\n  var _vm = this\\n  var _h = _vm.$createElement\\n  var _c = _vm._self._c || _h\\n  return _c(\\n    \\\"div\\\",\\n    { ref: \\\"container\\\", staticClass: \\\"markdown\\\" },\\n    [_vm._t(\\\"default\\\")],\\n    2\\n  )\\n}\\nvar staticRenderFns = []\\nrender._withStripped = true\\n\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY2FjaGUtbG9hZGVyL2Rpc3QvY2pzLmpzP3tcImNhY2hlRGlyZWN0b3J5XCI6XCJub2RlX21vZHVsZXMvLmNhY2hlL3Z1ZS1sb2FkZXJcIixcImNhY2hlSWRlbnRpZmllclwiOlwiOTczMzNmYTgtdnVlLWxvYWRlci10ZW1wbGF0ZVwifSEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3RlbXBsYXRlTG9hZGVyLmpzPyEuL25vZGVfbW9kdWxlcy9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/IS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPyEuL3NyYy9jb21wb25lbnRzL0hpZ2hMaWdodC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9YjEwNWFhZDgmLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvSGlnaExpZ2h0LnZ1ZT8xNTgzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciByZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBfdm0gPSB0aGlzXG4gIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgcmV0dXJuIF9jKFxuICAgIFwiZGl2XCIsXG4gICAgeyByZWY6IFwiY29udGFpbmVyXCIsIHN0YXRpY0NsYXNzOiBcIm1hcmtkb3duXCIgfSxcbiAgICBbX3ZtLl90KFwiZGVmYXVsdFwiKV0sXG4gICAgMlxuICApXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///./node_modules/cache-loader/dist/cjs.js?{\\\"cacheDirectory\\\":\\\"node_modules/.cache/vue-loader\\\",\\\"cacheIdentifier\\\":\\\"97333fa8-vue-loader-template\\\"}!./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/cache-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/components/HighLight.vue?vue&type=template&id=b105aad8&\\n\");\n\n/***/ }),\n\n/***/ \"./node_modules/cache-loader/dist/cjs.js?{\\\"cacheDirectory\\\":\\\"node_modules/.cache/vue-loader\\\",\\\"cacheIdentifier\\\":\\\"97333fa8-vue-loader-template\\\"}!./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/cache-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/components/ImageViewer.vue?vue&type=template&id=5567e6cd&\":\n/*!****************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\\\n  !*** ./node_modules/cache-loader/dist/cjs.js?{\"cacheDirectory\":\"node_modules/.cache/vue-loader\",\"cacheIdentifier\":\"97333fa8-vue-loader-template\"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/ImageViewer.vue?vue&type=template&id=5567e6cd& ***!\n  \\****************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/\n/*! exports provided: render, staticRenderFns */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"render\\\", function() { return render; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"staticRenderFns\\\", function() { return staticRenderFns; });\\nvar render = function () {\\n  var _vm = this\\n  var _h = _vm.$createElement\\n  var _c = _vm._self._c || _h\\n  return _c(\\\"div\\\", { ref: \\\"container\\\" }, [_vm._t(\\\"default\\\")], 2)\\n}\\nvar staticRenderFns = []\\nrender._withStripped = true\\n\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY2FjaGUtbG9hZGVyL2Rpc3QvY2pzLmpzP3tcImNhY2hlRGlyZWN0b3J5XCI6XCJub2RlX21vZHVsZXMvLmNhY2hlL3Z1ZS1sb2FkZXJcIixcImNhY2hlSWRlbnRpZmllclwiOlwiOTczMzNmYTgtdnVlLWxvYWRlci10ZW1wbGF0ZVwifSEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3RlbXBsYXRlTG9hZGVyLmpzPyEuL25vZGVfbW9kdWxlcy9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/IS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPyEuL3NyYy9jb21wb25lbnRzL0ltYWdlVmlld2VyLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD01NTY3ZTZjZCYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9JbWFnZVZpZXdlci52dWU/N2Y5YiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfYyhcImRpdlwiLCB7IHJlZjogXCJjb250YWluZXJcIiB9LCBbX3ZtLl90KFwiZGVmYXVsdFwiKV0sIDIpXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///./node_modules/cache-loader/dist/cjs.js?{\\\"cacheDirectory\\\":\\\"node_modules/.cache/vue-loader\\\",\\\"cacheIdentifier\\\":\\\"97333fa8-vue-loader-template\\\"}!./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/cache-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/components/ImageViewer.vue?vue&type=template&id=5567e6cd&\\n\");\n\n/***/ }),\n\n/***/ \"./node_modules/cache-loader/dist/cjs.js?{\\\"cacheDirectory\\\":\\\"node_modules/.cache/vue-loader\\\",\\\"cacheIdentifier\\\":\\\"97333fa8-vue-loader-template\\\"}!./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/cache-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/components/LeftLayout.vue?vue&type=template&id=2c05cfc1&\":\n/*!***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\\\n  !*** ./node_modules/cache-loader/dist/cjs.js?{\"cacheDirectory\":\"node_modules/.cache/vue-loader\",\"cacheIdentifier\":\"97333fa8-vue-loader-template\"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/LeftLayout.vue?vue&type=template&id=2c05cfc1& ***!\n  \\***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/\n/*! exports provided: render, staticRenderFns */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"render\\\", function() { return render; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"staticRenderFns\\\", function() { return staticRenderFns; });\\nvar render = function () {\\n  var _vm = this\\n  var _h = _vm.$createElement\\n  var _c = _vm._self._c || _h\\n  return _c(\\\"div\\\", { staticClass: \\\"left\\\" }, [_vm._t(\\\"default\\\")], 2)\\n}\\nvar staticRenderFns = []\\nrender._withStripped = true\\n\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY2FjaGUtbG9hZGVyL2Rpc3QvY2pzLmpzP3tcImNhY2hlRGlyZWN0b3J5XCI6XCJub2RlX21vZHVsZXMvLmNhY2hlL3Z1ZS1sb2FkZXJcIixcImNhY2hlSWRlbnRpZmllclwiOlwiOTczMzNmYTgtdnVlLWxvYWRlci10ZW1wbGF0ZVwifSEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3RlbXBsYXRlTG9hZGVyLmpzPyEuL25vZGVfbW9kdWxlcy9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/IS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPyEuL3NyYy9jb21wb25lbnRzL0xlZnRMYXlvdXQudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTJjMDVjZmMxJi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0xlZnRMYXlvdXQudnVlP2VkNDYiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIF92bSA9IHRoaXNcbiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICByZXR1cm4gX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJsZWZ0XCIgfSwgW192bS5fdChcImRlZmF1bHRcIildLCAyKVxufVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///./node_modules/cache-loader/dist/cjs.js?{\\\"cacheDirectory\\\":\\\"node_modules/.cache/vue-loader\\\",\\\"cacheIdentifier\\\":\\\"97333fa8-vue-loader-template\\\"}!./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/cache-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/components/LeftLayout.vue?vue&type=template&id=2c05cfc1&\\n\");\n\n/***/ }),\n\n/***/ \"./node_modules/cache-loader/dist/cjs.js?{\\\"cacheDirectory\\\":\\\"node_modules/.cache/vue-loader\\\",\\\"cacheIdentifier\\\":\\\"97333fa8-vue-loader-template\\\"}!./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/cache-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/components/RightLayout.vue?vue&type=template&id=98c18134&\":\n/*!****************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\\\n  !*** ./node_modules/cache-loader/dist/cjs.js?{\"cacheDirectory\":\"node_modules/.cache/vue-loader\",\"cacheIdentifier\":\"97333fa8-vue-loader-template\"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/RightLayout.vue?vue&type=template&id=98c18134& ***!\n  \\****************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/\n/*! exports provided: render, staticRenderFns */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"render\\\", function() { return render; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"staticRenderFns\\\", function() { return staticRenderFns; });\\nvar render = function () {\\n  var _vm = this\\n  var _h = _vm.$createElement\\n  var _c = _vm._self._c || _h\\n  return _c(\\\"div\\\", { staticClass: \\\"right\\\" }, [_vm._t(\\\"default\\\")], 2)\\n}\\nvar staticRenderFns = []\\nrender._withStripped = true\\n\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY2FjaGUtbG9hZGVyL2Rpc3QvY2pzLmpzP3tcImNhY2hlRGlyZWN0b3J5XCI6XCJub2RlX21vZHVsZXMvLmNhY2hlL3Z1ZS1sb2FkZXJcIixcImNhY2hlSWRlbnRpZmllclwiOlwiOTczMzNmYTgtdnVlLWxvYWRlci10ZW1wbGF0ZVwifSEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3RlbXBsYXRlTG9hZGVyLmpzPyEuL25vZGVfbW9kdWxlcy9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/IS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPyEuL3NyYy9jb21wb25lbnRzL1JpZ2h0TGF5b3V0LnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD05OGMxODEzNCYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9SaWdodExheW91dC52dWU/NDRhNyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcInJpZ2h0XCIgfSwgW192bS5fdChcImRlZmF1bHRcIildLCAyKVxufVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///./node_modules/cache-loader/dist/cjs.js?{\\\"cacheDirectory\\\":\\\"node_modules/.cache/vue-loader\\\",\\\"cacheIdentifier\\\":\\\"97333fa8-vue-loader-template\\\"}!./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/cache-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/components/RightLayout.vue?vue&type=template&id=98c18134&\\n\");\n\n/***/ }),\n\n/***/ \"./node_modules/cache-loader/dist/cjs.js?{\\\"cacheDirectory\\\":\\\"node_modules/.cache/vue-loader\\\",\\\"cacheIdentifier\\\":\\\"97333fa8-vue-loader-template\\\"}!./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/cache-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/components/share/Share.vue?vue&type=template&id=6a160fa2&scoped=true&\":\n/*!****************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\\\n  !*** ./node_modules/cache-loader/dist/cjs.js?{\"cacheDirectory\":\"node_modules/.cache/vue-loader\",\"cacheIdentifier\":\"97333fa8-vue-loader-template\"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/share/Share.vue?vue&type=template&id=6a160fa2&scoped=true& ***!\n  \\****************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/\n/*! exports provided: render, staticRenderFns */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"render\\\", function() { return render; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"staticRenderFns\\\", function() { return staticRenderFns; });\\nvar render = function () {\\n  var _vm = this\\n  var _h = _vm.$createElement\\n  var _c = _vm._self._c || _h\\n  return _c(\\n    \\\"el-dialog\\\",\\n    {\\n      ref: \\\"dialog\\\",\\n      attrs: { title: \\\"分享海报\\\", visible: _vm.dialogVisible, width: \\\"30%\\\" },\\n      on: {\\n        \\\"update:visible\\\": function ($event) {\\n          _vm.dialogVisible = $event\\n        },\\n      },\\n    },\\n    [\\n      _c(\\\"img\\\", { attrs: { src: _vm.item.cover, alt: \\\"\\\" } }),\\n      _c(\\\"p\\\", [_vm._v(_vm._s(_vm.item.title))]),\\n      _c(\\\"p\\\", [_vm._v(_vm._s(_vm.item.summary))]),\\n      _c(\\\"div\\\", [\\n        _c(\\\"div\\\", { domProps: { innerHTML: _vm._s(_vm.qrCode) } }),\\n        _c(\\\"div\\\", [\\n          _c(\\\"p\\\", [_vm._v(\\\"识别二维码查看文章\\\")]),\\n          _c(\\\"p\\\", [_vm._v(\\\"原文分享自\\\"), _c(\\\"span\\\", [_vm._v(\\\"小楼又清风\\\")])]),\\n        ]),\\n      ]),\\n      _vm._t(\\\"footer\\\", function () {\\n        return [\\n          _c(\\\"button\\\", [_vm._v(\\\"关闭\\\")]),\\n          _c(\\\"button\\\", { on: { click: _vm.genePoster } }, [_vm._v(\\\"下载\\\")]),\\n        ]\\n      }),\\n    ],\\n    2\\n  )\\n}\\nvar staticRenderFns = []\\nrender._withStripped = true\\n\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY2FjaGUtbG9hZGVyL2Rpc3QvY2pzLmpzP3tcImNhY2hlRGlyZWN0b3J5XCI6XCJub2RlX21vZHVsZXMvLmNhY2hlL3Z1ZS1sb2FkZXJcIixcImNhY2hlSWRlbnRpZmllclwiOlwiOTczMzNmYTgtdnVlLWxvYWRlci10ZW1wbGF0ZVwifSEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3RlbXBsYXRlTG9hZGVyLmpzPyEuL25vZGVfbW9kdWxlcy9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/IS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPyEuL3NyYy9jb21wb25lbnRzL3NoYXJlL1NoYXJlLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD02YTE2MGZhMiZzY29wZWQ9dHJ1ZSYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9zaGFyZS9TaGFyZS52dWU/Nzk4OCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfYyhcbiAgICBcImVsLWRpYWxvZ1wiLFxuICAgIHtcbiAgICAgIHJlZjogXCJkaWFsb2dcIixcbiAgICAgIGF0dHJzOiB7IHRpdGxlOiBcIuWIhuS6q+a1t+aKpVwiLCB2aXNpYmxlOiBfdm0uZGlhbG9nVmlzaWJsZSwgd2lkdGg6IFwiMzAlXCIgfSxcbiAgICAgIG9uOiB7XG4gICAgICAgIFwidXBkYXRlOnZpc2libGVcIjogZnVuY3Rpb24gKCRldmVudCkge1xuICAgICAgICAgIF92bS5kaWFsb2dWaXNpYmxlID0gJGV2ZW50XG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0sXG4gICAgW1xuICAgICAgX2MoXCJpbWdcIiwgeyBhdHRyczogeyBzcmM6IF92bS5pdGVtLmNvdmVyLCBhbHQ6IFwiXCIgfSB9KSxcbiAgICAgIF9jKFwicFwiLCBbX3ZtLl92KF92bS5fcyhfdm0uaXRlbS50aXRsZSkpXSksXG4gICAgICBfYyhcInBcIiwgW192bS5fdihfdm0uX3MoX3ZtLml0ZW0uc3VtbWFyeSkpXSksXG4gICAgICBfYyhcImRpdlwiLCBbXG4gICAgICAgIF9jKFwiZGl2XCIsIHsgZG9tUHJvcHM6IHsgaW5uZXJIVE1MOiBfdm0uX3MoX3ZtLnFyQ29kZSkgfSB9KSxcbiAgICAgICAgX2MoXCJkaXZcIiwgW1xuICAgICAgICAgIF9jKFwicFwiLCBbX3ZtLl92KFwi6K+G5Yir5LqM57u056CB5p+l55yL5paH56ugXCIpXSksXG4gICAgICAgICAgX2MoXCJwXCIsIFtfdm0uX3YoXCLljp/mlofliIbkuqvoh6pcIiksIF9jKFwic3BhblwiLCBbX3ZtLl92KFwi5bCP5qW85Y+I5riF6aOOXCIpXSldKSxcbiAgICAgICAgXSksXG4gICAgICBdKSxcbiAgICAgIF92bS5fdChcImZvb3RlclwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgX2MoXCJidXR0b25cIiwgW192bS5fdihcIuWFs+mXrVwiKV0pLFxuICAgICAgICAgIF9jKFwiYnV0dG9uXCIsIHsgb246IHsgY2xpY2s6IF92bS5nZW5lUG9zdGVyIH0gfSwgW192bS5fdihcIuS4i+i9vVwiKV0pLFxuICAgICAgICBdXG4gICAgICB9KSxcbiAgICBdLFxuICAgIDJcbiAgKVxufVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///./node_modules/cache-loader/dist/cjs.js?{\\\"cacheDirectory\\\":\\\"node_modules/.cache/vue-loader\\\",\\\"cacheIdentifier\\\":\\\"97333fa8-vue-loader-template\\\"}!./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/cache-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/components/share/Share.vue?vue&type=template&id=6a160fa2&scoped=true&\\n\");\n\n/***/ }),\n\n/***/ \"./node_modules/cache-loader/dist/cjs.js?{\\\"cacheDirectory\\\":\\\"node_modules/.cache/vue-loader\\\",\\\"cacheIdentifier\\\":\\\"97333fa8-vue-loader-template\\\"}!./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/cache-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/views/article/Detail.vue?vue&type=template&id=f1283178&scoped=true&\":\n/*!**************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\\\n  !*** ./node_modules/cache-loader/dist/cjs.js?{\"cacheDirectory\":\"node_modules/.cache/vue-loader\",\"cacheIdentifier\":\"97333fa8-vue-loader-template\"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/views/article/Detail.vue?vue&type=template&id=f1283178&scoped=true& ***!\n  \\**************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/\n/*! exports provided: render, staticRenderFns */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"render\\\", function() { return render; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"staticRenderFns\\\", function() { return staticRenderFns; });\\nvar render = function () {\\n  var _vm = this\\n  var _h = _vm.$createElement\\n  var _c = _vm._self._c || _h\\n  return _c(\\n    \\\"div\\\",\\n    [\\n      _c(\\n        \\\"left-layout\\\",\\n        [\\n          _c(\\n            \\\"image-viewer\\\",\\n            [\\n              _c(\\\"high-light\\\", [\\n                _c(\\\"div\\\", [\\n                  _c(\\\"img\\\", {\\n                    staticClass: \\\"cover\\\",\\n                    attrs: { src: _vm.articleDetail.cover, alt: \\\"\\\" },\\n                  }),\\n                  _c(\\\"p\\\", [_vm._v(_vm._s(_vm.articleDetail.title))]),\\n                  _c(\\\"p\\\", [\\n                    _vm._v(\\n                      \\\"发布于\\\" +\\n                        _vm._s(\\n                          _vm._f(\\\"formatDate\\\")(\\n                            _vm.articleDetail.publishAt,\\n                            \\\"YYYY-MM-DD\\\"\\n                          )\\n                        ) +\\n                        \\\" • 阅读量 \\\" +\\n                        _vm._s(_vm.articleDetail.views)\\n                    ),\\n                  ]),\\n                  _c(\\\"div\\\", {\\n                    domProps: { innerHTML: _vm._s(_vm.articleDetail.html) },\\n                  }),\\n                ]),\\n              ]),\\n            ],\\n            1\\n          ),\\n          _c(\\\"div\\\", [\\n            _c(\\\"button\\\", { on: { click: _vm.shareArticle } }, [_vm._v(\\\"分享\\\")]),\\n          ]),\\n        ],\\n        1\\n      ),\\n      _c(\\\"right-layout\\\"),\\n    ],\\n    1\\n  )\\n}\\nvar staticRenderFns = []\\nrender._withStripped = true\\n\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY2FjaGUtbG9hZGVyL2Rpc3QvY2pzLmpzP3tcImNhY2hlRGlyZWN0b3J5XCI6XCJub2RlX21vZHVsZXMvLmNhY2hlL3Z1ZS1sb2FkZXJcIixcImNhY2hlSWRlbnRpZmllclwiOlwiOTczMzNmYTgtdnVlLWxvYWRlci10ZW1wbGF0ZVwifSEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3RlbXBsYXRlTG9hZGVyLmpzPyEuL25vZGVfbW9kdWxlcy9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/IS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPyEuL3NyYy92aWV3cy9hcnRpY2xlL0RldGFpbC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9ZjEyODMxNzgmc2NvcGVkPXRydWUmLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdzL2FydGljbGUvRGV0YWlsLnZ1ZT81YTI4Il0sInNvdXJjZXNDb250ZW50IjpbInZhciByZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBfdm0gPSB0aGlzXG4gIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgcmV0dXJuIF9jKFxuICAgIFwiZGl2XCIsXG4gICAgW1xuICAgICAgX2MoXG4gICAgICAgIFwibGVmdC1sYXlvdXRcIixcbiAgICAgICAgW1xuICAgICAgICAgIF9jKFxuICAgICAgICAgICAgXCJpbWFnZS12aWV3ZXJcIixcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgX2MoXCJoaWdoLWxpZ2h0XCIsIFtcbiAgICAgICAgICAgICAgICBfYyhcImRpdlwiLCBbXG4gICAgICAgICAgICAgICAgICBfYyhcImltZ1wiLCB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImNvdmVyXCIsXG4gICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHNyYzogX3ZtLmFydGljbGVEZXRhaWwuY292ZXIsIGFsdDogXCJcIiB9LFxuICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICBfYyhcInBcIiwgW192bS5fdihfdm0uX3MoX3ZtLmFydGljbGVEZXRhaWwudGl0bGUpKV0pLFxuICAgICAgICAgICAgICAgICAgX2MoXCJwXCIsIFtcbiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgICAgIFwi5Y+R5biD5LqOXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl9zKFxuICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX2YoXCJmb3JtYXREYXRlXCIpKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5hcnRpY2xlRGV0YWlsLnB1Ymxpc2hBdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIllZWVktTU0tRERcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICApICtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiIOKAoiDpmIXor7vph48gXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl9zKF92bS5hcnRpY2xlRGV0YWlsLnZpZXdzKVxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICBfYyhcImRpdlwiLCB7XG4gICAgICAgICAgICAgICAgICAgIGRvbVByb3BzOiB7IGlubmVySFRNTDogX3ZtLl9zKF92bS5hcnRpY2xlRGV0YWlsLmh0bWwpIH0sXG4gICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgMVxuICAgICAgICAgICksXG4gICAgICAgICAgX2MoXCJkaXZcIiwgW1xuICAgICAgICAgICAgX2MoXCJidXR0b25cIiwgeyBvbjogeyBjbGljazogX3ZtLnNoYXJlQXJ0aWNsZSB9IH0sIFtfdm0uX3YoXCLliIbkuqtcIildKSxcbiAgICAgICAgICBdKSxcbiAgICAgICAgXSxcbiAgICAgICAgMVxuICAgICAgKSxcbiAgICAgIF9jKFwicmlnaHQtbGF5b3V0XCIpLFxuICAgIF0sXG4gICAgMVxuICApXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///./node_modules/cache-loader/dist/cjs.js?{\\\"cacheDirectory\\\":\\\"node_modules/.cache/vue-loader\\\",\\\"cacheIdentifier\\\":\\\"97333fa8-vue-loader-template\\\"}!./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/cache-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/views/article/Detail.vue?vue&type=template&id=f1283178&scoped=true&\\n\");\n\n/***/ }),\n\n/***/ \"./node_modules/copy-to-clipboard/index.js\":\n/*!*************************************************!*\\\n  !*** ./node_modules/copy-to-clipboard/index.js ***!\n  \\*************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\neval(\"\\n\\nvar deselectCurrent = __webpack_require__(/*! toggle-selection */ \\\"./node_modules/toggle-selection/index.js\\\");\\n\\nvar clipboardToIE11Formatting = {\\n  \\\"text/plain\\\": \\\"Text\\\",\\n  \\\"text/html\\\": \\\"Url\\\",\\n  \\\"default\\\": \\\"Text\\\"\\n}\\n\\nvar defaultMessage = \\\"Copy to clipboard: #{key}, Enter\\\";\\n\\nfunction format(message) {\\n  var copyKey = (/mac os x/i.test(navigator.userAgent) ? \\\"⌘\\\" : \\\"Ctrl\\\") + \\\"+C\\\";\\n  return message.replace(/#{\\\\s*key\\\\s*}/g, copyKey);\\n}\\n\\nfunction copy(text, options) {\\n  var debug,\\n    message,\\n    reselectPrevious,\\n    range,\\n    selection,\\n    mark,\\n    success = false;\\n  if (!options) {\\n    options = {};\\n  }\\n  debug = options.debug || false;\\n  try {\\n    reselectPrevious = deselectCurrent();\\n\\n    range = document.createRange();\\n    selection = document.getSelection();\\n\\n    mark = document.createElement(\\\"span\\\");\\n    mark.textContent = text;\\n    // reset user styles for span element\\n    mark.style.all = \\\"unset\\\";\\n    // prevents scrolling to the end of the page\\n    mark.style.position = \\\"fixed\\\";\\n    mark.style.top = 0;\\n    mark.style.clip = \\\"rect(0, 0, 0, 0)\\\";\\n    // used to preserve spaces and line breaks\\n    mark.style.whiteSpace = \\\"pre\\\";\\n    // do not inherit user-select (it may be `none`)\\n    mark.style.webkitUserSelect = \\\"text\\\";\\n    mark.style.MozUserSelect = \\\"text\\\";\\n    mark.style.msUserSelect = \\\"text\\\";\\n    mark.style.userSelect = \\\"text\\\";\\n    mark.addEventListener(\\\"copy\\\", function(e) {\\n      e.stopPropagation();\\n      if (options.format) {\\n        e.preventDefault();\\n        if (typeof e.clipboardData === \\\"undefined\\\") { // IE 11\\n          debug && console.warn(\\\"unable to use e.clipboardData\\\");\\n          debug && console.warn(\\\"trying IE specific stuff\\\");\\n          window.clipboardData.clearData();\\n          var format = clipboardToIE11Formatting[options.format] || clipboardToIE11Formatting[\\\"default\\\"]\\n          window.clipboardData.setData(format, text);\\n        } else { // all other browsers\\n          e.clipboardData.clearData();\\n          e.clipboardData.setData(options.format, text);\\n        }\\n      }\\n      if (options.onCopy) {\\n        e.preventDefault();\\n        options.onCopy(e.clipboardData);\\n      }\\n    });\\n\\n    document.body.appendChild(mark);\\n\\n    range.selectNodeContents(mark);\\n    selection.addRange(range);\\n\\n    var successful = document.execCommand(\\\"copy\\\");\\n    if (!successful) {\\n      throw new Error(\\\"copy command was unsuccessful\\\");\\n    }\\n    success = true;\\n  } catch (err) {\\n    debug && console.error(\\\"unable to copy using execCommand: \\\", err);\\n    debug && console.warn(\\\"trying IE specific stuff\\\");\\n    try {\\n      window.clipboardData.setData(options.format || \\\"text\\\", text);\\n      options.onCopy && options.onCopy(window.clipboardData);\\n      success = true;\\n    } catch (err) {\\n      debug && console.error(\\\"unable to copy using clipboardData: \\\", err);\\n      debug && console.error(\\\"falling back to prompt\\\");\\n      message = format(\\\"message\\\" in options ? options.message : defaultMessage);\\n      window.prompt(message, text);\\n    }\\n  } finally {\\n    if (selection) {\\n      if (typeof selection.removeRange == \\\"function\\\") {\\n        selection.removeRange(range);\\n      } else {\\n        selection.removeAllRanges();\\n      }\\n    }\\n\\n    if (mark) {\\n      document.body.removeChild(mark);\\n    }\\n    reselectPrevious();\\n  }\\n\\n  return success;\\n}\\n\\nmodule.exports = copy;\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY29weS10by1jbGlwYm9hcmQvaW5kZXguanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29weS10by1jbGlwYm9hcmQvaW5kZXguanM/ZjkwNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIGRlc2VsZWN0Q3VycmVudCA9IHJlcXVpcmUoXCJ0b2dnbGUtc2VsZWN0aW9uXCIpO1xuXG52YXIgY2xpcGJvYXJkVG9JRTExRm9ybWF0dGluZyA9IHtcbiAgXCJ0ZXh0L3BsYWluXCI6IFwiVGV4dFwiLFxuICBcInRleHQvaHRtbFwiOiBcIlVybFwiLFxuICBcImRlZmF1bHRcIjogXCJUZXh0XCJcbn1cblxudmFyIGRlZmF1bHRNZXNzYWdlID0gXCJDb3B5IHRvIGNsaXBib2FyZDogI3trZXl9LCBFbnRlclwiO1xuXG5mdW5jdGlvbiBmb3JtYXQobWVzc2FnZSkge1xuICB2YXIgY29weUtleSA9ICgvbWFjIG9zIHgvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpID8gXCLijJhcIiA6IFwiQ3RybFwiKSArIFwiK0NcIjtcbiAgcmV0dXJuIG1lc3NhZ2UucmVwbGFjZSgvI3tcXHMqa2V5XFxzKn0vZywgY29weUtleSk7XG59XG5cbmZ1bmN0aW9uIGNvcHkodGV4dCwgb3B0aW9ucykge1xuICB2YXIgZGVidWcsXG4gICAgbWVzc2FnZSxcbiAgICByZXNlbGVjdFByZXZpb3VzLFxuICAgIHJhbmdlLFxuICAgIHNlbGVjdGlvbixcbiAgICBtYXJrLFxuICAgIHN1Y2Nlc3MgPSBmYWxzZTtcbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG4gIGRlYnVnID0gb3B0aW9ucy5kZWJ1ZyB8fCBmYWxzZTtcbiAgdHJ5IHtcbiAgICByZXNlbGVjdFByZXZpb3VzID0gZGVzZWxlY3RDdXJyZW50KCk7XG5cbiAgICByYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XG4gICAgc2VsZWN0aW9uID0gZG9jdW1lbnQuZ2V0U2VsZWN0aW9uKCk7XG5cbiAgICBtYXJrID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgbWFyay50ZXh0Q29udGVudCA9IHRleHQ7XG4gICAgLy8gcmVzZXQgdXNlciBzdHlsZXMgZm9yIHNwYW4gZWxlbWVudFxuICAgIG1hcmsuc3R5bGUuYWxsID0gXCJ1bnNldFwiO1xuICAgIC8vIHByZXZlbnRzIHNjcm9sbGluZyB0byB0aGUgZW5kIG9mIHRoZSBwYWdlXG4gICAgbWFyay5zdHlsZS5wb3NpdGlvbiA9IFwiZml4ZWRcIjtcbiAgICBtYXJrLnN0eWxlLnRvcCA9IDA7XG4gICAgbWFyay5zdHlsZS5jbGlwID0gXCJyZWN0KDAsIDAsIDAsIDApXCI7XG4gICAgLy8gdXNlZCB0byBwcmVzZXJ2ZSBzcGFjZXMgYW5kIGxpbmUgYnJlYWtzXG4gICAgbWFyay5zdHlsZS53aGl0ZVNwYWNlID0gXCJwcmVcIjtcbiAgICAvLyBkbyBub3QgaW5oZXJpdCB1c2VyLXNlbGVjdCAoaXQgbWF5IGJlIGBub25lYClcbiAgICBtYXJrLnN0eWxlLndlYmtpdFVzZXJTZWxlY3QgPSBcInRleHRcIjtcbiAgICBtYXJrLnN0eWxlLk1velVzZXJTZWxlY3QgPSBcInRleHRcIjtcbiAgICBtYXJrLnN0eWxlLm1zVXNlclNlbGVjdCA9IFwidGV4dFwiO1xuICAgIG1hcmsuc3R5bGUudXNlclNlbGVjdCA9IFwidGV4dFwiO1xuICAgIG1hcmsuYWRkRXZlbnRMaXN0ZW5lcihcImNvcHlcIiwgZnVuY3Rpb24oZSkge1xuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIGlmIChvcHRpb25zLmZvcm1hdCkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGlmICh0eXBlb2YgZS5jbGlwYm9hcmREYXRhID09PSBcInVuZGVmaW5lZFwiKSB7IC8vIElFIDExXG4gICAgICAgICAgZGVidWcgJiYgY29uc29sZS53YXJuKFwidW5hYmxlIHRvIHVzZSBlLmNsaXBib2FyZERhdGFcIik7XG4gICAgICAgICAgZGVidWcgJiYgY29uc29sZS53YXJuKFwidHJ5aW5nIElFIHNwZWNpZmljIHN0dWZmXCIpO1xuICAgICAgICAgIHdpbmRvdy5jbGlwYm9hcmREYXRhLmNsZWFyRGF0YSgpO1xuICAgICAgICAgIHZhciBmb3JtYXQgPSBjbGlwYm9hcmRUb0lFMTFGb3JtYXR0aW5nW29wdGlvbnMuZm9ybWF0XSB8fCBjbGlwYm9hcmRUb0lFMTFGb3JtYXR0aW5nW1wiZGVmYXVsdFwiXVxuICAgICAgICAgIHdpbmRvdy5jbGlwYm9hcmREYXRhLnNldERhdGEoZm9ybWF0LCB0ZXh0KTtcbiAgICAgICAgfSBlbHNlIHsgLy8gYWxsIG90aGVyIGJyb3dzZXJzXG4gICAgICAgICAgZS5jbGlwYm9hcmREYXRhLmNsZWFyRGF0YSgpO1xuICAgICAgICAgIGUuY2xpcGJvYXJkRGF0YS5zZXREYXRhKG9wdGlvbnMuZm9ybWF0LCB0ZXh0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG9wdGlvbnMub25Db3B5KSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgb3B0aW9ucy5vbkNvcHkoZS5jbGlwYm9hcmREYXRhKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobWFyayk7XG5cbiAgICByYW5nZS5zZWxlY3ROb2RlQ29udGVudHMobWFyayk7XG4gICAgc2VsZWN0aW9uLmFkZFJhbmdlKHJhbmdlKTtcblxuICAgIHZhciBzdWNjZXNzZnVsID0gZG9jdW1lbnQuZXhlY0NvbW1hbmQoXCJjb3B5XCIpO1xuICAgIGlmICghc3VjY2Vzc2Z1bCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiY29weSBjb21tYW5kIHdhcyB1bnN1Y2Nlc3NmdWxcIik7XG4gICAgfVxuICAgIHN1Y2Nlc3MgPSB0cnVlO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBkZWJ1ZyAmJiBjb25zb2xlLmVycm9yKFwidW5hYmxlIHRvIGNvcHkgdXNpbmcgZXhlY0NvbW1hbmQ6IFwiLCBlcnIpO1xuICAgIGRlYnVnICYmIGNvbnNvbGUud2FybihcInRyeWluZyBJRSBzcGVjaWZpYyBzdHVmZlwiKTtcbiAgICB0cnkge1xuICAgICAgd2luZG93LmNsaXBib2FyZERhdGEuc2V0RGF0YShvcHRpb25zLmZvcm1hdCB8fCBcInRleHRcIiwgdGV4dCk7XG4gICAgICBvcHRpb25zLm9uQ29weSAmJiBvcHRpb25zLm9uQ29weSh3aW5kb3cuY2xpcGJvYXJkRGF0YSk7XG4gICAgICBzdWNjZXNzID0gdHJ1ZTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGRlYnVnICYmIGNvbnNvbGUuZXJyb3IoXCJ1bmFibGUgdG8gY29weSB1c2luZyBjbGlwYm9hcmREYXRhOiBcIiwgZXJyKTtcbiAgICAgIGRlYnVnICYmIGNvbnNvbGUuZXJyb3IoXCJmYWxsaW5nIGJhY2sgdG8gcHJvbXB0XCIpO1xuICAgICAgbWVzc2FnZSA9IGZvcm1hdChcIm1lc3NhZ2VcIiBpbiBvcHRpb25zID8gb3B0aW9ucy5tZXNzYWdlIDogZGVmYXVsdE1lc3NhZ2UpO1xuICAgICAgd2luZG93LnByb21wdChtZXNzYWdlLCB0ZXh0KTtcbiAgICB9XG4gIH0gZmluYWxseSB7XG4gICAgaWYgKHNlbGVjdGlvbikge1xuICAgICAgaWYgKHR5cGVvZiBzZWxlY3Rpb24ucmVtb3ZlUmFuZ2UgPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHNlbGVjdGlvbi5yZW1vdmVSYW5nZShyYW5nZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZWxlY3Rpb24ucmVtb3ZlQWxsUmFuZ2VzKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG1hcmspIHtcbiAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQobWFyayk7XG4gICAgfVxuICAgIHJlc2VsZWN0UHJldmlvdXMoKTtcbiAgfVxuXG4gIHJldHVybiBzdWNjZXNzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvcHk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///./node_modules/copy-to-clipboard/index.js\\n\");\n\n/***/ }),\n\n/***/ \"./node_modules/core-js/modules/es.object.get-own-property-descriptor.js\":\n/*!*******************************************************************************!*\\\n  !*** ./node_modules/core-js/modules/es.object.get-own-property-descriptor.js ***!\n  \\*******************************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\neval(\"var $ = __webpack_require__(/*! ../internals/export */ \\\"./node_modules/core-js/internals/export.js\\\");\\nvar fails = __webpack_require__(/*! ../internals/fails */ \\\"./node_modules/core-js/internals/fails.js\\\");\\nvar toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ \\\"./node_modules/core-js/internals/to-indexed-object.js\\\");\\nvar nativeGetOwnPropertyDescriptor = __webpack_require__(/*! ../internals/object-get-own-property-descriptor */ \\\"./node_modules/core-js/internals/object-get-own-property-descriptor.js\\\").f;\\nvar DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ \\\"./node_modules/core-js/internals/descriptors.js\\\");\\n\\nvar FAILS_ON_PRIMITIVES = fails(function () { nativeGetOwnPropertyDescriptor(1); });\\nvar FORCED = !DESCRIPTORS || FAILS_ON_PRIMITIVES;\\n\\n// `Object.getOwnPropertyDescriptor` method\\n// https://tc39.es/ecma262/#sec-object.getownpropertydescriptor\\n$({ target: 'Object', stat: true, forced: FORCED, sham: !DESCRIPTORS }, {\\n  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(it, key) {\\n    return nativeGetOwnPropertyDescriptor(toIndexedObject(it), key);\\n  }\\n});\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanM/ZTQzOSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJykuZjtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xuXG52YXIgRkFJTFNfT05fUFJJTUlUSVZFUyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsgbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKDEpOyB9KTtcbnZhciBGT1JDRUQgPSAhREVTQ1JJUFRPUlMgfHwgRkFJTFNfT05fUFJJTUlUSVZFUztcblxuLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQsIHNoYW06ICFERVNDUklQVE9SUyB9LCB7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpIHtcbiAgICByZXR1cm4gbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRvSW5kZXhlZE9iamVjdChpdCksIGtleSk7XG4gIH1cbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///./node_modules/core-js/modules/es.object.get-own-property-descriptor.js\\n\");\n\n/***/ }),\n\n/***/ \"./node_modules/core-js/modules/es.object.get-own-property-descriptors.js\":\n/*!********************************************************************************!*\\\n  !*** ./node_modules/core-js/modules/es.object.get-own-property-descriptors.js ***!\n  \\********************************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\neval(\"var $ = __webpack_require__(/*! ../internals/export */ \\\"./node_modules/core-js/internals/export.js\\\");\\nvar DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ \\\"./node_modules/core-js/internals/descriptors.js\\\");\\nvar ownKeys = __webpack_require__(/*! ../internals/own-keys */ \\\"./node_modules/core-js/internals/own-keys.js\\\");\\nvar toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ \\\"./node_modules/core-js/internals/to-indexed-object.js\\\");\\nvar getOwnPropertyDescriptorModule = __webpack_require__(/*! ../internals/object-get-own-property-descriptor */ \\\"./node_modules/core-js/internals/object-get-own-property-descriptor.js\\\");\\nvar createProperty = __webpack_require__(/*! ../internals/create-property */ \\\"./node_modules/core-js/internals/create-property.js\\\");\\n\\n// `Object.getOwnPropertyDescriptors` method\\n// https://tc39.es/ecma262/#sec-object.getownpropertydescriptors\\n$({ target: 'Object', stat: true, sham: !DESCRIPTORS }, {\\n  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {\\n    var O = toIndexedObject(object);\\n    var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;\\n    var keys = ownKeys(O);\\n    var result = {};\\n    var index = 0;\\n    var key, descriptor;\\n    while (keys.length > index) {\\n      descriptor = getOwnPropertyDescriptor(O, key = keys[index++]);\\n      if (descriptor !== undefined) createProperty(result, key, descriptor);\\n    }\\n    return result;\\n  }\\n});\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9ycy5qcz9kYmI0Il0sInNvdXJjZXNDb250ZW50IjpbInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgb3duS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vd24ta2V5cycpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG5cbi8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JzXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgc2hhbTogIURFU0NSSVBUT1JTIH0sIHtcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yczogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhvYmplY3QpIHtcbiAgICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdChvYmplY3QpO1xuICAgIHZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZjtcbiAgICB2YXIga2V5cyA9IG93bktleXMoTyk7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGtleSwgZGVzY3JpcHRvcjtcbiAgICB3aGlsZSAoa2V5cy5sZW5ndGggPiBpbmRleCkge1xuICAgICAgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBrZXkgPSBrZXlzW2luZGV4KytdKTtcbiAgICAgIGlmIChkZXNjcmlwdG9yICE9PSB1bmRlZmluZWQpIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwga2V5LCBkZXNjcmlwdG9yKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///./node_modules/core-js/modules/es.object.get-own-property-descriptors.js\\n\");\n\n/***/ }),\n\n/***/ \"./node_modules/css-loader/dist/cjs.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/dist/cjs.js?!./node_modules/cache-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/components/HighLight.vue?vue&type=style&index=0&style=scoped&lang=scss&\":\n/*!***********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\\\n  !*** ./node_modules/css-loader/dist/cjs.js??ref--9-oneOf-1-1!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--9-oneOf-1-2!./node_modules/sass-loader/dist/cjs.js??ref--9-oneOf-1-3!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/HighLight.vue?vue&type=style&index=0&style=scoped&lang=scss& ***!\n  \\***********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\neval(\"// Imports\\nvar ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ \\\"./node_modules/css-loader/dist/runtime/api.js\\\");\\nexports = ___CSS_LOADER_API_IMPORT___(false);\\n// Module\\nexports.push([module.i, \\\".copy {\\\\n  position: absolute;\\\\n  right: 5px;\\\\n  top: 4px;\\\\n  font-size: 12px;\\\\n  transform: scale(0.9);\\\\n  color: rgba(140, 140, 140, 0.8);\\\\n  cursor: pointer;\\\\n}\\\\n\\\", \\\"\\\"]);\\n// Exports\\nmodule.exports = exports;\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8hLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPyEuL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8hLi9ub2RlX21vZHVsZXMvY2FjaGUtbG9hZGVyL2Rpc3QvY2pzLmpzPyEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8hLi9zcmMvY29tcG9uZW50cy9IaWdoTGlnaHQudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmc3R5bGU9c2NvcGVkJmxhbmc9c2NzcyYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9IaWdoTGlnaHQudnVlPzliMmIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xudmFyIF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpO1xuZXhwb3J0cyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5jb3B5IHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHJpZ2h0OiA1cHg7XFxuICB0b3A6IDRweDtcXG4gIGZvbnQtc2l6ZTogMTJweDtcXG4gIHRyYW5zZm9ybTogc2NhbGUoMC45KTtcXG4gIGNvbG9yOiByZ2JhKDE0MCwgMTQwLCAxNDAsIDAuOCk7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblwiLCBcIlwiXSk7XG4vLyBFeHBvcnRzXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHM7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///./node_modules/css-loader/dist/cjs.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/dist/cjs.js?!./node_modules/cache-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/components/HighLight.vue?vue&type=style&index=0&style=scoped&lang=scss&\\n\");\n\n/***/ }),\n\n/***/ \"./node_modules/css-loader/dist/cjs.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/dist/cjs.js?!./node_modules/cache-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/components/share/Share.vue?vue&type=style&index=0&id=6a160fa2&lang=scss&scoped=true&\":\n/*!************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\\\n  !*** ./node_modules/css-loader/dist/cjs.js??ref--9-oneOf-1-1!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--9-oneOf-1-2!./node_modules/sass-loader/dist/cjs.js??ref--9-oneOf-1-3!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/share/Share.vue?vue&type=style&index=0&id=6a160fa2&lang=scss&scoped=true& ***!\n  \\************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\neval(\"// Imports\\nvar ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/api.js */ \\\"./node_modules/css-loader/dist/runtime/api.js\\\");\\nexports = ___CSS_LOADER_API_IMPORT___(false);\\n// Module\\nexports.push([module.i, \\\"img[data-v-6a160fa2] {\\\\n  width: 100%;\\\\n}\\\\n\\\", \\\"\\\"]);\\n// Exports\\nmodule.exports = exports;\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8hLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPyEuL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8hLi9ub2RlX21vZHVsZXMvY2FjaGUtbG9hZGVyL2Rpc3QvY2pzLmpzPyEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8hLi9zcmMvY29tcG9uZW50cy9zaGFyZS9TaGFyZS52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD02YTE2MGZhMiZsYW5nPXNjc3Mmc2NvcGVkPXRydWUmLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvc2hhcmUvU2hhcmUudnVlPzQ4ODIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xudmFyIF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpO1xuZXhwb3J0cyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcImltZ1tkYXRhLXYtNmExNjBmYTJdIHtcXG4gIHdpZHRoOiAxMDAlO1xcbn1cXG5cIiwgXCJcIl0pO1xuLy8gRXhwb3J0c1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///./node_modules/css-loader/dist/cjs.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/dist/cjs.js?!./node_modules/cache-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/components/share/Share.vue?vue&type=style&index=0&id=6a160fa2&lang=scss&scoped=true&\\n\");\n\n/***/ }),\n\n/***/ \"./node_modules/css-loader/dist/cjs.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/dist/cjs.js?!./node_modules/cache-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/views/article/Detail.vue?vue&type=style&index=0&id=f1283178&lang=scss&scoped=true&\":\n/*!**********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\\\n  !*** ./node_modules/css-loader/dist/cjs.js??ref--9-oneOf-1-1!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--9-oneOf-1-2!./node_modules/sass-loader/dist/cjs.js??ref--9-oneOf-1-3!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/views/article/Detail.vue?vue&type=style&index=0&id=f1283178&lang=scss&scoped=true& ***!\n  \\**********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\neval(\"// Imports\\nvar ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/api.js */ \\\"./node_modules/css-loader/dist/runtime/api.js\\\");\\nexports = ___CSS_LOADER_API_IMPORT___(false);\\n// Module\\nexports.push([module.i, \\\".cover[data-v-f1283178] {\\\\n  width: 100%;\\\\n}\\\\n\\\", \\\"\\\"]);\\n// Exports\\nmodule.exports = exports;\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8hLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPyEuL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8hLi9ub2RlX21vZHVsZXMvY2FjaGUtbG9hZGVyL2Rpc3QvY2pzLmpzPyEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8hLi9zcmMvdmlld3MvYXJ0aWNsZS9EZXRhaWwudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9ZjEyODMxNzgmbGFuZz1zY3NzJnNjb3BlZD10cnVlJi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy92aWV3cy9hcnRpY2xlL0RldGFpbC52dWU/M2E4ZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG52YXIgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIik7XG5leHBvcnRzID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLmNvdmVyW2RhdGEtdi1mMTI4MzE3OF0ge1xcbiAgd2lkdGg6IDEwMCU7XFxufVxcblwiLCBcIlwiXSk7XG4vLyBFeHBvcnRzXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHM7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///./node_modules/css-loader/dist/cjs.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/dist/cjs.js?!./node_modules/cache-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/views/article/Detail.vue?vue&type=style&index=0&id=f1283178&lang=scss&scoped=true&\\n\");\n\n/***/ }),\n\n/***/ \"./node_modules/highlight.js/lib/core.js\":\n/*!***********************************************!*\\\n  !*** ./node_modules/highlight.js/lib/core.js ***!\n  \\***********************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\neval(\"var deepFreezeEs6 = {exports: {}};\\n\\nfunction deepFreeze(obj) {\\n    if (obj instanceof Map) {\\n        obj.clear = obj.delete = obj.set = function () {\\n            throw new Error('map is read-only');\\n        };\\n    } else if (obj instanceof Set) {\\n        obj.add = obj.clear = obj.delete = function () {\\n            throw new Error('set is read-only');\\n        };\\n    }\\n\\n    // Freeze self\\n    Object.freeze(obj);\\n\\n    Object.getOwnPropertyNames(obj).forEach(function (name) {\\n        var prop = obj[name];\\n\\n        // Freeze prop if it is an object\\n        if (typeof prop == 'object' && !Object.isFrozen(prop)) {\\n            deepFreeze(prop);\\n        }\\n    });\\n\\n    return obj;\\n}\\n\\ndeepFreezeEs6.exports = deepFreeze;\\ndeepFreezeEs6.exports.default = deepFreeze;\\n\\nvar deepFreeze$1 = deepFreezeEs6.exports;\\n\\n/** @typedef {import('highlight.js').CallbackResponse} CallbackResponse */\\n/** @typedef {import('highlight.js').CompiledMode} CompiledMode */\\n/** @implements CallbackResponse */\\n\\nclass Response {\\n  /**\\n   * @param {CompiledMode} mode\\n   */\\n  constructor(mode) {\\n    // eslint-disable-next-line no-undefined\\n    if (mode.data === undefined) mode.data = {};\\n\\n    this.data = mode.data;\\n    this.isMatchIgnored = false;\\n  }\\n\\n  ignoreMatch() {\\n    this.isMatchIgnored = true;\\n  }\\n}\\n\\n/**\\n * @param {string} value\\n * @returns {string}\\n */\\nfunction escapeHTML(value) {\\n  return value\\n    .replace(/&/g, '&amp;')\\n    .replace(/</g, '&lt;')\\n    .replace(/>/g, '&gt;')\\n    .replace(/\\\"/g, '&quot;')\\n    .replace(/'/g, '&#x27;');\\n}\\n\\n/**\\n * performs a shallow merge of multiple objects into one\\n *\\n * @template T\\n * @param {T} original\\n * @param {Record<string,any>[]} objects\\n * @returns {T} a single new object\\n */\\nfunction inherit$1(original, ...objects) {\\n  /** @type Record<string,any> */\\n  const result = Object.create(null);\\n\\n  for (const key in original) {\\n    result[key] = original[key];\\n  }\\n  objects.forEach(function(obj) {\\n    for (const key in obj) {\\n      result[key] = obj[key];\\n    }\\n  });\\n  return /** @type {T} */ (result);\\n}\\n\\n/**\\n * @typedef {object} Renderer\\n * @property {(text: string) => void} addText\\n * @property {(node: Node) => void} openNode\\n * @property {(node: Node) => void} closeNode\\n * @property {() => string} value\\n */\\n\\n/** @typedef {{kind?: string, sublanguage?: boolean}} Node */\\n/** @typedef {{walk: (r: Renderer) => void}} Tree */\\n/** */\\n\\nconst SPAN_CLOSE = '</span>';\\n\\n/**\\n * Determines if a node needs to be wrapped in <span>\\n *\\n * @param {Node} node */\\nconst emitsWrappingTags = (node) => {\\n  return !!node.kind;\\n};\\n\\n/**\\n *\\n * @param {string} name\\n * @param {{prefix:string}} options\\n */\\nconst expandScopeName = (name, { prefix }) => {\\n  if (name.includes(\\\".\\\")) {\\n    const pieces = name.split(\\\".\\\");\\n    return [\\n      `${prefix}${pieces.shift()}`,\\n      ...(pieces.map((x, i) => `${x}${\\\"_\\\".repeat(i + 1)}`))\\n    ].join(\\\" \\\");\\n  }\\n  return `${prefix}${name}`;\\n};\\n\\n/** @type {Renderer} */\\nclass HTMLRenderer {\\n  /**\\n   * Creates a new HTMLRenderer\\n   *\\n   * @param {Tree} parseTree - the parse tree (must support `walk` API)\\n   * @param {{classPrefix: string}} options\\n   */\\n  constructor(parseTree, options) {\\n    this.buffer = \\\"\\\";\\n    this.classPrefix = options.classPrefix;\\n    parseTree.walk(this);\\n  }\\n\\n  /**\\n   * Adds texts to the output stream\\n   *\\n   * @param {string} text */\\n  addText(text) {\\n    this.buffer += escapeHTML(text);\\n  }\\n\\n  /**\\n   * Adds a node open to the output stream (if needed)\\n   *\\n   * @param {Node} node */\\n  openNode(node) {\\n    if (!emitsWrappingTags(node)) return;\\n\\n    let scope = node.kind;\\n    if (node.sublanguage) {\\n      scope = `language-${scope}`;\\n    } else {\\n      scope = expandScopeName(scope, { prefix: this.classPrefix });\\n    }\\n    this.span(scope);\\n  }\\n\\n  /**\\n   * Adds a node close to the output stream (if needed)\\n   *\\n   * @param {Node} node */\\n  closeNode(node) {\\n    if (!emitsWrappingTags(node)) return;\\n\\n    this.buffer += SPAN_CLOSE;\\n  }\\n\\n  /**\\n   * returns the accumulated buffer\\n  */\\n  value() {\\n    return this.buffer;\\n  }\\n\\n  // helpers\\n\\n  /**\\n   * Builds a span element\\n   *\\n   * @param {string} className */\\n  span(className) {\\n    this.buffer += `<span class=\\\"${className}\\\">`;\\n  }\\n}\\n\\n/** @typedef {{kind?: string, sublanguage?: boolean, children: Node[]} | string} Node */\\n/** @typedef {{kind?: string, sublanguage?: boolean, children: Node[]} } DataNode */\\n/** @typedef {import('highlight.js').Emitter} Emitter */\\n/**  */\\n\\nclass TokenTree {\\n  constructor() {\\n    /** @type DataNode */\\n    this.rootNode = { children: [] };\\n    this.stack = [this.rootNode];\\n  }\\n\\n  get top() {\\n    return this.stack[this.stack.length - 1];\\n  }\\n\\n  get root() { return this.rootNode; }\\n\\n  /** @param {Node} node */\\n  add(node) {\\n    this.top.children.push(node);\\n  }\\n\\n  /** @param {string} kind */\\n  openNode(kind) {\\n    /** @type Node */\\n    const node = { kind, children: [] };\\n    this.add(node);\\n    this.stack.push(node);\\n  }\\n\\n  closeNode() {\\n    if (this.stack.length > 1) {\\n      return this.stack.pop();\\n    }\\n    // eslint-disable-next-line no-undefined\\n    return undefined;\\n  }\\n\\n  closeAllNodes() {\\n    while (this.closeNode());\\n  }\\n\\n  toJSON() {\\n    return JSON.stringify(this.rootNode, null, 4);\\n  }\\n\\n  /**\\n   * @typedef { import(\\\"./html_renderer\\\").Renderer } Renderer\\n   * @param {Renderer} builder\\n   */\\n  walk(builder) {\\n    // this does not\\n    return this.constructor._walk(builder, this.rootNode);\\n    // this works\\n    // return TokenTree._walk(builder, this.rootNode);\\n  }\\n\\n  /**\\n   * @param {Renderer} builder\\n   * @param {Node} node\\n   */\\n  static _walk(builder, node) {\\n    if (typeof node === \\\"string\\\") {\\n      builder.addText(node);\\n    } else if (node.children) {\\n      builder.openNode(node);\\n      node.children.forEach((child) => this._walk(builder, child));\\n      builder.closeNode(node);\\n    }\\n    return builder;\\n  }\\n\\n  /**\\n   * @param {Node} node\\n   */\\n  static _collapse(node) {\\n    if (typeof node === \\\"string\\\") return;\\n    if (!node.children) return;\\n\\n    if (node.children.every(el => typeof el === \\\"string\\\")) {\\n      // node.text = node.children.join(\\\"\\\");\\n      // delete node.children;\\n      node.children = [node.children.join(\\\"\\\")];\\n    } else {\\n      node.children.forEach((child) => {\\n        TokenTree._collapse(child);\\n      });\\n    }\\n  }\\n}\\n\\n/**\\n  Currently this is all private API, but this is the minimal API necessary\\n  that an Emitter must implement to fully support the parser.\\n\\n  Minimal interface:\\n\\n  - addKeyword(text, kind)\\n  - addText(text)\\n  - addSublanguage(emitter, subLanguageName)\\n  - finalize()\\n  - openNode(kind)\\n  - closeNode()\\n  - closeAllNodes()\\n  - toHTML()\\n\\n*/\\n\\n/**\\n * @implements {Emitter}\\n */\\nclass TokenTreeEmitter extends TokenTree {\\n  /**\\n   * @param {*} options\\n   */\\n  constructor(options) {\\n    super();\\n    this.options = options;\\n  }\\n\\n  /**\\n   * @param {string} text\\n   * @param {string} kind\\n   */\\n  addKeyword(text, kind) {\\n    if (text === \\\"\\\") { return; }\\n\\n    this.openNode(kind);\\n    this.addText(text);\\n    this.closeNode();\\n  }\\n\\n  /**\\n   * @param {string} text\\n   */\\n  addText(text) {\\n    if (text === \\\"\\\") { return; }\\n\\n    this.add(text);\\n  }\\n\\n  /**\\n   * @param {Emitter & {root: DataNode}} emitter\\n   * @param {string} name\\n   */\\n  addSublanguage(emitter, name) {\\n    /** @type DataNode */\\n    const node = emitter.root;\\n    node.kind = name;\\n    node.sublanguage = true;\\n    this.add(node);\\n  }\\n\\n  toHTML() {\\n    const renderer = new HTMLRenderer(this, this.options);\\n    return renderer.value();\\n  }\\n\\n  finalize() {\\n    return true;\\n  }\\n}\\n\\n/**\\n * @param {string} value\\n * @returns {RegExp}\\n * */\\n\\n/**\\n * @param {RegExp | string } re\\n * @returns {string}\\n */\\nfunction source(re) {\\n  if (!re) return null;\\n  if (typeof re === \\\"string\\\") return re;\\n\\n  return re.source;\\n}\\n\\n/**\\n * @param {RegExp | string } re\\n * @returns {string}\\n */\\nfunction lookahead(re) {\\n  return concat('(?=', re, ')');\\n}\\n\\n/**\\n * @param {RegExp | string } re\\n * @returns {string}\\n */\\nfunction anyNumberOfTimes(re) {\\n  return concat('(?:', re, ')*');\\n}\\n\\n/**\\n * @param {RegExp | string } re\\n * @returns {string}\\n */\\nfunction optional(re) {\\n  return concat('(?:', re, ')?');\\n}\\n\\n/**\\n * @param {...(RegExp | string) } args\\n * @returns {string}\\n */\\nfunction concat(...args) {\\n  const joined = args.map((x) => source(x)).join(\\\"\\\");\\n  return joined;\\n}\\n\\n/**\\n * @param { Array<string | RegExp | Object> } args\\n * @returns {object}\\n */\\nfunction stripOptionsFromArgs(args) {\\n  const opts = args[args.length - 1];\\n\\n  if (typeof opts === 'object' && opts.constructor === Object) {\\n    args.splice(args.length - 1, 1);\\n    return opts;\\n  } else {\\n    return {};\\n  }\\n}\\n\\n/**\\n * Any of the passed expresssions may match\\n *\\n * Creates a huge this | this | that | that match\\n * @param {(RegExp | string)[] } args\\n * @returns {string}\\n */\\nfunction either(...args) {\\n  /** @type { object & {capture?: boolean} }  */\\n  const opts = stripOptionsFromArgs(args);\\n  const joined = '('\\n    + (opts.capture ? \\\"\\\" : \\\"?:\\\")\\n    + args.map((x) => source(x)).join(\\\"|\\\") + \\\")\\\";\\n  return joined;\\n}\\n\\n/**\\n * @param {RegExp | string} re\\n * @returns {number}\\n */\\nfunction countMatchGroups(re) {\\n  return (new RegExp(re.toString() + '|')).exec('').length - 1;\\n}\\n\\n/**\\n * Does lexeme start with a regular expression match at the beginning\\n * @param {RegExp} re\\n * @param {string} lexeme\\n */\\nfunction startsWith(re, lexeme) {\\n  const match = re && re.exec(lexeme);\\n  return match && match.index === 0;\\n}\\n\\n// BACKREF_RE matches an open parenthesis or backreference. To avoid\\n// an incorrect parse, it additionally matches the following:\\n// - [...] elements, where the meaning of parentheses and escapes change\\n// - other escape sequences, so we do not misparse escape sequences as\\n//   interesting elements\\n// - non-matching or lookahead parentheses, which do not capture. These\\n//   follow the '(' with a '?'.\\nconst BACKREF_RE = /\\\\[(?:[^\\\\\\\\\\\\]]|\\\\\\\\.)*\\\\]|\\\\(\\\\??|\\\\\\\\([1-9][0-9]*)|\\\\\\\\./;\\n\\n// **INTERNAL** Not intended for outside usage\\n// join logically computes regexps.join(separator), but fixes the\\n// backreferences so they continue to match.\\n// it also places each individual regular expression into it's own\\n// match group, keeping track of the sequencing of those match groups\\n// is currently an exercise for the caller. :-)\\n/**\\n * @param {(string | RegExp)[]} regexps\\n * @param {{joinWith: string}} opts\\n * @returns {string}\\n */\\nfunction _rewriteBackreferences(regexps, { joinWith }) {\\n  let numCaptures = 0;\\n\\n  return regexps.map((regex) => {\\n    numCaptures += 1;\\n    const offset = numCaptures;\\n    let re = source(regex);\\n    let out = '';\\n\\n    while (re.length > 0) {\\n      const match = BACKREF_RE.exec(re);\\n      if (!match) {\\n        out += re;\\n        break;\\n      }\\n      out += re.substring(0, match.index);\\n      re = re.substring(match.index + match[0].length);\\n      if (match[0][0] === '\\\\\\\\' && match[1]) {\\n        // Adjust the backreference.\\n        out += '\\\\\\\\' + String(Number(match[1]) + offset);\\n      } else {\\n        out += match[0];\\n        if (match[0] === '(') {\\n          numCaptures++;\\n        }\\n      }\\n    }\\n    return out;\\n  }).map(re => `(${re})`).join(joinWith);\\n}\\n\\n/** @typedef {import('highlight.js').Mode} Mode */\\n/** @typedef {import('highlight.js').ModeCallback} ModeCallback */\\n\\n// Common regexps\\nconst MATCH_NOTHING_RE = /\\\\b\\\\B/;\\nconst IDENT_RE = '[a-zA-Z]\\\\\\\\w*';\\nconst UNDERSCORE_IDENT_RE = '[a-zA-Z_]\\\\\\\\w*';\\nconst NUMBER_RE = '\\\\\\\\b\\\\\\\\d+(\\\\\\\\.\\\\\\\\d+)?';\\nconst C_NUMBER_RE = '(-?)(\\\\\\\\b0[xX][a-fA-F0-9]+|(\\\\\\\\b\\\\\\\\d+(\\\\\\\\.\\\\\\\\d*)?|\\\\\\\\.\\\\\\\\d+)([eE][-+]?\\\\\\\\d+)?)'; // 0x..., 0..., decimal, float\\nconst BINARY_NUMBER_RE = '\\\\\\\\b(0b[01]+)'; // 0b...\\nconst RE_STARTERS_RE = '!|!=|!==|%|%=|&|&&|&=|\\\\\\\\*|\\\\\\\\*=|\\\\\\\\+|\\\\\\\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\\\\\\\?|\\\\\\\\[|\\\\\\\\{|\\\\\\\\(|\\\\\\\\^|\\\\\\\\^=|\\\\\\\\||\\\\\\\\|=|\\\\\\\\|\\\\\\\\||~';\\n\\n/**\\n* @param { Partial<Mode> & {binary?: string | RegExp} } opts\\n*/\\nconst SHEBANG = (opts = {}) => {\\n  const beginShebang = /^#![ ]*\\\\//;\\n  if (opts.binary) {\\n    opts.begin = concat(\\n      beginShebang,\\n      /.*\\\\b/,\\n      opts.binary,\\n      /\\\\b.*/);\\n  }\\n  return inherit$1({\\n    scope: 'meta',\\n    begin: beginShebang,\\n    end: /$/,\\n    relevance: 0,\\n    /** @type {ModeCallback} */\\n    \\\"on:begin\\\": (m, resp) => {\\n      if (m.index !== 0) resp.ignoreMatch();\\n    }\\n  }, opts);\\n};\\n\\n// Common modes\\nconst BACKSLASH_ESCAPE = {\\n  begin: '\\\\\\\\\\\\\\\\[\\\\\\\\s\\\\\\\\S]', relevance: 0\\n};\\nconst APOS_STRING_MODE = {\\n  scope: 'string',\\n  begin: '\\\\'',\\n  end: '\\\\'',\\n  illegal: '\\\\\\\\n',\\n  contains: [BACKSLASH_ESCAPE]\\n};\\nconst QUOTE_STRING_MODE = {\\n  scope: 'string',\\n  begin: '\\\"',\\n  end: '\\\"',\\n  illegal: '\\\\\\\\n',\\n  contains: [BACKSLASH_ESCAPE]\\n};\\nconst PHRASAL_WORDS_MODE = {\\n  begin: /\\\\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|they|like|more)\\\\b/\\n};\\n/**\\n * Creates a comment mode\\n *\\n * @param {string | RegExp} begin\\n * @param {string | RegExp} end\\n * @param {Mode | {}} [modeOptions]\\n * @returns {Partial<Mode>}\\n */\\nconst COMMENT = function(begin, end, modeOptions = {}) {\\n  const mode = inherit$1(\\n    {\\n      scope: 'comment',\\n      begin,\\n      end,\\n      contains: []\\n    },\\n    modeOptions\\n  );\\n  mode.contains.push({\\n    scope: 'doctag',\\n    // hack to avoid the space from being included. the space is necessary to\\n    // match here to prevent the plain text rule below from gobbling up doctags\\n    begin: '[ ]*(?=(TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):)',\\n    end: /(TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):/,\\n    excludeBegin: true,\\n    relevance: 0\\n  });\\n  const ENGLISH_WORD = either(\\n    // list of common 1 and 2 letter words in English\\n    \\\"I\\\",\\n    \\\"a\\\",\\n    \\\"is\\\",\\n    \\\"so\\\",\\n    \\\"us\\\",\\n    \\\"to\\\",\\n    \\\"at\\\",\\n    \\\"if\\\",\\n    \\\"in\\\",\\n    \\\"it\\\",\\n    \\\"on\\\",\\n    // note: this is not an exhaustive list of contractions, just popular ones\\n    /[A-Za-z]+['](d|ve|re|ll|t|s|n)/, // contractions - can't we'd they're let's, etc\\n    /[A-Za-z]+[-][a-z]+/, // `no-way`, etc.\\n    /[A-Za-z][a-z]{2,}/ // allow capitalized words at beginning of sentences\\n  );\\n  // looking like plain text, more likely to be a comment\\n  mode.contains.push(\\n    {\\n      // TODO: how to include \\\", (, ) without breaking grammars that use these for\\n      // comment delimiters?\\n      // begin: /[ ]+([()\\\"]?([A-Za-z'-]{3,}|is|a|I|so|us|[tT][oO]|at|if|in|it|on)[.]?[()\\\":]?([.][ ]|[ ]|\\\\))){3}/\\n      // ---\\n\\n      // this tries to find sequences of 3 english words in a row (without any\\n      // \\\"programming\\\" type syntax) this gives us a strong signal that we've\\n      // TRULY found a comment - vs perhaps scanning with the wrong language.\\n      // It's possible to find something that LOOKS like the start of the\\n      // comment - but then if there is no readable text - good chance it is a\\n      // false match and not a comment.\\n      //\\n      // for a visual example please see:\\n      // https://github.com/highlightjs/highlight.js/issues/2827\\n\\n      begin: concat(\\n        /[ ]+/, // necessary to prevent us gobbling up doctags like /* @author Bob Mcgill */\\n        '(',\\n        ENGLISH_WORD,\\n        /[.]?[:]?([.][ ]|[ ])/,\\n        '){3}') // look for 3 words in a row\\n    }\\n  );\\n  return mode;\\n};\\nconst C_LINE_COMMENT_MODE = COMMENT('//', '$');\\nconst C_BLOCK_COMMENT_MODE = COMMENT('/\\\\\\\\*', '\\\\\\\\*/');\\nconst HASH_COMMENT_MODE = COMMENT('#', '$');\\nconst NUMBER_MODE = {\\n  scope: 'number',\\n  begin: NUMBER_RE,\\n  relevance: 0\\n};\\nconst C_NUMBER_MODE = {\\n  scope: 'number',\\n  begin: C_NUMBER_RE,\\n  relevance: 0\\n};\\nconst BINARY_NUMBER_MODE = {\\n  scope: 'number',\\n  begin: BINARY_NUMBER_RE,\\n  relevance: 0\\n};\\nconst REGEXP_MODE = {\\n  // this outer rule makes sure we actually have a WHOLE regex and not simply\\n  // an expression such as:\\n  //\\n  //     3 / something\\n  //\\n  // (which will then blow up when regex's `illegal` sees the newline)\\n  begin: /(?=\\\\/[^/\\\\n]*\\\\/)/,\\n  contains: [{\\n    scope: 'regexp',\\n    begin: /\\\\//,\\n    end: /\\\\/[gimuy]*/,\\n    illegal: /\\\\n/,\\n    contains: [\\n      BACKSLASH_ESCAPE,\\n      {\\n        begin: /\\\\[/,\\n        end: /\\\\]/,\\n        relevance: 0,\\n        contains: [BACKSLASH_ESCAPE]\\n      }\\n    ]\\n  }]\\n};\\nconst TITLE_MODE = {\\n  scope: 'title',\\n  begin: IDENT_RE,\\n  relevance: 0\\n};\\nconst UNDERSCORE_TITLE_MODE = {\\n  scope: 'title',\\n  begin: UNDERSCORE_IDENT_RE,\\n  relevance: 0\\n};\\nconst METHOD_GUARD = {\\n  // excludes method names from keyword processing\\n  begin: '\\\\\\\\.\\\\\\\\s*' + UNDERSCORE_IDENT_RE,\\n  relevance: 0\\n};\\n\\n/**\\n * Adds end same as begin mechanics to a mode\\n *\\n * Your mode must include at least a single () match group as that first match\\n * group is what is used for comparison\\n * @param {Partial<Mode>} mode\\n */\\nconst END_SAME_AS_BEGIN = function(mode) {\\n  return Object.assign(mode,\\n    {\\n      /** @type {ModeCallback} */\\n      'on:begin': (m, resp) => { resp.data._beginMatch = m[1]; },\\n      /** @type {ModeCallback} */\\n      'on:end': (m, resp) => { if (resp.data._beginMatch !== m[1]) resp.ignoreMatch(); }\\n    });\\n};\\n\\nvar MODES = /*#__PURE__*/Object.freeze({\\n    __proto__: null,\\n    MATCH_NOTHING_RE: MATCH_NOTHING_RE,\\n    IDENT_RE: IDENT_RE,\\n    UNDERSCORE_IDENT_RE: UNDERSCORE_IDENT_RE,\\n    NUMBER_RE: NUMBER_RE,\\n    C_NUMBER_RE: C_NUMBER_RE,\\n    BINARY_NUMBER_RE: BINARY_NUMBER_RE,\\n    RE_STARTERS_RE: RE_STARTERS_RE,\\n    SHEBANG: SHEBANG,\\n    BACKSLASH_ESCAPE: BACKSLASH_ESCAPE,\\n    APOS_STRING_MODE: APOS_STRING_MODE,\\n    QUOTE_STRING_MODE: QUOTE_STRING_MODE,\\n    PHRASAL_WORDS_MODE: PHRASAL_WORDS_MODE,\\n    COMMENT: COMMENT,\\n    C_LINE_COMMENT_MODE: C_LINE_COMMENT_MODE,\\n    C_BLOCK_COMMENT_MODE: C_BLOCK_COMMENT_MODE,\\n    HASH_COMMENT_MODE: HASH_COMMENT_MODE,\\n    NUMBER_MODE: NUMBER_MODE,\\n    C_NUMBER_MODE: C_NUMBER_MODE,\\n    BINARY_NUMBER_MODE: BINARY_NUMBER_MODE,\\n    REGEXP_MODE: REGEXP_MODE,\\n    TITLE_MODE: TITLE_MODE,\\n    UNDERSCORE_TITLE_MODE: UNDERSCORE_TITLE_MODE,\\n    METHOD_GUARD: METHOD_GUARD,\\n    END_SAME_AS_BEGIN: END_SAME_AS_BEGIN\\n});\\n\\n/**\\n@typedef {import('highlight.js').CallbackResponse} CallbackResponse\\n@typedef {import('highlight.js').CompilerExt} CompilerExt\\n*/\\n\\n// Grammar extensions / plugins\\n// See: https://github.com/highlightjs/highlight.js/issues/2833\\n\\n// Grammar extensions allow \\\"syntactic sugar\\\" to be added to the grammar modes\\n// without requiring any underlying changes to the compiler internals.\\n\\n// `compileMatch` being the perfect small example of now allowing a grammar\\n// author to write `match` when they desire to match a single expression rather\\n// than being forced to use `begin`.  The extension then just moves `match` into\\n// `begin` when it runs.  Ie, no features have been added, but we've just made\\n// the experience of writing (and reading grammars) a little bit nicer.\\n\\n// ------\\n\\n// TODO: We need negative look-behind support to do this properly\\n/**\\n * Skip a match if it has a preceding dot\\n *\\n * This is used for `beginKeywords` to prevent matching expressions such as\\n * `bob.keyword.do()`. The mode compiler automatically wires this up as a\\n * special _internal_ 'on:begin' callback for modes with `beginKeywords`\\n * @param {RegExpMatchArray} match\\n * @param {CallbackResponse} response\\n */\\nfunction skipIfHasPrecedingDot(match, response) {\\n  const before = match.input[match.index - 1];\\n  if (before === \\\".\\\") {\\n    response.ignoreMatch();\\n  }\\n}\\n\\n/**\\n *\\n * @type {CompilerExt}\\n */\\nfunction scopeClassName(mode, _parent) {\\n  // eslint-disable-next-line no-undefined\\n  if (mode.className !== undefined) {\\n    mode.scope = mode.className;\\n    delete mode.className;\\n  }\\n}\\n\\n/**\\n * `beginKeywords` syntactic sugar\\n * @type {CompilerExt}\\n */\\nfunction beginKeywords(mode, parent) {\\n  if (!parent) return;\\n  if (!mode.beginKeywords) return;\\n\\n  // for languages with keywords that include non-word characters checking for\\n  // a word boundary is not sufficient, so instead we check for a word boundary\\n  // or whitespace - this does no harm in any case since our keyword engine\\n  // doesn't allow spaces in keywords anyways and we still check for the boundary\\n  // first\\n  mode.begin = '\\\\\\\\b(' + mode.beginKeywords.split(' ').join('|') + ')(?!\\\\\\\\.)(?=\\\\\\\\b|\\\\\\\\s)';\\n  mode.__beforeBegin = skipIfHasPrecedingDot;\\n  mode.keywords = mode.keywords || mode.beginKeywords;\\n  delete mode.beginKeywords;\\n\\n  // prevents double relevance, the keywords themselves provide\\n  // relevance, the mode doesn't need to double it\\n  // eslint-disable-next-line no-undefined\\n  if (mode.relevance === undefined) mode.relevance = 0;\\n}\\n\\n/**\\n * Allow `illegal` to contain an array of illegal values\\n * @type {CompilerExt}\\n */\\nfunction compileIllegal(mode, _parent) {\\n  if (!Array.isArray(mode.illegal)) return;\\n\\n  mode.illegal = either(...mode.illegal);\\n}\\n\\n/**\\n * `match` to match a single expression for readability\\n * @type {CompilerExt}\\n */\\nfunction compileMatch(mode, _parent) {\\n  if (!mode.match) return;\\n  if (mode.begin || mode.end) throw new Error(\\\"begin & end are not supported with match\\\");\\n\\n  mode.begin = mode.match;\\n  delete mode.match;\\n}\\n\\n/**\\n * provides the default 1 relevance to all modes\\n * @type {CompilerExt}\\n */\\nfunction compileRelevance(mode, _parent) {\\n  // eslint-disable-next-line no-undefined\\n  if (mode.relevance === undefined) mode.relevance = 1;\\n}\\n\\n// allow beforeMatch to act as a \\\"qualifier\\\" for the match\\n// the full match begin must be [beforeMatch][begin]\\nconst beforeMatchExt = (mode, parent) => {\\n  if (!mode.beforeMatch) return;\\n  // starts conflicts with endsParent which we need to make sure the child\\n  // rule is not matched multiple times\\n  if (mode.starts) throw new Error(\\\"beforeMatch cannot be used with starts\\\");\\n\\n  const originalMode = Object.assign({}, mode);\\n  Object.keys(mode).forEach((key) => { delete mode[key]; });\\n\\n  mode.keywords = originalMode.keywords;\\n  mode.begin = concat(originalMode.beforeMatch, lookahead(originalMode.begin));\\n  mode.starts = {\\n    relevance: 0,\\n    contains: [\\n      Object.assign(originalMode, { endsParent: true })\\n    ]\\n  };\\n  mode.relevance = 0;\\n\\n  delete originalMode.beforeMatch;\\n};\\n\\n// keywords that should have no default relevance value\\nconst COMMON_KEYWORDS = [\\n  'of',\\n  'and',\\n  'for',\\n  'in',\\n  'not',\\n  'or',\\n  'if',\\n  'then',\\n  'parent', // common variable name\\n  'list', // common variable name\\n  'value' // common variable name\\n];\\n\\nconst DEFAULT_KEYWORD_SCOPE = \\\"keyword\\\";\\n\\n/**\\n * Given raw keywords from a language definition, compile them.\\n *\\n * @param {string | Record<string,string|string[]> | Array<string>} rawKeywords\\n * @param {boolean} caseInsensitive\\n */\\nfunction compileKeywords(rawKeywords, caseInsensitive, scopeName = DEFAULT_KEYWORD_SCOPE) {\\n  /** @type KeywordDict */\\n  const compiledKeywords = Object.create(null);\\n\\n  // input can be a string of keywords, an array of keywords, or a object with\\n  // named keys representing scopeName (which can then point to a string or array)\\n  if (typeof rawKeywords === 'string') {\\n    compileList(scopeName, rawKeywords.split(\\\" \\\"));\\n  } else if (Array.isArray(rawKeywords)) {\\n    compileList(scopeName, rawKeywords);\\n  } else {\\n    Object.keys(rawKeywords).forEach(function(scopeName) {\\n      // collapse all our objects back into the parent object\\n      Object.assign(\\n        compiledKeywords,\\n        compileKeywords(rawKeywords[scopeName], caseInsensitive, scopeName)\\n      );\\n    });\\n  }\\n  return compiledKeywords;\\n\\n  // ---\\n\\n  /**\\n   * Compiles an individual list of keywords\\n   *\\n   * Ex: \\\"for if when while|5\\\"\\n   *\\n   * @param {string} scopeName\\n   * @param {Array<string>} keywordList\\n   */\\n  function compileList(scopeName, keywordList) {\\n    if (caseInsensitive) {\\n      keywordList = keywordList.map(x => x.toLowerCase());\\n    }\\n    keywordList.forEach(function(keyword) {\\n      const pair = keyword.split('|');\\n      compiledKeywords[pair[0]] = [scopeName, scoreForKeyword(pair[0], pair[1])];\\n    });\\n  }\\n}\\n\\n/**\\n * Returns the proper score for a given keyword\\n *\\n * Also takes into account comment keywords, which will be scored 0 UNLESS\\n * another score has been manually assigned.\\n * @param {string} keyword\\n * @param {string} [providedScore]\\n */\\nfunction scoreForKeyword(keyword, providedScore) {\\n  // manual scores always win over common keywords\\n  // so you can force a score of 1 if you really insist\\n  if (providedScore) {\\n    return Number(providedScore);\\n  }\\n\\n  return commonKeyword(keyword) ? 0 : 1;\\n}\\n\\n/**\\n * Determines if a given keyword is common or not\\n *\\n * @param {string} keyword */\\nfunction commonKeyword(keyword) {\\n  return COMMON_KEYWORDS.includes(keyword.toLowerCase());\\n}\\n\\n/*\\n\\nFor the reasoning behind this please see:\\nhttps://github.com/highlightjs/highlight.js/issues/2880#issuecomment-747275419\\n\\n*/\\n\\n/**\\n * @type {Record<string, boolean>}\\n */\\nconst seenDeprecations = {};\\n\\n/**\\n * @param {string} message\\n */\\nconst error = (message) => {\\n  console.error(message);\\n};\\n\\n/**\\n * @param {string} message\\n * @param {any} args\\n */\\nconst warn = (message, ...args) => {\\n  console.log(`WARN: ${message}`, ...args);\\n};\\n\\n/**\\n * @param {string} version\\n * @param {string} message\\n */\\nconst deprecated = (version, message) => {\\n  if (seenDeprecations[`${version}/${message}`]) return;\\n\\n  console.log(`Deprecated as of ${version}. ${message}`);\\n  seenDeprecations[`${version}/${message}`] = true;\\n};\\n\\n/* eslint-disable no-throw-literal */\\n\\n/**\\n@typedef {import('highlight.js').CompiledMode} CompiledMode\\n*/\\n\\nconst MultiClassError = new Error();\\n\\n/**\\n * Renumbers labeled scope names to account for additional inner match\\n * groups that otherwise would break everything.\\n *\\n * Lets say we 3 match scopes:\\n *\\n *   { 1 => ..., 2 => ..., 3 => ... }\\n *\\n * So what we need is a clean match like this:\\n *\\n *   (a)(b)(c) => [ \\\"a\\\", \\\"b\\\", \\\"c\\\" ]\\n *\\n * But this falls apart with inner match groups:\\n *\\n * (a)(((b)))(c) => [\\\"a\\\", \\\"b\\\", \\\"b\\\", \\\"b\\\", \\\"c\\\" ]\\n *\\n * Our scopes are now \\\"out of alignment\\\" and we're repeating `b` 3 times.\\n * What needs to happen is the numbers are remapped:\\n *\\n *   { 1 => ..., 2 => ..., 5 => ... }\\n *\\n * We also need to know that the ONLY groups that should be output\\n * are 1, 2, and 5.  This function handles this behavior.\\n *\\n * @param {CompiledMode} mode\\n * @param {Array<RegExp | string>} regexes\\n * @param {{key: \\\"beginScope\\\"|\\\"endScope\\\"}} opts\\n */\\nfunction remapScopeNames(mode, regexes, { key }) {\\n  let offset = 0;\\n  const scopeNames = mode[key];\\n  /** @type Record<number,boolean> */\\n  const emit = {};\\n  /** @type Record<number,string> */\\n  const positions = {};\\n\\n  for (let i = 1; i <= regexes.length; i++) {\\n    positions[i + offset] = scopeNames[i];\\n    emit[i + offset] = true;\\n    offset += countMatchGroups(regexes[i - 1]);\\n  }\\n  // we use _emit to keep track of which match groups are \\\"top-level\\\" to avoid double\\n  // output from inside match groups\\n  mode[key] = positions;\\n  mode[key]._emit = emit;\\n  mode[key]._multi = true;\\n}\\n\\n/**\\n * @param {CompiledMode} mode\\n */\\nfunction beginMultiClass(mode) {\\n  if (!Array.isArray(mode.begin)) return;\\n\\n  if (mode.skip || mode.excludeBegin || mode.returnBegin) {\\n    error(\\\"skip, excludeBegin, returnBegin not compatible with beginScope: {}\\\");\\n    throw MultiClassError;\\n  }\\n\\n  if (typeof mode.beginScope !== \\\"object\\\" || mode.beginScope === null) {\\n    error(\\\"beginScope must be object\\\");\\n    throw MultiClassError;\\n  }\\n\\n  remapScopeNames(mode, mode.begin, { key: \\\"beginScope\\\" });\\n  mode.begin = _rewriteBackreferences(mode.begin, { joinWith: \\\"\\\" });\\n}\\n\\n/**\\n * @param {CompiledMode} mode\\n */\\nfunction endMultiClass(mode) {\\n  if (!Array.isArray(mode.end)) return;\\n\\n  if (mode.skip || mode.excludeEnd || mode.returnEnd) {\\n    error(\\\"skip, excludeEnd, returnEnd not compatible with endScope: {}\\\");\\n    throw MultiClassError;\\n  }\\n\\n  if (typeof mode.endScope !== \\\"object\\\" || mode.endScope === null) {\\n    error(\\\"endScope must be object\\\");\\n    throw MultiClassError;\\n  }\\n\\n  remapScopeNames(mode, mode.end, { key: \\\"endScope\\\" });\\n  mode.end = _rewriteBackreferences(mode.end, { joinWith: \\\"\\\" });\\n}\\n\\n/**\\n * this exists only to allow `scope: {}` to be used beside `match:`\\n * Otherwise `beginScope` would necessary and that would look weird\\n\\n  {\\n    match: [ /def/, /\\\\w+/ ]\\n    scope: { 1: \\\"keyword\\\" , 2: \\\"title\\\" }\\n  }\\n\\n * @param {CompiledMode} mode\\n */\\nfunction scopeSugar(mode) {\\n  if (mode.scope && typeof mode.scope === \\\"object\\\" && mode.scope !== null) {\\n    mode.beginScope = mode.scope;\\n    delete mode.scope;\\n  }\\n}\\n\\n/**\\n * @param {CompiledMode} mode\\n */\\nfunction MultiClass(mode) {\\n  scopeSugar(mode);\\n\\n  if (typeof mode.beginScope === \\\"string\\\") {\\n    mode.beginScope = { _wrap: mode.beginScope };\\n  }\\n  if (typeof mode.endScope === \\\"string\\\") {\\n    mode.endScope = { _wrap: mode.endScope };\\n  }\\n\\n  beginMultiClass(mode);\\n  endMultiClass(mode);\\n}\\n\\n/**\\n@typedef {import('highlight.js').Mode} Mode\\n@typedef {import('highlight.js').CompiledMode} CompiledMode\\n@typedef {import('highlight.js').Language} Language\\n@typedef {import('highlight.js').HLJSPlugin} HLJSPlugin\\n@typedef {import('highlight.js').CompiledLanguage} CompiledLanguage\\n*/\\n\\n// compilation\\n\\n/**\\n * Compiles a language definition result\\n *\\n * Given the raw result of a language definition (Language), compiles this so\\n * that it is ready for highlighting code.\\n * @param {Language} language\\n * @returns {CompiledLanguage}\\n */\\nfunction compileLanguage(language) {\\n  /**\\n   * Builds a regex with the case sensitivity of the current language\\n   *\\n   * @param {RegExp | string} value\\n   * @param {boolean} [global]\\n   */\\n  function langRe(value, global) {\\n    return new RegExp(\\n      source(value),\\n      'm'\\n      + (language.case_insensitive ? 'i' : '')\\n      + (language.unicodeRegex ? 'u' : '')\\n      + (global ? 'g' : '')\\n    );\\n  }\\n\\n  /**\\n    Stores multiple regular expressions and allows you to quickly search for\\n    them all in a string simultaneously - returning the first match.  It does\\n    this by creating a huge (a|b|c) regex - each individual item wrapped with ()\\n    and joined by `|` - using match groups to track position.  When a match is\\n    found checking which position in the array has content allows us to figure\\n    out which of the original regexes / match groups triggered the match.\\n\\n    The match object itself (the result of `Regex.exec`) is returned but also\\n    enhanced by merging in any meta-data that was registered with the regex.\\n    This is how we keep track of which mode matched, and what type of rule\\n    (`illegal`, `begin`, end, etc).\\n  */\\n  class MultiRegex {\\n    constructor() {\\n      this.matchIndexes = {};\\n      // @ts-ignore\\n      this.regexes = [];\\n      this.matchAt = 1;\\n      this.position = 0;\\n    }\\n\\n    // @ts-ignore\\n    addRule(re, opts) {\\n      opts.position = this.position++;\\n      // @ts-ignore\\n      this.matchIndexes[this.matchAt] = opts;\\n      this.regexes.push([opts, re]);\\n      this.matchAt += countMatchGroups(re) + 1;\\n    }\\n\\n    compile() {\\n      if (this.regexes.length === 0) {\\n        // avoids the need to check length every time exec is called\\n        // @ts-ignore\\n        this.exec = () => null;\\n      }\\n      const terminators = this.regexes.map(el => el[1]);\\n      this.matcherRe = langRe(_rewriteBackreferences(terminators, { joinWith: '|' }), true);\\n      this.lastIndex = 0;\\n    }\\n\\n    /** @param {string} s */\\n    exec(s) {\\n      this.matcherRe.lastIndex = this.lastIndex;\\n      const match = this.matcherRe.exec(s);\\n      if (!match) { return null; }\\n\\n      // eslint-disable-next-line no-undefined\\n      const i = match.findIndex((el, i) => i > 0 && el !== undefined);\\n      // @ts-ignore\\n      const matchData = this.matchIndexes[i];\\n      // trim off any earlier non-relevant match groups (ie, the other regex\\n      // match groups that make up the multi-matcher)\\n      match.splice(0, i);\\n\\n      return Object.assign(match, matchData);\\n    }\\n  }\\n\\n  /*\\n    Created to solve the key deficiently with MultiRegex - there is no way to\\n    test for multiple matches at a single location.  Why would we need to do\\n    that?  In the future a more dynamic engine will allow certain matches to be\\n    ignored.  An example: if we matched say the 3rd regex in a large group but\\n    decided to ignore it - we'd need to started testing again at the 4th\\n    regex... but MultiRegex itself gives us no real way to do that.\\n\\n    So what this class creates MultiRegexs on the fly for whatever search\\n    position they are needed.\\n\\n    NOTE: These additional MultiRegex objects are created dynamically.  For most\\n    grammars most of the time we will never actually need anything more than the\\n    first MultiRegex - so this shouldn't have too much overhead.\\n\\n    Say this is our search group, and we match regex3, but wish to ignore it.\\n\\n      regex1 | regex2 | regex3 | regex4 | regex5    ' ie, startAt = 0\\n\\n    What we need is a new MultiRegex that only includes the remaining\\n    possibilities:\\n\\n      regex4 | regex5                               ' ie, startAt = 3\\n\\n    This class wraps all that complexity up in a simple API... `startAt` decides\\n    where in the array of expressions to start doing the matching. It\\n    auto-increments, so if a match is found at position 2, then startAt will be\\n    set to 3.  If the end is reached startAt will return to 0.\\n\\n    MOST of the time the parser will be setting startAt manually to 0.\\n  */\\n  class ResumableMultiRegex {\\n    constructor() {\\n      // @ts-ignore\\n      this.rules = [];\\n      // @ts-ignore\\n      this.multiRegexes = [];\\n      this.count = 0;\\n\\n      this.lastIndex = 0;\\n      this.regexIndex = 0;\\n    }\\n\\n    // @ts-ignore\\n    getMatcher(index) {\\n      if (this.multiRegexes[index]) return this.multiRegexes[index];\\n\\n      const matcher = new MultiRegex();\\n      this.rules.slice(index).forEach(([re, opts]) => matcher.addRule(re, opts));\\n      matcher.compile();\\n      this.multiRegexes[index] = matcher;\\n      return matcher;\\n    }\\n\\n    resumingScanAtSamePosition() {\\n      return this.regexIndex !== 0;\\n    }\\n\\n    considerAll() {\\n      this.regexIndex = 0;\\n    }\\n\\n    // @ts-ignore\\n    addRule(re, opts) {\\n      this.rules.push([re, opts]);\\n      if (opts.type === \\\"begin\\\") this.count++;\\n    }\\n\\n    /** @param {string} s */\\n    exec(s) {\\n      const m = this.getMatcher(this.regexIndex);\\n      m.lastIndex = this.lastIndex;\\n      let result = m.exec(s);\\n\\n      // The following is because we have no easy way to say \\\"resume scanning at the\\n      // existing position but also skip the current rule ONLY\\\". What happens is\\n      // all prior rules are also skipped which can result in matching the wrong\\n      // thing. Example of matching \\\"booger\\\":\\n\\n      // our matcher is [string, \\\"booger\\\", number]\\n      //\\n      // ....booger....\\n\\n      // if \\\"booger\\\" is ignored then we'd really need a regex to scan from the\\n      // SAME position for only: [string, number] but ignoring \\\"booger\\\" (if it\\n      // was the first match), a simple resume would scan ahead who knows how\\n      // far looking only for \\\"number\\\", ignoring potential string matches (or\\n      // future \\\"booger\\\" matches that might be valid.)\\n\\n      // So what we do: We execute two matchers, one resuming at the same\\n      // position, but the second full matcher starting at the position after:\\n\\n      //     /--- resume first regex match here (for [number])\\n      //     |/---- full match here for [string, \\\"booger\\\", number]\\n      //     vv\\n      // ....booger....\\n\\n      // Which ever results in a match first is then used. So this 3-4 step\\n      // process essentially allows us to say \\\"match at this position, excluding\\n      // a prior rule that was ignored\\\".\\n      //\\n      // 1. Match \\\"booger\\\" first, ignore. Also proves that [string] does non match.\\n      // 2. Resume matching for [number]\\n      // 3. Match at index + 1 for [string, \\\"booger\\\", number]\\n      // 4. If #2 and #3 result in matches, which came first?\\n      if (this.resumingScanAtSamePosition()) {\\n        if (result && result.index === this.lastIndex) ; else { // use the second matcher result\\n          const m2 = this.getMatcher(0);\\n          m2.lastIndex = this.lastIndex + 1;\\n          result = m2.exec(s);\\n        }\\n      }\\n\\n      if (result) {\\n        this.regexIndex += result.position + 1;\\n        if (this.regexIndex === this.count) {\\n          // wrap-around to considering all matches again\\n          this.considerAll();\\n        }\\n      }\\n\\n      return result;\\n    }\\n  }\\n\\n  /**\\n   * Given a mode, builds a huge ResumableMultiRegex that can be used to walk\\n   * the content and find matches.\\n   *\\n   * @param {CompiledMode} mode\\n   * @returns {ResumableMultiRegex}\\n   */\\n  function buildModeRegex(mode) {\\n    const mm = new ResumableMultiRegex();\\n\\n    mode.contains.forEach(term => mm.addRule(term.begin, { rule: term, type: \\\"begin\\\" }));\\n\\n    if (mode.terminatorEnd) {\\n      mm.addRule(mode.terminatorEnd, { type: \\\"end\\\" });\\n    }\\n    if (mode.illegal) {\\n      mm.addRule(mode.illegal, { type: \\\"illegal\\\" });\\n    }\\n\\n    return mm;\\n  }\\n\\n  /** skip vs abort vs ignore\\n   *\\n   * @skip   - The mode is still entered and exited normally (and contains rules apply),\\n   *           but all content is held and added to the parent buffer rather than being\\n   *           output when the mode ends.  Mostly used with `sublanguage` to build up\\n   *           a single large buffer than can be parsed by sublanguage.\\n   *\\n   *             - The mode begin ands ends normally.\\n   *             - Content matched is added to the parent mode buffer.\\n   *             - The parser cursor is moved forward normally.\\n   *\\n   * @abort  - A hack placeholder until we have ignore.  Aborts the mode (as if it\\n   *           never matched) but DOES NOT continue to match subsequent `contains`\\n   *           modes.  Abort is bad/suboptimal because it can result in modes\\n   *           farther down not getting applied because an earlier rule eats the\\n   *           content but then aborts.\\n   *\\n   *             - The mode does not begin.\\n   *             - Content matched by `begin` is added to the mode buffer.\\n   *             - The parser cursor is moved forward accordingly.\\n   *\\n   * @ignore - Ignores the mode (as if it never matched) and continues to match any\\n   *           subsequent `contains` modes.  Ignore isn't technically possible with\\n   *           the current parser implementation.\\n   *\\n   *             - The mode does not begin.\\n   *             - Content matched by `begin` is ignored.\\n   *             - The parser cursor is not moved forward.\\n   */\\n\\n  /**\\n   * Compiles an individual mode\\n   *\\n   * This can raise an error if the mode contains certain detectable known logic\\n   * issues.\\n   * @param {Mode} mode\\n   * @param {CompiledMode | null} [parent]\\n   * @returns {CompiledMode | never}\\n   */\\n  function compileMode(mode, parent) {\\n    const cmode = /** @type CompiledMode */ (mode);\\n    if (mode.isCompiled) return cmode;\\n\\n    [\\n      scopeClassName,\\n      // do this early so compiler extensions generally don't have to worry about\\n      // the distinction between match/begin\\n      compileMatch,\\n      MultiClass,\\n      beforeMatchExt\\n    ].forEach(ext => ext(mode, parent));\\n\\n    language.compilerExtensions.forEach(ext => ext(mode, parent));\\n\\n    // __beforeBegin is considered private API, internal use only\\n    mode.__beforeBegin = null;\\n\\n    [\\n      beginKeywords,\\n      // do this later so compiler extensions that come earlier have access to the\\n      // raw array if they wanted to perhaps manipulate it, etc.\\n      compileIllegal,\\n      // default to 1 relevance if not specified\\n      compileRelevance\\n    ].forEach(ext => ext(mode, parent));\\n\\n    mode.isCompiled = true;\\n\\n    let keywordPattern = null;\\n    if (typeof mode.keywords === \\\"object\\\" && mode.keywords.$pattern) {\\n      // we need a copy because keywords might be compiled multiple times\\n      // so we can't go deleting $pattern from the original on the first\\n      // pass\\n      mode.keywords = Object.assign({}, mode.keywords);\\n      keywordPattern = mode.keywords.$pattern;\\n      delete mode.keywords.$pattern;\\n    }\\n    keywordPattern = keywordPattern || /\\\\w+/;\\n\\n    if (mode.keywords) {\\n      mode.keywords = compileKeywords(mode.keywords, language.case_insensitive);\\n    }\\n\\n    cmode.keywordPatternRe = langRe(keywordPattern, true);\\n\\n    if (parent) {\\n      if (!mode.begin) mode.begin = /\\\\B|\\\\b/;\\n      cmode.beginRe = langRe(cmode.begin);\\n      if (!mode.end && !mode.endsWithParent) mode.end = /\\\\B|\\\\b/;\\n      if (mode.end) cmode.endRe = langRe(cmode.end);\\n      cmode.terminatorEnd = source(cmode.end) || '';\\n      if (mode.endsWithParent && parent.terminatorEnd) {\\n        cmode.terminatorEnd += (mode.end ? '|' : '') + parent.terminatorEnd;\\n      }\\n    }\\n    if (mode.illegal) cmode.illegalRe = langRe(/** @type {RegExp | string} */ (mode.illegal));\\n    if (!mode.contains) mode.contains = [];\\n\\n    mode.contains = [].concat(...mode.contains.map(function(c) {\\n      return expandOrCloneMode(c === 'self' ? mode : c);\\n    }));\\n    mode.contains.forEach(function(c) { compileMode(/** @type Mode */ (c), cmode); });\\n\\n    if (mode.starts) {\\n      compileMode(mode.starts, parent);\\n    }\\n\\n    cmode.matcher = buildModeRegex(cmode);\\n    return cmode;\\n  }\\n\\n  if (!language.compilerExtensions) language.compilerExtensions = [];\\n\\n  // self is not valid at the top-level\\n  if (language.contains && language.contains.includes('self')) {\\n    throw new Error(\\\"ERR: contains `self` is not supported at the top-level of a language.  See documentation.\\\");\\n  }\\n\\n  // we need a null object, which inherit will guarantee\\n  language.classNameAliases = inherit$1(language.classNameAliases || {});\\n\\n  return compileMode(/** @type Mode */ (language));\\n}\\n\\n/**\\n * Determines if a mode has a dependency on it's parent or not\\n *\\n * If a mode does have a parent dependency then often we need to clone it if\\n * it's used in multiple places so that each copy points to the correct parent,\\n * where-as modes without a parent can often safely be re-used at the bottom of\\n * a mode chain.\\n *\\n * @param {Mode | null} mode\\n * @returns {boolean} - is there a dependency on the parent?\\n * */\\nfunction dependencyOnParent(mode) {\\n  if (!mode) return false;\\n\\n  return mode.endsWithParent || dependencyOnParent(mode.starts);\\n}\\n\\n/**\\n * Expands a mode or clones it if necessary\\n *\\n * This is necessary for modes with parental dependenceis (see notes on\\n * `dependencyOnParent`) and for nodes that have `variants` - which must then be\\n * exploded into their own individual modes at compile time.\\n *\\n * @param {Mode} mode\\n * @returns {Mode | Mode[]}\\n * */\\nfunction expandOrCloneMode(mode) {\\n  if (mode.variants && !mode.cachedVariants) {\\n    mode.cachedVariants = mode.variants.map(function(variant) {\\n      return inherit$1(mode, { variants: null }, variant);\\n    });\\n  }\\n\\n  // EXPAND\\n  // if we have variants then essentially \\\"replace\\\" the mode with the variants\\n  // this happens in compileMode, where this function is called from\\n  if (mode.cachedVariants) {\\n    return mode.cachedVariants;\\n  }\\n\\n  // CLONE\\n  // if we have dependencies on parents then we need a unique\\n  // instance of ourselves, so we can be reused with many\\n  // different parents without issue\\n  if (dependencyOnParent(mode)) {\\n    return inherit$1(mode, { starts: mode.starts ? inherit$1(mode.starts) : null });\\n  }\\n\\n  if (Object.isFrozen(mode)) {\\n    return inherit$1(mode);\\n  }\\n\\n  // no special dependency issues, just return ourselves\\n  return mode;\\n}\\n\\nvar version = \\\"11.3.1\\\";\\n\\nclass HTMLInjectionError extends Error {\\n  constructor(reason, html) {\\n    super(reason);\\n    this.name = \\\"HTMLInjectionError\\\";\\n    this.html = html;\\n  }\\n}\\n\\n/*\\nSyntax highlighting with language autodetection.\\nhttps://highlightjs.org/\\n*/\\n\\n/**\\n@typedef {import('highlight.js').Mode} Mode\\n@typedef {import('highlight.js').CompiledMode} CompiledMode\\n@typedef {import('highlight.js').CompiledScope} CompiledScope\\n@typedef {import('highlight.js').Language} Language\\n@typedef {import('highlight.js').HLJSApi} HLJSApi\\n@typedef {import('highlight.js').HLJSPlugin} HLJSPlugin\\n@typedef {import('highlight.js').PluginEvent} PluginEvent\\n@typedef {import('highlight.js').HLJSOptions} HLJSOptions\\n@typedef {import('highlight.js').LanguageFn} LanguageFn\\n@typedef {import('highlight.js').HighlightedHTMLElement} HighlightedHTMLElement\\n@typedef {import('highlight.js').BeforeHighlightContext} BeforeHighlightContext\\n@typedef {import('highlight.js/private').MatchType} MatchType\\n@typedef {import('highlight.js/private').KeywordData} KeywordData\\n@typedef {import('highlight.js/private').EnhancedMatch} EnhancedMatch\\n@typedef {import('highlight.js/private').AnnotatedError} AnnotatedError\\n@typedef {import('highlight.js').AutoHighlightResult} AutoHighlightResult\\n@typedef {import('highlight.js').HighlightOptions} HighlightOptions\\n@typedef {import('highlight.js').HighlightResult} HighlightResult\\n*/\\n\\n\\nconst escape = escapeHTML;\\nconst inherit = inherit$1;\\nconst NO_MATCH = Symbol(\\\"nomatch\\\");\\nconst MAX_KEYWORD_HITS = 7;\\n\\n/**\\n * @param {any} hljs - object that is extended (legacy)\\n * @returns {HLJSApi}\\n */\\nconst HLJS = function(hljs) {\\n  // Global internal variables used within the highlight.js library.\\n  /** @type {Record<string, Language>} */\\n  const languages = Object.create(null);\\n  /** @type {Record<string, string>} */\\n  const aliases = Object.create(null);\\n  /** @type {HLJSPlugin[]} */\\n  const plugins = [];\\n\\n  // safe/production mode - swallows more errors, tries to keep running\\n  // even if a single syntax or parse hits a fatal error\\n  let SAFE_MODE = true;\\n  const LANGUAGE_NOT_FOUND = \\\"Could not find the language '{}', did you forget to load/include a language module?\\\";\\n  /** @type {Language} */\\n  const PLAINTEXT_LANGUAGE = { disableAutodetect: true, name: 'Plain text', contains: [] };\\n\\n  // Global options used when within external APIs. This is modified when\\n  // calling the `hljs.configure` function.\\n  /** @type HLJSOptions */\\n  let options = {\\n    ignoreUnescapedHTML: false,\\n    throwUnescapedHTML: false,\\n    noHighlightRe: /^(no-?highlight)$/i,\\n    languageDetectRe: /\\\\blang(?:uage)?-([\\\\w-]+)\\\\b/i,\\n    classPrefix: 'hljs-',\\n    cssSelector: 'pre code',\\n    languages: null,\\n    // beta configuration options, subject to change, welcome to discuss\\n    // https://github.com/highlightjs/highlight.js/issues/1086\\n    __emitter: TokenTreeEmitter\\n  };\\n\\n  /* Utility functions */\\n\\n  /**\\n   * Tests a language name to see if highlighting should be skipped\\n   * @param {string} languageName\\n   */\\n  function shouldNotHighlight(languageName) {\\n    return options.noHighlightRe.test(languageName);\\n  }\\n\\n  /**\\n   * @param {HighlightedHTMLElement} block - the HTML element to determine language for\\n   */\\n  function blockLanguage(block) {\\n    let classes = block.className + ' ';\\n\\n    classes += block.parentNode ? block.parentNode.className : '';\\n\\n    // language-* takes precedence over non-prefixed class names.\\n    const match = options.languageDetectRe.exec(classes);\\n    if (match) {\\n      const language = getLanguage(match[1]);\\n      if (!language) {\\n        warn(LANGUAGE_NOT_FOUND.replace(\\\"{}\\\", match[1]));\\n        warn(\\\"Falling back to no-highlight mode for this block.\\\", block);\\n      }\\n      return language ? match[1] : 'no-highlight';\\n    }\\n\\n    return classes\\n      .split(/\\\\s+/)\\n      .find((_class) => shouldNotHighlight(_class) || getLanguage(_class));\\n  }\\n\\n  /**\\n   * Core highlighting function.\\n   *\\n   * OLD API\\n   * highlight(lang, code, ignoreIllegals, continuation)\\n   *\\n   * NEW API\\n   * highlight(code, {lang, ignoreIllegals})\\n   *\\n   * @param {string} codeOrLanguageName - the language to use for highlighting\\n   * @param {string | HighlightOptions} optionsOrCode - the code to highlight\\n   * @param {boolean} [ignoreIllegals] - whether to ignore illegal matches, default is to bail\\n   *\\n   * @returns {HighlightResult} Result - an object that represents the result\\n   * @property {string} language - the language name\\n   * @property {number} relevance - the relevance score\\n   * @property {string} value - the highlighted HTML code\\n   * @property {string} code - the original raw code\\n   * @property {CompiledMode} top - top of the current mode stack\\n   * @property {boolean} illegal - indicates whether any illegal matches were found\\n  */\\n  function highlight(codeOrLanguageName, optionsOrCode, ignoreIllegals) {\\n    let code = \\\"\\\";\\n    let languageName = \\\"\\\";\\n    if (typeof optionsOrCode === \\\"object\\\") {\\n      code = codeOrLanguageName;\\n      ignoreIllegals = optionsOrCode.ignoreIllegals;\\n      languageName = optionsOrCode.language;\\n    } else {\\n      // old API\\n      deprecated(\\\"10.7.0\\\", \\\"highlight(lang, code, ...args) has been deprecated.\\\");\\n      deprecated(\\\"10.7.0\\\", \\\"Please use highlight(code, options) instead.\\\\nhttps://github.com/highlightjs/highlight.js/issues/2277\\\");\\n      languageName = codeOrLanguageName;\\n      code = optionsOrCode;\\n    }\\n\\n    // https://github.com/highlightjs/highlight.js/issues/3149\\n    // eslint-disable-next-line no-undefined\\n    if (ignoreIllegals === undefined) { ignoreIllegals = true; }\\n\\n    /** @type {BeforeHighlightContext} */\\n    const context = {\\n      code,\\n      language: languageName\\n    };\\n    // the plugin can change the desired language or the code to be highlighted\\n    // just be changing the object it was passed\\n    fire(\\\"before:highlight\\\", context);\\n\\n    // a before plugin can usurp the result completely by providing it's own\\n    // in which case we don't even need to call highlight\\n    const result = context.result\\n      ? context.result\\n      : _highlight(context.language, context.code, ignoreIllegals);\\n\\n    result.code = context.code;\\n    // the plugin can change anything in result to suite it\\n    fire(\\\"after:highlight\\\", result);\\n\\n    return result;\\n  }\\n\\n  /**\\n   * private highlight that's used internally and does not fire callbacks\\n   *\\n   * @param {string} languageName - the language to use for highlighting\\n   * @param {string} codeToHighlight - the code to highlight\\n   * @param {boolean?} [ignoreIllegals] - whether to ignore illegal matches, default is to bail\\n   * @param {CompiledMode?} [continuation] - current continuation mode, if any\\n   * @returns {HighlightResult} - result of the highlight operation\\n  */\\n  function _highlight(languageName, codeToHighlight, ignoreIllegals, continuation) {\\n    const keywordHits = Object.create(null);\\n\\n    /**\\n     * Return keyword data if a match is a keyword\\n     * @param {CompiledMode} mode - current mode\\n     * @param {string} matchText - the textual match\\n     * @returns {KeywordData | false}\\n     */\\n    function keywordData(mode, matchText) {\\n      return mode.keywords[matchText];\\n    }\\n\\n    function processKeywords() {\\n      if (!top.keywords) {\\n        emitter.addText(modeBuffer);\\n        return;\\n      }\\n\\n      let lastIndex = 0;\\n      top.keywordPatternRe.lastIndex = 0;\\n      let match = top.keywordPatternRe.exec(modeBuffer);\\n      let buf = \\\"\\\";\\n\\n      while (match) {\\n        buf += modeBuffer.substring(lastIndex, match.index);\\n        const word = language.case_insensitive ? match[0].toLowerCase() : match[0];\\n        const data = keywordData(top, word);\\n        if (data) {\\n          const [kind, keywordRelevance] = data;\\n          emitter.addText(buf);\\n          buf = \\\"\\\";\\n\\n          keywordHits[word] = (keywordHits[word] || 0) + 1;\\n          if (keywordHits[word] <= MAX_KEYWORD_HITS) relevance += keywordRelevance;\\n          if (kind.startsWith(\\\"_\\\")) {\\n            // _ implied for relevance only, do not highlight\\n            // by applying a class name\\n            buf += match[0];\\n          } else {\\n            const cssClass = language.classNameAliases[kind] || kind;\\n            emitter.addKeyword(match[0], cssClass);\\n          }\\n        } else {\\n          buf += match[0];\\n        }\\n        lastIndex = top.keywordPatternRe.lastIndex;\\n        match = top.keywordPatternRe.exec(modeBuffer);\\n      }\\n      buf += modeBuffer.substr(lastIndex);\\n      emitter.addText(buf);\\n    }\\n\\n    function processSubLanguage() {\\n      if (modeBuffer === \\\"\\\") return;\\n      /** @type HighlightResult */\\n      let result = null;\\n\\n      if (typeof top.subLanguage === 'string') {\\n        if (!languages[top.subLanguage]) {\\n          emitter.addText(modeBuffer);\\n          return;\\n        }\\n        result = _highlight(top.subLanguage, modeBuffer, true, continuations[top.subLanguage]);\\n        continuations[top.subLanguage] = /** @type {CompiledMode} */ (result._top);\\n      } else {\\n        result = highlightAuto(modeBuffer, top.subLanguage.length ? top.subLanguage : null);\\n      }\\n\\n      // Counting embedded language score towards the host language may be disabled\\n      // with zeroing the containing mode relevance. Use case in point is Markdown that\\n      // allows XML everywhere and makes every XML snippet to have a much larger Markdown\\n      // score.\\n      if (top.relevance > 0) {\\n        relevance += result.relevance;\\n      }\\n      emitter.addSublanguage(result._emitter, result.language);\\n    }\\n\\n    function processBuffer() {\\n      if (top.subLanguage != null) {\\n        processSubLanguage();\\n      } else {\\n        processKeywords();\\n      }\\n      modeBuffer = '';\\n    }\\n\\n    /**\\n     * @param {CompiledScope} scope\\n     * @param {RegExpMatchArray} match\\n     */\\n    function emitMultiClass(scope, match) {\\n      let i = 1;\\n      // eslint-disable-next-line no-undefined\\n      while (match[i] !== undefined) {\\n        if (!scope._emit[i]) { i++; continue; }\\n        const klass = language.classNameAliases[scope[i]] || scope[i];\\n        const text = match[i];\\n        if (klass) {\\n          emitter.addKeyword(text, klass);\\n        } else {\\n          modeBuffer = text;\\n          processKeywords();\\n          modeBuffer = \\\"\\\";\\n        }\\n        i++;\\n      }\\n    }\\n\\n    /**\\n     * @param {CompiledMode} mode - new mode to start\\n     * @param {RegExpMatchArray} match\\n     */\\n    function startNewMode(mode, match) {\\n      if (mode.scope && typeof mode.scope === \\\"string\\\") {\\n        emitter.openNode(language.classNameAliases[mode.scope] || mode.scope);\\n      }\\n      if (mode.beginScope) {\\n        // beginScope just wraps the begin match itself in a scope\\n        if (mode.beginScope._wrap) {\\n          emitter.addKeyword(modeBuffer, language.classNameAliases[mode.beginScope._wrap] || mode.beginScope._wrap);\\n          modeBuffer = \\\"\\\";\\n        } else if (mode.beginScope._multi) {\\n          // at this point modeBuffer should just be the match\\n          emitMultiClass(mode.beginScope, match);\\n          modeBuffer = \\\"\\\";\\n        }\\n      }\\n\\n      top = Object.create(mode, { parent: { value: top } });\\n      return top;\\n    }\\n\\n    /**\\n     * @param {CompiledMode } mode - the mode to potentially end\\n     * @param {RegExpMatchArray} match - the latest match\\n     * @param {string} matchPlusRemainder - match plus remainder of content\\n     * @returns {CompiledMode | void} - the next mode, or if void continue on in current mode\\n     */\\n    function endOfMode(mode, match, matchPlusRemainder) {\\n      let matched = startsWith(mode.endRe, matchPlusRemainder);\\n\\n      if (matched) {\\n        if (mode[\\\"on:end\\\"]) {\\n          const resp = new Response(mode);\\n          mode[\\\"on:end\\\"](match, resp);\\n          if (resp.isMatchIgnored) matched = false;\\n        }\\n\\n        if (matched) {\\n          while (mode.endsParent && mode.parent) {\\n            mode = mode.parent;\\n          }\\n          return mode;\\n        }\\n      }\\n      // even if on:end fires an `ignore` it's still possible\\n      // that we might trigger the end node because of a parent mode\\n      if (mode.endsWithParent) {\\n        return endOfMode(mode.parent, match, matchPlusRemainder);\\n      }\\n    }\\n\\n    /**\\n     * Handle matching but then ignoring a sequence of text\\n     *\\n     * @param {string} lexeme - string containing full match text\\n     */\\n    function doIgnore(lexeme) {\\n      if (top.matcher.regexIndex === 0) {\\n        // no more regexes to potentially match here, so we move the cursor forward one\\n        // space\\n        modeBuffer += lexeme[0];\\n        return 1;\\n      } else {\\n        // no need to move the cursor, we still have additional regexes to try and\\n        // match at this very spot\\n        resumeScanAtSamePosition = true;\\n        return 0;\\n      }\\n    }\\n\\n    /**\\n     * Handle the start of a new potential mode match\\n     *\\n     * @param {EnhancedMatch} match - the current match\\n     * @returns {number} how far to advance the parse cursor\\n     */\\n    function doBeginMatch(match) {\\n      const lexeme = match[0];\\n      const newMode = match.rule;\\n\\n      const resp = new Response(newMode);\\n      // first internal before callbacks, then the public ones\\n      const beforeCallbacks = [newMode.__beforeBegin, newMode[\\\"on:begin\\\"]];\\n      for (const cb of beforeCallbacks) {\\n        if (!cb) continue;\\n        cb(match, resp);\\n        if (resp.isMatchIgnored) return doIgnore(lexeme);\\n      }\\n\\n      if (newMode.skip) {\\n        modeBuffer += lexeme;\\n      } else {\\n        if (newMode.excludeBegin) {\\n          modeBuffer += lexeme;\\n        }\\n        processBuffer();\\n        if (!newMode.returnBegin && !newMode.excludeBegin) {\\n          modeBuffer = lexeme;\\n        }\\n      }\\n      startNewMode(newMode, match);\\n      return newMode.returnBegin ? 0 : lexeme.length;\\n    }\\n\\n    /**\\n     * Handle the potential end of mode\\n     *\\n     * @param {RegExpMatchArray} match - the current match\\n     */\\n    function doEndMatch(match) {\\n      const lexeme = match[0];\\n      const matchPlusRemainder = codeToHighlight.substr(match.index);\\n\\n      const endMode = endOfMode(top, match, matchPlusRemainder);\\n      if (!endMode) { return NO_MATCH; }\\n\\n      const origin = top;\\n      if (top.endScope && top.endScope._wrap) {\\n        processBuffer();\\n        emitter.addKeyword(lexeme, top.endScope._wrap);\\n      } else if (top.endScope && top.endScope._multi) {\\n        processBuffer();\\n        emitMultiClass(top.endScope, match);\\n      } else if (origin.skip) {\\n        modeBuffer += lexeme;\\n      } else {\\n        if (!(origin.returnEnd || origin.excludeEnd)) {\\n          modeBuffer += lexeme;\\n        }\\n        processBuffer();\\n        if (origin.excludeEnd) {\\n          modeBuffer = lexeme;\\n        }\\n      }\\n      do {\\n        if (top.scope) {\\n          emitter.closeNode();\\n        }\\n        if (!top.skip && !top.subLanguage) {\\n          relevance += top.relevance;\\n        }\\n        top = top.parent;\\n      } while (top !== endMode.parent);\\n      if (endMode.starts) {\\n        startNewMode(endMode.starts, match);\\n      }\\n      return origin.returnEnd ? 0 : lexeme.length;\\n    }\\n\\n    function processContinuations() {\\n      const list = [];\\n      for (let current = top; current !== language; current = current.parent) {\\n        if (current.scope) {\\n          list.unshift(current.scope);\\n        }\\n      }\\n      list.forEach(item => emitter.openNode(item));\\n    }\\n\\n    /** @type {{type?: MatchType, index?: number, rule?: Mode}}} */\\n    let lastMatch = {};\\n\\n    /**\\n     *  Process an individual match\\n     *\\n     * @param {string} textBeforeMatch - text preceding the match (since the last match)\\n     * @param {EnhancedMatch} [match] - the match itself\\n     */\\n    function processLexeme(textBeforeMatch, match) {\\n      const lexeme = match && match[0];\\n\\n      // add non-matched text to the current mode buffer\\n      modeBuffer += textBeforeMatch;\\n\\n      if (lexeme == null) {\\n        processBuffer();\\n        return 0;\\n      }\\n\\n      // we've found a 0 width match and we're stuck, so we need to advance\\n      // this happens when we have badly behaved rules that have optional matchers to the degree that\\n      // sometimes they can end up matching nothing at all\\n      // Ref: https://github.com/highlightjs/highlight.js/issues/2140\\n      if (lastMatch.type === \\\"begin\\\" && match.type === \\\"end\\\" && lastMatch.index === match.index && lexeme === \\\"\\\") {\\n        // spit the \\\"skipped\\\" character that our regex choked on back into the output sequence\\n        modeBuffer += codeToHighlight.slice(match.index, match.index + 1);\\n        if (!SAFE_MODE) {\\n          /** @type {AnnotatedError} */\\n          const err = new Error(`0 width match regex (${languageName})`);\\n          err.languageName = languageName;\\n          err.badRule = lastMatch.rule;\\n          throw err;\\n        }\\n        return 1;\\n      }\\n      lastMatch = match;\\n\\n      if (match.type === \\\"begin\\\") {\\n        return doBeginMatch(match);\\n      } else if (match.type === \\\"illegal\\\" && !ignoreIllegals) {\\n        // illegal match, we do not continue processing\\n        /** @type {AnnotatedError} */\\n        const err = new Error('Illegal lexeme \\\"' + lexeme + '\\\" for mode \\\"' + (top.scope || '<unnamed>') + '\\\"');\\n        err.mode = top;\\n        throw err;\\n      } else if (match.type === \\\"end\\\") {\\n        const processed = doEndMatch(match);\\n        if (processed !== NO_MATCH) {\\n          return processed;\\n        }\\n      }\\n\\n      // edge case for when illegal matches $ (end of line) which is technically\\n      // a 0 width match but not a begin/end match so it's not caught by the\\n      // first handler (when ignoreIllegals is true)\\n      if (match.type === \\\"illegal\\\" && lexeme === \\\"\\\") {\\n        // advance so we aren't stuck in an infinite loop\\n        return 1;\\n      }\\n\\n      // infinite loops are BAD, this is a last ditch catch all. if we have a\\n      // decent number of iterations yet our index (cursor position in our\\n      // parsing) still 3x behind our index then something is very wrong\\n      // so we bail\\n      if (iterations > 100000 && iterations > match.index * 3) {\\n        const err = new Error('potential infinite loop, way more iterations than matches');\\n        throw err;\\n      }\\n\\n      /*\\n      Why might be find ourselves here?  An potential end match that was\\n      triggered but could not be completed.  IE, `doEndMatch` returned NO_MATCH.\\n      (this could be because a callback requests the match be ignored, etc)\\n\\n      This causes no real harm other than stopping a few times too many.\\n      */\\n\\n      modeBuffer += lexeme;\\n      return lexeme.length;\\n    }\\n\\n    const language = getLanguage(languageName);\\n    if (!language) {\\n      error(LANGUAGE_NOT_FOUND.replace(\\\"{}\\\", languageName));\\n      throw new Error('Unknown language: \\\"' + languageName + '\\\"');\\n    }\\n\\n    const md = compileLanguage(language);\\n    let result = '';\\n    /** @type {CompiledMode} */\\n    let top = continuation || md;\\n    /** @type Record<string,CompiledMode> */\\n    const continuations = {}; // keep continuations for sub-languages\\n    const emitter = new options.__emitter(options);\\n    processContinuations();\\n    let modeBuffer = '';\\n    let relevance = 0;\\n    let index = 0;\\n    let iterations = 0;\\n    let resumeScanAtSamePosition = false;\\n\\n    try {\\n      top.matcher.considerAll();\\n\\n      for (;;) {\\n        iterations++;\\n        if (resumeScanAtSamePosition) {\\n          // only regexes not matched previously will now be\\n          // considered for a potential match\\n          resumeScanAtSamePosition = false;\\n        } else {\\n          top.matcher.considerAll();\\n        }\\n        top.matcher.lastIndex = index;\\n\\n        const match = top.matcher.exec(codeToHighlight);\\n        // console.log(\\\"match\\\", match[0], match.rule && match.rule.begin)\\n\\n        if (!match) break;\\n\\n        const beforeMatch = codeToHighlight.substring(index, match.index);\\n        const processedCount = processLexeme(beforeMatch, match);\\n        index = match.index + processedCount;\\n      }\\n      processLexeme(codeToHighlight.substr(index));\\n      emitter.closeAllNodes();\\n      emitter.finalize();\\n      result = emitter.toHTML();\\n\\n      return {\\n        language: languageName,\\n        value: result,\\n        relevance: relevance,\\n        illegal: false,\\n        _emitter: emitter,\\n        _top: top\\n      };\\n    } catch (err) {\\n      if (err.message && err.message.includes('Illegal')) {\\n        return {\\n          language: languageName,\\n          value: escape(codeToHighlight),\\n          illegal: true,\\n          relevance: 0,\\n          _illegalBy: {\\n            message: err.message,\\n            index: index,\\n            context: codeToHighlight.slice(index - 100, index + 100),\\n            mode: err.mode,\\n            resultSoFar: result\\n          },\\n          _emitter: emitter\\n        };\\n      } else if (SAFE_MODE) {\\n        return {\\n          language: languageName,\\n          value: escape(codeToHighlight),\\n          illegal: false,\\n          relevance: 0,\\n          errorRaised: err,\\n          _emitter: emitter,\\n          _top: top\\n        };\\n      } else {\\n        throw err;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * returns a valid highlight result, without actually doing any actual work,\\n   * auto highlight starts with this and it's possible for small snippets that\\n   * auto-detection may not find a better match\\n   * @param {string} code\\n   * @returns {HighlightResult}\\n   */\\n  function justTextHighlightResult(code) {\\n    const result = {\\n      value: escape(code),\\n      illegal: false,\\n      relevance: 0,\\n      _top: PLAINTEXT_LANGUAGE,\\n      _emitter: new options.__emitter(options)\\n    };\\n    result._emitter.addText(code);\\n    return result;\\n  }\\n\\n  /**\\n  Highlighting with language detection. Accepts a string with the code to\\n  highlight. Returns an object with the following properties:\\n\\n  - language (detected language)\\n  - relevance (int)\\n  - value (an HTML string with highlighting markup)\\n  - secondBest (object with the same structure for second-best heuristically\\n    detected language, may be absent)\\n\\n    @param {string} code\\n    @param {Array<string>} [languageSubset]\\n    @returns {AutoHighlightResult}\\n  */\\n  function highlightAuto(code, languageSubset) {\\n    languageSubset = languageSubset || options.languages || Object.keys(languages);\\n    const plaintext = justTextHighlightResult(code);\\n\\n    const results = languageSubset.filter(getLanguage).filter(autoDetection).map(name =>\\n      _highlight(name, code, false)\\n    );\\n    results.unshift(plaintext); // plaintext is always an option\\n\\n    const sorted = results.sort((a, b) => {\\n      // sort base on relevance\\n      if (a.relevance !== b.relevance) return b.relevance - a.relevance;\\n\\n      // always award the tie to the base language\\n      // ie if C++ and Arduino are tied, it's more likely to be C++\\n      if (a.language && b.language) {\\n        if (getLanguage(a.language).supersetOf === b.language) {\\n          return 1;\\n        } else if (getLanguage(b.language).supersetOf === a.language) {\\n          return -1;\\n        }\\n      }\\n\\n      // otherwise say they are equal, which has the effect of sorting on\\n      // relevance while preserving the original ordering - which is how ties\\n      // have historically been settled, ie the language that comes first always\\n      // wins in the case of a tie\\n      return 0;\\n    });\\n\\n    const [best, secondBest] = sorted;\\n\\n    /** @type {AutoHighlightResult} */\\n    const result = best;\\n    result.secondBest = secondBest;\\n\\n    return result;\\n  }\\n\\n  /**\\n   * Builds new class name for block given the language name\\n   *\\n   * @param {HTMLElement} element\\n   * @param {string} [currentLang]\\n   * @param {string} [resultLang]\\n   */\\n  function updateClassName(element, currentLang, resultLang) {\\n    const language = (currentLang && aliases[currentLang]) || resultLang;\\n\\n    element.classList.add(\\\"hljs\\\");\\n    element.classList.add(`language-${language}`);\\n  }\\n\\n  /**\\n   * Applies highlighting to a DOM node containing code.\\n   *\\n   * @param {HighlightedHTMLElement} element - the HTML element to highlight\\n  */\\n  function highlightElement(element) {\\n    /** @type HTMLElement */\\n    let node = null;\\n    const language = blockLanguage(element);\\n\\n    if (shouldNotHighlight(language)) return;\\n\\n    fire(\\\"before:highlightElement\\\",\\n      { el: element, language: language });\\n\\n    // we should be all text, no child nodes (unescaped HTML) - this is possibly\\n    // an HTML injection attack - it's likely too late if this is already in\\n    // production (the code has likely already done its damage by the time\\n    // we're seeing it)... but we yell loudly about this so that hopefully it's\\n    // more likely to be caught in development before making it to production\\n    if (element.children.length > 0) {\\n      if (!options.ignoreUnescapedHTML) {\\n        console.warn(\\\"One of your code blocks includes unescaped HTML. This is a potentially serious security risk.\\\");\\n        console.warn(\\\"https://github.com/highlightjs/highlight.js/issues/2886\\\");\\n        console.warn(element);\\n      }\\n      if (options.throwUnescapedHTML) {\\n        const err = new HTMLInjectionError(\\n          \\\"One of your code blocks includes unescaped HTML.\\\",\\n          element.innerHTML\\n        );\\n        throw err;\\n      }\\n    }\\n\\n    node = element;\\n    const text = node.textContent;\\n    const result = language ? highlight(text, { language, ignoreIllegals: true }) : highlightAuto(text);\\n\\n    element.innerHTML = result.value;\\n    updateClassName(element, language, result.language);\\n    element.result = {\\n      language: result.language,\\n      // TODO: remove with version 11.0\\n      re: result.relevance,\\n      relevance: result.relevance\\n    };\\n    if (result.secondBest) {\\n      element.secondBest = {\\n        language: result.secondBest.language,\\n        relevance: result.secondBest.relevance\\n      };\\n    }\\n\\n    fire(\\\"after:highlightElement\\\", { el: element, result, text });\\n  }\\n\\n  /**\\n   * Updates highlight.js global options with the passed options\\n   *\\n   * @param {Partial<HLJSOptions>} userOptions\\n   */\\n  function configure(userOptions) {\\n    options = inherit(options, userOptions);\\n  }\\n\\n  // TODO: remove v12, deprecated\\n  const initHighlighting = () => {\\n    highlightAll();\\n    deprecated(\\\"10.6.0\\\", \\\"initHighlighting() deprecated.  Use highlightAll() now.\\\");\\n  };\\n\\n  // TODO: remove v12, deprecated\\n  function initHighlightingOnLoad() {\\n    highlightAll();\\n    deprecated(\\\"10.6.0\\\", \\\"initHighlightingOnLoad() deprecated.  Use highlightAll() now.\\\");\\n  }\\n\\n  let wantsHighlight = false;\\n\\n  /**\\n   * auto-highlights all pre>code elements on the page\\n   */\\n  function highlightAll() {\\n    // if we are called too early in the loading process\\n    if (document.readyState === \\\"loading\\\") {\\n      wantsHighlight = true;\\n      return;\\n    }\\n\\n    const blocks = document.querySelectorAll(options.cssSelector);\\n    blocks.forEach(highlightElement);\\n  }\\n\\n  function boot() {\\n    // if a highlight was requested before DOM was loaded, do now\\n    if (wantsHighlight) highlightAll();\\n  }\\n\\n  // make sure we are in the browser environment\\n  if (typeof window !== 'undefined' && window.addEventListener) {\\n    window.addEventListener('DOMContentLoaded', boot, false);\\n  }\\n\\n  /**\\n   * Register a language grammar module\\n   *\\n   * @param {string} languageName\\n   * @param {LanguageFn} languageDefinition\\n   */\\n  function registerLanguage(languageName, languageDefinition) {\\n    let lang = null;\\n    try {\\n      lang = languageDefinition(hljs);\\n    } catch (error$1) {\\n      error(\\\"Language definition for '{}' could not be registered.\\\".replace(\\\"{}\\\", languageName));\\n      // hard or soft error\\n      if (!SAFE_MODE) { throw error$1; } else { error(error$1); }\\n      // languages that have serious errors are replaced with essentially a\\n      // \\\"plaintext\\\" stand-in so that the code blocks will still get normal\\n      // css classes applied to them - and one bad language won't break the\\n      // entire highlighter\\n      lang = PLAINTEXT_LANGUAGE;\\n    }\\n    // give it a temporary name if it doesn't have one in the meta-data\\n    if (!lang.name) lang.name = languageName;\\n    languages[languageName] = lang;\\n    lang.rawDefinition = languageDefinition.bind(null, hljs);\\n\\n    if (lang.aliases) {\\n      registerAliases(lang.aliases, { languageName });\\n    }\\n  }\\n\\n  /**\\n   * Remove a language grammar module\\n   *\\n   * @param {string} languageName\\n   */\\n  function unregisterLanguage(languageName) {\\n    delete languages[languageName];\\n    for (const alias of Object.keys(aliases)) {\\n      if (aliases[alias] === languageName) {\\n        delete aliases[alias];\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @returns {string[]} List of language internal names\\n   */\\n  function listLanguages() {\\n    return Object.keys(languages);\\n  }\\n\\n  /**\\n   * @param {string} name - name of the language to retrieve\\n   * @returns {Language | undefined}\\n   */\\n  function getLanguage(name) {\\n    name = (name || '').toLowerCase();\\n    return languages[name] || languages[aliases[name]];\\n  }\\n\\n  /**\\n   *\\n   * @param {string|string[]} aliasList - single alias or list of aliases\\n   * @param {{languageName: string}} opts\\n   */\\n  function registerAliases(aliasList, { languageName }) {\\n    if (typeof aliasList === 'string') {\\n      aliasList = [aliasList];\\n    }\\n    aliasList.forEach(alias => { aliases[alias.toLowerCase()] = languageName; });\\n  }\\n\\n  /**\\n   * Determines if a given language has auto-detection enabled\\n   * @param {string} name - name of the language\\n   */\\n  function autoDetection(name) {\\n    const lang = getLanguage(name);\\n    return lang && !lang.disableAutodetect;\\n  }\\n\\n  /**\\n   * Upgrades the old highlightBlock plugins to the new\\n   * highlightElement API\\n   * @param {HLJSPlugin} plugin\\n   */\\n  function upgradePluginAPI(plugin) {\\n    // TODO: remove with v12\\n    if (plugin[\\\"before:highlightBlock\\\"] && !plugin[\\\"before:highlightElement\\\"]) {\\n      plugin[\\\"before:highlightElement\\\"] = (data) => {\\n        plugin[\\\"before:highlightBlock\\\"](\\n          Object.assign({ block: data.el }, data)\\n        );\\n      };\\n    }\\n    if (plugin[\\\"after:highlightBlock\\\"] && !plugin[\\\"after:highlightElement\\\"]) {\\n      plugin[\\\"after:highlightElement\\\"] = (data) => {\\n        plugin[\\\"after:highlightBlock\\\"](\\n          Object.assign({ block: data.el }, data)\\n        );\\n      };\\n    }\\n  }\\n\\n  /**\\n   * @param {HLJSPlugin} plugin\\n   */\\n  function addPlugin(plugin) {\\n    upgradePluginAPI(plugin);\\n    plugins.push(plugin);\\n  }\\n\\n  /**\\n   *\\n   * @param {PluginEvent} event\\n   * @param {any} args\\n   */\\n  function fire(event, args) {\\n    const cb = event;\\n    plugins.forEach(function(plugin) {\\n      if (plugin[cb]) {\\n        plugin[cb](args);\\n      }\\n    });\\n  }\\n\\n  /**\\n   * DEPRECATED\\n   * @param {HighlightedHTMLElement} el\\n   */\\n  function deprecateHighlightBlock(el) {\\n    deprecated(\\\"10.7.0\\\", \\\"highlightBlock will be removed entirely in v12.0\\\");\\n    deprecated(\\\"10.7.0\\\", \\\"Please use highlightElement now.\\\");\\n\\n    return highlightElement(el);\\n  }\\n\\n  /* Interface definition */\\n  Object.assign(hljs, {\\n    highlight,\\n    highlightAuto,\\n    highlightAll,\\n    highlightElement,\\n    // TODO: Remove with v12 API\\n    highlightBlock: deprecateHighlightBlock,\\n    configure,\\n    initHighlighting,\\n    initHighlightingOnLoad,\\n    registerLanguage,\\n    unregisterLanguage,\\n    listLanguages,\\n    getLanguage,\\n    registerAliases,\\n    autoDetection,\\n    inherit,\\n    addPlugin\\n  });\\n\\n  hljs.debugMode = function() { SAFE_MODE = false; };\\n  hljs.safeMode = function() { SAFE_MODE = true; };\\n  hljs.versionString = version;\\n\\n  hljs.regex = {\\n    concat: concat,\\n    lookahead: lookahead,\\n    either: either,\\n    optional: optional,\\n    anyNumberOfTimes: anyNumberOfTimes\\n  };\\n\\n  for (const key in MODES) {\\n    // @ts-ignore\\n    if (typeof MODES[key] === \\\"object\\\") {\\n      // @ts-ignore\\n      deepFreeze$1(MODES[key]);\\n    }\\n  }\\n\\n  // merge all the modes/regexes into our main object\\n  Object.assign(hljs, MODES);\\n\\n  return hljs;\\n};\\n\\n// export an \\\"instance\\\" of the highlighter\\nvar highlight = HLJS({});\\n\\nmodule.exports = highlight;\\nhighlight.HighlightJS = highlight;\\nhighlight.default = highlight;\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,