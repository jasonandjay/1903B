r: false,\n        draggingNode: null,\n        dropNode: null,\n        allowDrop: true\n      }\n    };\n  },\n\n\n  props: {\n    data: {\n      type: Array\n    },\n    emptyText: {\n      type: String,\n      default: function _default() {\n        return Object(lib_locale_[\"t\"])('el.tree.emptyText');\n      }\n    },\n    renderAfterExpand: {\n      type: Boolean,\n      default: true\n    },\n    nodeKey: String,\n    checkStrictly: Boolean,\n    defaultExpandAll: Boolean,\n    expandOnClickNode: {\n      type: Boolean,\n      default: true\n    },\n    checkOnClickNode: Boolean,\n    checkDescendants: {\n      type: Boolean,\n      default: false\n    },\n    autoExpandParent: {\n      type: Boolean,\n      default: true\n    },\n    defaultCheckedKeys: Array,\n    defaultExpandedKeys: Array,\n    currentNodeKey: [String, Number],\n    renderContent: Function,\n    showCheckbox: {\n      type: Boolean,\n      default: false\n    },\n    draggable: {\n      type: Boolean,\n      default: false\n    },\n    allowDrag: Function,\n    allowDrop: Function,\n    props: {\n      default: function _default() {\n        return {\n          children: 'children',\n          label: 'label',\n          disabled: 'disabled'\n        };\n      }\n    },\n    lazy: {\n      type: Boolean,\n      default: false\n    },\n    highlightCurrent: Boolean,\n    load: Function,\n    filterNodeMethod: Function,\n    accordion: Boolean,\n    indent: {\n      type: Number,\n      default: 18\n    },\n    iconClass: String\n  },\n\n  computed: {\n    children: {\n      set: function set(value) {\n        this.data = value;\n      },\n      get: function get() {\n        return this.data;\n      }\n    },\n\n    treeItemArray: function treeItemArray() {\n      return Array.prototype.slice.call(this.treeItems);\n    },\n    isEmpty: function isEmpty() {\n      var childNodes = this.root.childNodes;\n\n      return !childNodes || childNodes.length === 0 || childNodes.every(function (_ref) {\n        var visible = _ref.visible;\n        return !visible;\n      });\n    }\n  },\n\n  watch: {\n    defaultCheckedKeys: function defaultCheckedKeys(newVal) {\n      this.store.setDefaultCheckedKey(newVal);\n    },\n    defaultExpandedKeys: function defaultExpandedKeys(newVal) {\n      this.store.defaultExpandedKeys = newVal;\n      this.store.setDefaultExpandedKeys(newVal);\n    },\n    data: function data(newVal) {\n      this.store.setData(newVal);\n    },\n    checkboxItems: function checkboxItems(val) {\n      Array.prototype.forEach.call(val, function (checkbox) {\n        checkbox.setAttribute('tabindex', -1);\n      });\n    },\n    checkStrictly: function checkStrictly(newVal) {\n      this.store.checkStrictly = newVal;\n    }\n  },\n\n  methods: {\n    filter: function filter(value) {\n      if (!this.filterNodeMethod) throw new Error('[Tree] filterNodeMethod is required when filter');\n      this.store.filter(value);\n    },\n    getNodeKey: function getNodeKey(node) {\n      return util_getNodeKey(this.nodeKey, node.data);\n    },\n    getNodePath: function getNodePath(data) {\n      if (!this.nodeKey) throw new Error('[Tree] nodeKey is required in getNodePath');\n      var node = this.store.getNode(data);\n      if (!node) return [];\n      var path = [node.data];\n      var parent = node.parent;\n      while (parent && parent !== this.root) {\n        path.push(parent.data);\n        parent = parent.parent;\n      }\n      return path.reverse();\n    },\n    getCheckedNodes: function getCheckedNodes(leafOnly, includeHalfChecked) {\n      return this.store.getCheckedNodes(leafOnly, includeHalfChecked);\n    },\n    getCheckedKeys: function getCheckedKeys(leafOnly) {\n      return this.store.getCheckedKeys(leafOnly);\n    },\n    getCurrentNode: function getCurrentNode() {\n      var currentNode = this.store.getCurrentNode();\n      return currentNode ? currentNode.data : null;\n    },\n    getCurrentKey: function getCurrentKey() {\n      if (!this.nodeKey) throw new Error('[Tree] nodeKey is required in getCurrentKey');\n      var currentNode = this.getCurrentNode();\n      return currentNode ? currentNode[this.nodeKey] : null;\n    },\n    setCheckedNodes: function setCheckedNodes(nodes, leafOnly) {\n      if (!this.nodeKey) throw new Error('[Tree] nodeKey is required in setCheckedNodes');\n      this.store.setCheckedNodes(nodes, leafOnly);\n    },\n    setCheckedKeys: function setCheckedKeys(keys, leafOnly) {\n      if (!this.nodeKey) throw new Error('[Tree] nodeKey is required in setCheckedKeys');\n      this.store.setCheckedKeys(keys, leafOnly);\n    },\n    setChecked: function setChecked(data, checked, deep) {\n      this.store.setChecked(data, checked, deep);\n    },\n    getHalfCheckedNodes: function getHalfCheckedNodes() {\n      return this.store.getHalfCheckedNodes();\n    },\n    getHalfCheckedKeys: function getHalfCheckedKeys() {\n      return this.store.getHalfCheckedKeys();\n    },\n    setCurrentNode: function setCurrentNode(node) {\n      if (!this.nodeKey) throw new Error('[Tree] nodeKey is required in setCurrentNode');\n      this.store.setUserCurrentNode(node);\n    },\n    setCurrentKey: function setCurrentKey(key) {\n      if (!this.nodeKey) throw new Error('[Tree] nodeKey is required in setCurrentKey');\n      this.store.setCurrentNodeKey(key);\n    },\n    getNode: function getNode(data) {\n      return this.store.getNode(data);\n    },\n    remove: function remove(data) {\n      this.store.remove(data);\n    },\n    append: function append(data, parentNode) {\n      this.store.append(data, parentNode);\n    },\n    insertBefore: function insertBefore(data, refNode) {\n      this.store.insertBefore(data, refNode);\n    },\n    insertAfter: function insertAfter(data, refNode) {\n      this.store.insertAfter(data, refNode);\n    },\n    handleNodeExpand: function handleNodeExpand(nodeData, node, instance) {\n      this.broadcast('ElTreeNode', 'tree-node-expand', node);\n      this.$emit('node-expand', nodeData, node, instance);\n    },\n    updateKeyChildren: function updateKeyChildren(key, data) {\n      if (!this.nodeKey) throw new Error('[Tree] nodeKey is required in updateKeyChild');\n      this.store.updateChildren(key, data);\n    },\n    initTabIndex: function initTabIndex() {\n      this.treeItems = this.$el.querySelectorAll('.is-focusable[role=treeitem]');\n      this.checkboxItems = this.$el.querySelectorAll('input[type=checkbox]');\n      var checkedItem = this.$el.querySelectorAll('.is-checked[role=treeitem]');\n      if (checkedItem.length) {\n        checkedItem[0].setAttribute('tabindex', 0);\n        return;\n      }\n      this.treeItems[0] && this.treeItems[0].setAttribute('tabindex', 0);\n    },\n    handleKeydown: function handleKeydown(ev) {\n      var currentItem = ev.target;\n      if (currentItem.className.indexOf('el-tree-node') === -1) return;\n      var keyCode = ev.keyCode;\n      this.treeItems = this.$el.querySelectorAll('.is-focusable[role=treeitem]');\n      var currentIndex = this.treeItemArray.indexOf(currentItem);\n      var nextIndex = void 0;\n      if ([38, 40].indexOf(keyCode) > -1) {\n        // up、down\n        ev.preventDefault();\n        if (keyCode === 38) {\n          // up\n          nextIndex = currentIndex !== 0 ? currentIndex - 1 : 0;\n        } else {\n          nextIndex = currentIndex < this.treeItemArray.length - 1 ? currentIndex + 1 : 0;\n        }\n        this.treeItemArray[nextIndex].focus(); // 选中\n      }\n      if ([37, 39].indexOf(keyCode) > -1) {\n        // left、right 展开\n        ev.preventDefault();\n        currentItem.click(); // 选中\n      }\n      var hasInput = currentItem.querySelector('[type=\"checkbox\"]');\n      if ([13, 32].indexOf(keyCode) > -1 && hasInput) {\n        // space enter选中checkbox\n        ev.preventDefault();\n        hasInput.click();\n      }\n    }\n  },\n\n  created: function created() {\n    var _this = this;\n\n    this.isTree = true;\n\n    this.store = new tree_store({\n      key: this.nodeKey,\n      data: this.data,\n      lazy: this.lazy,\n      props: this.props,\n      load: this.load,\n      currentNodeKey: this.currentNodeKey,\n      checkStrictly: this.checkStrictly,\n      checkDescendants: this.checkDescendants,\n      defaultCheckedKeys: this.defaultCheckedKeys,\n      defaultExpandedKeys: this.defaultExpandedKeys,\n      autoExpandParent: this.autoExpandParent,\n      defaultExpandAll: this.defaultExpandAll,\n      filterNodeMethod: this.filterNodeMethod\n    });\n\n    this.root = this.store.root;\n\n    var dragState = this.dragState;\n    this.$on('tree-node-drag-start', function (event, treeNode) {\n      if (typeof _this.allowDrag === 'function' && !_this.allowDrag(treeNode.node)) {\n        event.preventDefault();\n        return false;\n      }\n      event.dataTransfer.effectAllowed = 'move';\n\n      // wrap in try catch to address IE's error when first param is 'text/plain'\n      try {\n        // setData is required for draggable to work in FireFox\n        // the content has to be '' so dragging a node out of the tree won't open a new tab in FireFox\n        event.dataTransfer.setData('text/plain', '');\n      } catch (e) {}\n      dragState.draggingNode = treeNode;\n      _this.$emit('node-drag-start', treeNode.node, event);\n    });\n\n    this.$on('tree-node-drag-over', function (event, treeNode) {\n      var dropNode = findNearestComponent(event.target, 'ElTreeNode');\n      var oldDropNode = dragState.dropNode;\n      if (oldDropNode && oldDropNode !== dropNode) {\n        Object(dom_[\"removeClass\"])(oldDropNode.$el, 'is-drop-inner');\n      }\n      var draggingNode = dragState.draggingNode;\n      if (!draggingNode || !dropNode) return;\n\n      var dropPrev = true;\n      var dropInner = true;\n      var dropNext = true;\n      var userAllowDropInner = true;\n      if (typeof _this.allowDrop === 'function') {\n        dropPrev = _this.allowDrop(draggingNode.node, dropNode.node, 'prev');\n        userAllowDropInner = dropInner = _this.allowDrop(draggingNode.node, dropNode.node, 'inner');\n        dropNext = _this.allowDrop(draggingNode.node, dropNode.node, 'next');\n      }\n      event.dataTransfer.dropEffect = dropInner ? 'move' : 'none';\n      if ((dropPrev || dropInner || dropNext) && oldDropNode !== dropNode) {\n        if (oldDropNode) {\n          _this.$emit('node-drag-leave', draggingNode.node, oldDropNode.node, event);\n        }\n        _this.$emit('node-drag-enter', draggingNode.node, dropNode.node, event);\n      }\n\n      if (dropPrev || dropInner || dropNext) {\n        dragState.dropNode = dropNode;\n      }\n\n      if (dropNode.node.nextSibling === draggingNode.node) {\n        dropNext = false;\n      }\n      if (dropNode.node.previousSibling === draggingNode.node) {\n        dropPrev = false;\n      }\n      if (dropNode.node.contains(draggingNode.node, false)) {\n        dropInner = false;\n      }\n      if (draggingNode.node === dropNode.node || draggingNode.node.contains(dropNode.node)) {\n        dropPrev = false;\n        dropInner = false;\n        dropNext = false;\n      }\n\n      var targetPosition = dropNode.$el.getBoundingClientRect();\n      var treePosition = _this.$el.getBoundingClientRect();\n\n      var dropType = void 0;\n      var prevPercent = dropPrev ? dropInner ? 0.25 : dropNext ? 0.45 : 1 : -1;\n      var nextPercent = dropNext ? dropInner ? 0.75 : dropPrev ? 0.55 : 0 : 1;\n\n      var indicatorTop = -9999;\n      var distance = event.clientY - targetPosition.top;\n      if (distance < targetPosition.height * prevPercent) {\n        dropType = 'before';\n      } else if (distance > targetPosition.height * nextPercent) {\n        dropType = 'after';\n      } else if (dropInner) {\n        dropType = 'inner';\n      } else {\n        dropType = 'none';\n      }\n\n      var iconPosition = dropNode.$el.querySelector('.el-tree-node__expand-icon').getBoundingClientRect();\n      var dropIndicator = _this.$refs.dropIndicator;\n      if (dropType === 'before') {\n        indicatorTop = iconPosition.top - treePosition.top;\n      } else if (dropType === 'after') {\n        indicatorTop = iconPosition.bottom - treePosition.top;\n      }\n      dropIndicator.style.top = indicatorTop + 'px';\n      dropIndicator.style.left = iconPosition.right - treePosition.left + 'px';\n\n      if (dropType === 'inner') {\n        Object(dom_[\"addClass\"])(dropNode.$el, 'is-drop-inner');\n      } else {\n        Object(dom_[\"removeClass\"])(dropNode.$el, 'is-drop-inner');\n      }\n\n      dragState.showDropIndicator = dropType === 'before' || dropType === 'after';\n      dragState.allowDrop = dragState.showDropIndicator || userAllowDropInner;\n      dragState.dropType = dropType;\n      _this.$emit('node-drag-over', draggingNode.node, dropNode.node, event);\n    });\n\n    this.$on('tree-node-drag-end', function (event) {\n      var draggingNode = dragState.draggingNode,\n          dropType = dragState.dropType,\n          dropNode = dragState.dropNode;\n\n      event.preventDefault();\n      event.dataTransfer.dropEffect = 'move';\n\n      if (draggingNode && dropNode) {\n        var draggingNodeCopy = { data: draggingNode.node.data };\n        if (dropType !== 'none') {\n          draggingNode.node.remove();\n        }\n        if (dropType === 'before') {\n          dropNode.node.parent.insertBefore(draggingNodeCopy, dropNode.node);\n        } else if (dropType === 'after') {\n          dropNode.node.parent.insertAfter(draggingNodeCopy, dropNode.node);\n        } else if (dropType === 'inner') {\n          dropNode.node.insertChild(draggingNodeCopy);\n        }\n        if (dropType !== 'none') {\n          _this.store.registerNode(draggingNodeCopy);\n        }\n\n        Object(dom_[\"removeClass\"])(dropNode.$el, 'is-drop-inner');\n\n        _this.$emit('node-drag-end', draggingNode.node, dropNode.node, dropType, event);\n        if (dropType !== 'none') {\n          _this.$emit('node-drop', draggingNode.node, dropNode.node, dropType, event);\n        }\n      }\n      if (draggingNode && !dropNode) {\n        _this.$emit('node-drag-end', draggingNode.node, null, dropType, event);\n      }\n\n      dragState.showDropIndicator = false;\n      dragState.draggingNode = null;\n      dragState.dropNode = null;\n      dragState.allowDrop = true;\n    });\n  },\n  mounted: function mounted() {\n    this.initTabIndex();\n    this.$el.addEventListener('keydown', this.handleKeydown);\n  },\n  updated: function updated() {\n    this.treeItems = this.$el.querySelectorAll('[role=treeitem]');\n    this.checkboxItems = this.$el.querySelectorAll('input[type=checkbox]');\n  }\n});\n// CONCATENATED MODULE: ./packages/tree/src/tree.vue?vue&type=script&lang=js&\n /* harmony default export */ var src_treevue_type_script_lang_js_ = (treevue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/tree/src/tree.vue\n\n\n\n\n\n/* normalize component */\n\nvar tree_component = normalizeComponent(\n  src_treevue_type_script_lang_js_,\n  treevue_type_template_id_547575a6_render,\n  treevue_type_template_id_547575a6_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var tree_api; }\ntree_component.options.__file = \"packages/tree/src/tree.vue\"\n/* harmony default export */ var src_tree = (tree_component.exports);\n// CONCATENATED MODULE: ./packages/tree/index.js\n\n\n/* istanbul ignore next */\nsrc_tree.install = function (Vue) {\n  Vue.component(src_tree.name, src_tree);\n};\n\n/* harmony default export */ var packages_tree = (src_tree);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/alert/src/main.vue?vue&type=template&id=6e53341b&\nvar mainvue_type_template_id_6e53341b_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"transition\", { attrs: { name: \"el-alert-fade\" } }, [\n    _c(\n      \"div\",\n      {\n        directives: [\n          {\n            name: \"show\",\n            rawName: \"v-show\",\n            value: _vm.visible,\n            expression: \"visible\"\n          }\n        ],\n        staticClass: \"el-alert\",\n        class: [\n          _vm.typeClass,\n          _vm.center ? \"is-center\" : \"\",\n          \"is-\" + _vm.effect\n        ],\n        attrs: { role: \"alert\" }\n      },\n      [\n        _vm.showIcon\n          ? _c(\"i\", {\n              staticClass: \"el-alert__icon\",\n              class: [_vm.iconClass, _vm.isBigIcon]\n            })\n          : _vm._e(),\n        _c(\"div\", { staticClass: \"el-alert__content\" }, [\n          _vm.title || _vm.$slots.title\n            ? _c(\n                \"span\",\n                { staticClass: \"el-alert__title\", class: [_vm.isBoldTitle] },\n                [_vm._t(\"title\", [_vm._v(_vm._s(_vm.title))])],\n                2\n              )\n            : _vm._e(),\n          _vm.$slots.default && !_vm.description\n            ? _c(\n                \"p\",\n                { staticClass: \"el-alert__description\" },\n                [_vm._t(\"default\")],\n                2\n              )\n            : _vm._e(),\n          _vm.description && !_vm.$slots.default\n            ? _c(\"p\", { staticClass: \"el-alert__description\" }, [\n                _vm._v(_vm._s(_vm.description))\n              ])\n            : _vm._e(),\n          _c(\n            \"i\",\n            {\n              directives: [\n                {\n                  name: \"show\",\n                  rawName: \"v-show\",\n                  value: _vm.closable,\n                  expression: \"closable\"\n                }\n              ],\n              staticClass: \"el-alert__closebtn\",\n              class: {\n                \"is-customed\": _vm.closeText !== \"\",\n                \"el-icon-close\": _vm.closeText === \"\"\n              },\n              on: {\n                click: function($event) {\n                  _vm.close()\n                }\n              }\n            },\n            [_vm._v(_vm._s(_vm.closeText))]\n          )\n        ])\n      ]\n    )\n  ])\n}\nvar mainvue_type_template_id_6e53341b_staticRenderFns = []\nmainvue_type_template_id_6e53341b_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/alert/src/main.vue?vue&type=template&id=6e53341b&\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/alert/src/main.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nvar TYPE_CLASSES_MAP = {\n  'success': 'el-icon-success',\n  'warning': 'el-icon-warning',\n  'error': 'el-icon-error'\n};\n/* harmony default export */ var alert_src_mainvue_type_script_lang_js_ = ({\n  name: 'ElAlert',\n\n  props: {\n    title: {\n      type: String,\n      default: ''\n    },\n    description: {\n      type: String,\n      default: ''\n    },\n    type: {\n      type: String,\n      default: 'info'\n    },\n    closable: {\n      type: Boolean,\n      default: true\n    },\n    closeText: {\n      type: String,\n      default: ''\n    },\n    showIcon: Boolean,\n    center: Boolean,\n    effect: {\n      type: String,\n      default: 'light',\n      validator: function validator(value) {\n        return ['light', 'dark'].indexOf(value) !== -1;\n      }\n    }\n  },\n\n  data: function data() {\n    return {\n      visible: true\n    };\n  },\n\n\n  methods: {\n    close: function close() {\n      this.visible = false;\n      this.$emit('close');\n    }\n  },\n\n  computed: {\n    typeClass: function typeClass() {\n      return 'el-alert--' + this.type;\n    },\n    iconClass: function iconClass() {\n      return TYPE_CLASSES_MAP[this.type] || 'el-icon-info';\n    },\n    isBigIcon: function isBigIcon() {\n      return this.description || this.$slots.default ? 'is-big' : '';\n    },\n    isBoldTitle: function isBoldTitle() {\n      return this.description || this.$slots.default ? 'is-bold' : '';\n    }\n  }\n});\n// CONCATENATED MODULE: ./packages/alert/src/main.vue?vue&type=script&lang=js&\n /* harmony default export */ var packages_alert_src_mainvue_type_script_lang_js_ = (alert_src_mainvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/alert/src/main.vue\n\n\n\n\n\n/* normalize component */\n\nvar alert_src_main_component = normalizeComponent(\n  packages_alert_src_mainvue_type_script_lang_js_,\n  mainvue_type_template_id_6e53341b_render,\n  mainvue_type_template_id_6e53341b_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var alert_src_main_api; }\nalert_src_main_component.options.__file = \"packages/alert/src/main.vue\"\n/* harmony default export */ var alert_src_main = (alert_src_main_component.exports);\n// CONCATENATED MODULE: ./packages/alert/index.js\n\n\n/* istanbul ignore next */\nalert_src_main.install = function (Vue) {\n  Vue.component(alert_src_main.name, alert_src_main);\n};\n\n/* harmony default export */ var packages_alert = (alert_src_main);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/notification/src/main.vue?vue&type=template&id=43dbc3d8&\nvar mainvue_type_template_id_43dbc3d8_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"transition\", { attrs: { name: \"el-notification-fade\" } }, [\n    _c(\n      \"div\",\n      {\n        directives: [\n          {\n            name: \"show\",\n            rawName: \"v-show\",\n            value: _vm.visible,\n            expression: \"visible\"\n          }\n        ],\n        class: [\"el-notification\", _vm.customClass, _vm.horizontalClass],\n        style: _vm.positionStyle,\n        attrs: { role: \"alert\" },\n        on: {\n          mouseenter: function($event) {\n            _vm.clearTimer()\n          },\n          mouseleave: function($event) {\n            _vm.startTimer()\n          },\n          click: _vm.click\n        }\n      },\n      [\n        _vm.type || _vm.iconClass\n          ? _c(\"i\", {\n              staticClass: \"el-notification__icon\",\n              class: [_vm.typeClass, _vm.iconClass]\n            })\n          : _vm._e(),\n        _c(\n          \"div\",\n          {\n            staticClass: \"el-notification__group\",\n            class: { \"is-with-icon\": _vm.typeClass || _vm.iconClass }\n          },\n          [\n            _c(\"h2\", {\n              staticClass: \"el-notification__title\",\n              domProps: { textContent: _vm._s(_vm.title) }\n            }),\n            _c(\n              \"div\",\n              {\n                directives: [\n                  {\n                    name: \"show\",\n                    rawName: \"v-show\",\n                    value: _vm.message,\n                    expression: \"message\"\n                  }\n                ],\n                staticClass: \"el-notification__content\"\n              },\n              [\n                _vm._t(\"default\", [\n                  !_vm.dangerouslyUseHTMLString\n                    ? _c(\"p\", [_vm._v(_vm._s(_vm.message))])\n                    : _c(\"p\", { domProps: { innerHTML: _vm._s(_vm.message) } })\n                ])\n              ],\n              2\n            ),\n            _vm.showClose\n              ? _c(\"div\", {\n                  staticClass: \"el-notification__closeBtn el-icon-close\",\n                  on: {\n                    click: function($event) {\n                      $event.stopPropagation()\n                      return _vm.close($event)\n                    }\n                  }\n                })\n              : _vm._e()\n          ]\n        )\n      ]\n    )\n  ])\n}\nvar mainvue_type_template_id_43dbc3d8_staticRenderFns = []\nmainvue_type_template_id_43dbc3d8_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/notification/src/main.vue?vue&type=template&id=43dbc3d8&\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/notification/src/main.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nvar mainvue_type_script_lang_js_typeMap = {\n  success: 'success',\n  info: 'info',\n  warning: 'warning',\n  error: 'error'\n};\n\n/* harmony default export */ var notification_src_mainvue_type_script_lang_js_ = ({\n  data: function data() {\n    return {\n      visible: false,\n      title: '',\n      message: '',\n      duration: 4500,\n      type: '',\n      showClose: true,\n      customClass: '',\n      iconClass: '',\n      onClose: null,\n      onClick: null,\n      closed: false,\n      verticalOffset: 0,\n      timer: null,\n      dangerouslyUseHTMLString: false,\n      position: 'top-right'\n    };\n  },\n\n\n  computed: {\n    typeClass: function typeClass() {\n      return this.type && mainvue_type_script_lang_js_typeMap[this.type] ? 'el-icon-' + mainvue_type_script_lang_js_typeMap[this.type] : '';\n    },\n    horizontalClass: function horizontalClass() {\n      return this.position.indexOf('right') > -1 ? 'right' : 'left';\n    },\n    verticalProperty: function verticalProperty() {\n      return (/^top-/.test(this.position) ? 'top' : 'bottom'\n      );\n    },\n    positionStyle: function positionStyle() {\n      var _ref;\n\n      return _ref = {}, _ref[this.verticalProperty] = this.verticalOffset + 'px', _ref;\n    }\n  },\n\n  watch: {\n    closed: function closed(newVal) {\n      if (newVal) {\n        this.visible = false;\n        this.$el.addEventListener('transitionend', this.destroyElement);\n      }\n    }\n  },\n\n  methods: {\n    destroyElement: function destroyElement() {\n      this.$el.removeEventListener('transitionend', this.destroyElement);\n      this.$destroy(true);\n      this.$el.parentNode.removeChild(this.$el);\n    },\n    click: function click() {\n      if (typeof this.onClick === 'function') {\n        this.onClick();\n      }\n    },\n    close: function close() {\n      this.closed = true;\n      if (typeof this.onClose === 'function') {\n        this.onClose();\n      }\n    },\n    clearTimer: function clearTimer() {\n      clearTimeout(this.timer);\n    },\n    startTimer: function startTimer() {\n      var _this = this;\n\n      if (this.duration > 0) {\n        this.timer = setTimeout(function () {\n          if (!_this.closed) {\n            _this.close();\n          }\n        }, this.duration);\n      }\n    },\n    keydown: function keydown(e) {\n      if (e.keyCode === 46 || e.keyCode === 8) {\n        this.clearTimer(); // detele 取消倒计时\n      } else if (e.keyCode === 27) {\n        // esc关闭消息\n        if (!this.closed) {\n          this.close();\n        }\n      } else {\n        this.startTimer(); // 恢复倒计时\n      }\n    }\n  },\n  mounted: function mounted() {\n    var _this2 = this;\n\n    if (this.duration > 0) {\n      this.timer = setTimeout(function () {\n        if (!_this2.closed) {\n          _this2.close();\n        }\n      }, this.duration);\n    }\n    document.addEventListener('keydown', this.keydown);\n  },\n  beforeDestroy: function beforeDestroy() {\n    document.removeEventListener('keydown', this.keydown);\n  }\n});\n// CONCATENATED MODULE: ./packages/notification/src/main.vue?vue&type=script&lang=js&\n /* harmony default export */ var packages_notification_src_mainvue_type_script_lang_js_ = (notification_src_mainvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/notification/src/main.vue\n\n\n\n\n\n/* normalize component */\n\nvar notification_src_main_component = normalizeComponent(\n  packages_notification_src_mainvue_type_script_lang_js_,\n  mainvue_type_template_id_43dbc3d8_render,\n  mainvue_type_template_id_43dbc3d8_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var notification_src_main_api; }\nnotification_src_main_component.options.__file = \"packages/notification/src/main.vue\"\n/* harmony default export */ var notification_src_main = (notification_src_main_component.exports);\n// CONCATENATED MODULE: ./packages/notification/src/main.js\n\n\n\n\n\nvar NotificationConstructor = external_vue_default.a.extend(notification_src_main);\n\nvar src_main_instance = void 0;\nvar instances = [];\nvar seed = 1;\n\nvar main_Notification = function Notification(options) {\n  if (external_vue_default.a.prototype.$isServer) return;\n  options = merge_default()({}, options);\n  var userOnClose = options.onClose;\n  var id = 'notification_' + seed++;\n  var position = options.position || 'top-right';\n\n  options.onClose = function () {\n    Notification.close(id, userOnClose);\n  };\n\n  src_main_instance = new NotificationConstructor({\n    data: options\n  });\n\n  if (Object(vdom_[\"isVNode\"])(options.message)) {\n    src_main_instance.$slots.default = [options.message];\n    options.message = 'REPLACED_BY_VNODE';\n  }\n  src_main_instance.id = id;\n  src_main_instance.$mount();\n  document.body.appendChild(src_main_instance.$el);\n  src_main_instance.visible = true;\n  src_main_instance.dom = src_main_instance.$el;\n  src_main_instance.dom.style.zIndex = popup_[\"PopupManager\"].nextZIndex();\n\n  var verticalOffset = options.offset || 0;\n  instances.filter(function (item) {\n    return item.position === position;\n  }).forEach(function (item) {\n    verticalOffset += item.$el.offsetHeight + 16;\n  });\n  verticalOffset += 16;\n  src_main_instance.verticalOffset = verticalOffset;\n  instances.push(src_main_instance);\n  return src_main_instance;\n};\n\n['success', 'warning', 'info', 'error'].forEach(function (type) {\n  main_Notification[type] = function (options) {\n    if (typeof options === 'string' || Object(vdom_[\"isVNode\"])(options)) {\n      options = {\n        message: options\n      };\n    }\n    options.type = type;\n    return main_Notification(options);\n  };\n});\n\nmain_Notification.close = function (id, userOnClose) {\n  var index = -1;\n  var len = instances.length;\n  var instance = instances.filter(function (instance, i) {\n    if (instance.id === id) {\n      index = i;\n      return true;\n    }\n    return false;\n  })[0];\n  if (!instance) return;\n\n  if (typeof userOnClose === 'function') {\n    userOnClose(instance);\n  }\n  instances.splice(index, 1);\n\n  if (len <= 1) return;\n  var position = instance.position;\n  var removedHeight = instance.dom.offsetHeight;\n  for (var i = index; i < len - 1; i++) {\n    if (instances[i].position === position) {\n      instances[i].dom.style[instance.verticalProperty] = parseInt(instances[i].dom.style[instance.verticalProperty], 10) - removedHeight - 16 + 'px';\n    }\n  }\n};\n\nmain_Notification.closeAll = function () {\n  for (var i = instances.length - 1; i >= 0; i--) {\n    instances[i].close();\n  }\n};\n\n/* harmony default export */ var packages_notification_src_main = (main_Notification);\n// CONCATENATED MODULE: ./packages/notification/index.js\n\n/* harmony default export */ var notification = (packages_notification_src_main);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/slider/src/main.vue?vue&type=template&id=32708644&\nvar mainvue_type_template_id_32708644_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    {\n      staticClass: \"el-slider\",\n      class: {\n        \"is-vertical\": _vm.vertical,\n        \"el-slider--with-input\": _vm.showInput\n      },\n      attrs: {\n        role: \"slider\",\n        \"aria-valuemin\": _vm.min,\n        \"aria-valuemax\": _vm.max,\n        \"aria-orientation\": _vm.vertical ? \"vertical\" : \"horizontal\",\n        \"aria-disabled\": _vm.sliderDisabled\n      }\n    },\n    [\n      _vm.showInput && !_vm.range\n        ? _c(\"el-input-number\", {\n            ref: \"input\",\n            staticClass: \"el-slider__input\",\n            attrs: {\n              step: _vm.step,\n              disabled: _vm.sliderDisabled,\n              controls: _vm.showInputControls,\n              min: _vm.min,\n              max: _vm.max,\n              debounce: _vm.debounce,\n              size: _vm.inputSize\n            },\n            on: { change: _vm.emitChange },\n            model: {\n              value: _vm.firstValue,\n              callback: function($$v) {\n                _vm.firstValue = $$v\n              },\n              expression: \"firstValue\"\n            }\n          })\n        : _vm._e(),\n      _c(\n        \"div\",\n        {\n          ref: \"slider\",\n          staticClass: \"el-slider__runway\",\n          class: { \"show-input\": _vm.showInput, disabled: _vm.sliderDisabled },\n          style: _vm.runwayStyle,\n          on: { click: _vm.onSliderClick }\n        },\n        [\n          _c(\"div\", { staticClass: \"el-slider__bar\", style: _vm.barStyle }),\n          _c(\"slider-button\", {\n            ref: \"button1\",\n            attrs: {\n              vertical: _vm.vertical,\n              \"tooltip-class\": _vm.tooltipClass\n            },\n            model: {\n              value: _vm.firstValue,\n              callback: function($$v) {\n                _vm.firstValue = $$v\n              },\n              expression: \"firstValue\"\n            }\n          }),\n          _vm.range\n            ? _c(\"slider-button\", {\n                ref: \"button2\",\n                attrs: {\n                  vertical: _vm.vertical,\n                  \"tooltip-class\": _vm.tooltipClass\n                },\n                model: {\n                  value: _vm.secondValue,\n                  callback: function($$v) {\n                    _vm.secondValue = $$v\n                  },\n                  expression: \"secondValue\"\n                }\n              })\n            : _vm._e(),\n          _vm._l(_vm.stops, function(item, key) {\n            return _vm.showStops\n              ? _c(\"div\", {\n                  key: key,\n                  staticClass: \"el-slider__stop\",\n                  style: _vm.getStopStyle(item)\n                })\n              : _vm._e()\n          }),\n          _vm.markList.length > 0\n            ? [\n                _c(\n                  \"div\",\n                  _vm._l(_vm.markList, function(item, key) {\n                    return _c(\"div\", {\n                      key: key,\n                      staticClass: \"el-slider__stop el-slider__marks-stop\",\n                      style: _vm.getStopStyle(item.position)\n                    })\n                  }),\n                  0\n                ),\n                _c(\n                  \"div\",\n                  { staticClass: \"el-slider__marks\" },\n                  _vm._l(_vm.markList, function(item, key) {\n                    return _c(\"slider-marker\", {\n                      key: key,\n                      style: _vm.getStopStyle(item.position),\n                      attrs: { mark: item.mark }\n                    })\n                  }),\n                  1\n                )\n              ]\n            : _vm._e()\n        ],\n        2\n      )\n    ],\n    1\n  )\n}\nvar mainvue_type_template_id_32708644_staticRenderFns = []\nmainvue_type_template_id_32708644_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/slider/src/main.vue?vue&type=template&id=32708644&\n\n// EXTERNAL MODULE: external \"element-ui/lib/input-number\"\nvar input_number_ = __webpack_require__(41);\nvar input_number_default = /*#__PURE__*/__webpack_require__.n(input_number_);\n\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/slider/src/button.vue?vue&type=template&id=e72d2ad2&\nvar buttonvue_type_template_id_e72d2ad2_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    {\n      ref: \"button\",\n      staticClass: \"el-slider__button-wrapper\",\n      class: { hover: _vm.hovering, dragging: _vm.dragging },\n      style: _vm.wrapperStyle,\n      attrs: { tabindex: \"0\" },\n      on: {\n        mouseenter: _vm.handleMouseEnter,\n        mouseleave: _vm.handleMouseLeave,\n        mousedown: _vm.onButtonDown,\n        touchstart: _vm.onButtonDown,\n        focus: _vm.handleMouseEnter,\n        blur: _vm.handleMouseLeave,\n        keydown: [\n          function($event) {\n            if (\n              !(\"button\" in $event) &&\n              _vm._k($event.keyCode, \"left\", 37, $event.key, [\n                \"Left\",\n                \"ArrowLeft\"\n              ])\n            ) {\n              return null\n            }\n            if (\"button\" in $event && $event.button !== 0) {\n              return null\n            }\n            return _vm.onLeftKeyDown($event)\n          },\n          function($event) {\n            if (\n              !(\"button\" in $event) &&\n              _vm._k($event.keyCode, \"right\", 39, $event.key, [\n                \"Right\",\n                \"ArrowRight\"\n              ])\n            ) {\n              return null\n            }\n            if (\"button\" in $event && $event.button !== 2) {\n              return null\n            }\n            return _vm.onRightKeyDown($event)\n          },\n          function($event) {\n            if (\n              !(\"button\" in $event) &&\n              _vm._k($event.keyCode, \"down\", 40, $event.key, [\n                \"Down\",\n                \"ArrowDown\"\n              ])\n            ) {\n              return null\n            }\n            $event.preventDefault()\n            return _vm.onLeftKeyDown($event)\n          },\n          function($event) {\n            if (\n              !(\"button\" in $event) &&\n              _vm._k($event.keyCode, \"up\", 38, $event.key, [\"Up\", \"ArrowUp\"])\n            ) {\n              return null\n            }\n            $event.preventDefault()\n            return _vm.onRightKeyDown($event)\n          }\n        ]\n      }\n    },\n    [\n      _c(\n        \"el-tooltip\",\n        {\n          ref: \"tooltip\",\n          attrs: {\n            placement: \"top\",\n            \"popper-class\": _vm.tooltipClass,\n            disabled: !_vm.showTooltip\n          }\n        },\n        [\n          _c(\"span\", { attrs: { slot: \"content\" }, slot: \"content\" }, [\n            _vm._v(_vm._s(_vm.formatValue))\n          ]),\n          _c(\"div\", {\n            staticClass: \"el-slider__button\",\n            class: { hover: _vm.hovering, dragging: _vm.dragging }\n          })\n        ]\n      )\n    ],\n    1\n  )\n}\nvar buttonvue_type_template_id_e72d2ad2_staticRenderFns = []\nbuttonvue_type_template_id_e72d2ad2_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/slider/src/button.vue?vue&type=template&id=e72d2ad2&\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/slider/src/button.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n/* harmony default export */ var slider_src_buttonvue_type_script_lang_js_ = ({\n  name: 'ElSliderButton',\n\n  components: {\n    ElTooltip: tooltip_default.a\n  },\n\n  props: {\n    value: {\n      type: Number,\n      default: 0\n    },\n    vertical: {\n      type: Boolean,\n      default: false\n    },\n    tooltipClass: String\n  },\n\n  data: function data() {\n    return {\n      hovering: false,\n      dragging: false,\n      isClick: false,\n      startX: 0,\n      currentX: 0,\n      startY: 0,\n      currentY: 0,\n      startPosition: 0,\n      newPosition: null,\n      oldValue: this.value\n    };\n  },\n\n\n  computed: {\n    disabled: function disabled() {\n      return this.$parent.sliderDisabled;\n    },\n    max: function max() {\n      return this.$parent.max;\n    },\n    min: function min() {\n      return this.$parent.min;\n    },\n    step: function step() {\n      return this.$parent.step;\n    },\n    showTooltip: function showTooltip() {\n      return this.$parent.showTooltip;\n    },\n    precision: function precision() {\n      return this.$parent.precision;\n    },\n    currentPosition: function currentPosition() {\n      return (this.value - this.min) / (this.max - this.min) * 100 + '%';\n    },\n    enableFormat: function enableFormat() {\n      return this.$parent.formatTooltip instanceof Function;\n    },\n    formatValue: function formatValue() {\n      return this.enableFormat && this.$parent.formatTooltip(this.value) || this.value;\n    },\n    wrapperStyle: function wrapperStyle() {\n      return this.vertical ? { bottom: this.currentPosition } : { left: this.currentPosition };\n    }\n  },\n\n  watch: {\n    dragging: function dragging(val) {\n      this.$parent.dragging = val;\n    }\n  },\n\n  methods: {\n    displayTooltip: function displayTooltip() {\n      this.$refs.tooltip && (this.$refs.tooltip.showPopper = true);\n    },\n    hideTooltip: function hideTooltip() {\n      this.$refs.tooltip && (this.$refs.tooltip.showPopper = false);\n    },\n    handleMouseEnter: function handleMouseEnter() {\n      this.hovering = true;\n      this.displayTooltip();\n    },\n    handleMouseLeave: function handleMouseLeave() {\n      this.hovering = false;\n      this.hideTooltip();\n    },\n    onButtonDown: function onButtonDown(event) {\n      if (this.disabled) return;\n      event.preventDefault();\n      this.onDragStart(event);\n      window.addEventListener('mousemove', this.onDragging);\n      window.addEventListener('touchmove', this.onDragging);\n      window.addEventListener('mouseup', this.onDragEnd);\n      window.addEventListener('touchend', this.onDragEnd);\n      window.addEventListener('contextmenu', this.onDragEnd);\n    },\n    onLeftKeyDown: function onLeftKeyDown() {\n      if (this.disabled) return;\n      this.newPosition = parseFloat(this.currentPosition) - this.step / (this.max - this.min) * 100;\n      this.setPosition(this.newPosition);\n      this.$parent.emitChange();\n    },\n    onRightKeyDown: function onRightKeyDown() {\n      if (this.disabled) return;\n      this.newPosition = parseFloat(this.currentPosition) + this.step / (this.max - this.min) * 100;\n      this.setPosition(this.newPosition);\n      this.$parent.emitChange();\n    },\n    onDragStart: function onDragStart(event) {\n      this.dragging = true;\n      this.isClick = true;\n      if (event.type === 'touchstart') {\n        event.clientY = event.touches[0].clientY;\n        event.clientX = event.touches[0].clientX;\n      }\n      if (this.vertical) {\n        this.startY = event.clientY;\n      } else {\n        this.startX = event.clientX;\n      }\n      this.startPosition = parseFloat(this.currentPosition);\n      this.newPosition = this.startPosition;\n    },\n    onDragging: function onDragging(event) {\n      if (this.dragging) {\n        this.isClick = false;\n        this.displayTooltip();\n        this.$parent.resetSize();\n        var diff = 0;\n        if (event.type === 'touchmove') {\n          event.clientY = event.touches[0].clientY;\n          event.clientX = event.touches[0].clientX;\n        }\n        if (this.vertical) {\n          this.currentY = event.clientY;\n          diff = (this.startY - this.currentY) / this.$parent.sliderSize * 100;\n        } else {\n          this.currentX = event.clientX;\n          diff = (this.currentX - this.startX) / this.$parent.sliderSize * 100;\n        }\n        this.newPosition = this.startPosition + diff;\n        this.setPosition(this.newPosition);\n      }\n    },\n    onDragEnd: function onDragEnd() {\n      var _this = this;\n\n      if (this.dragging) {\n        /*\n         * 防止在 mouseup 后立即触发 click，导致滑块有几率产生一小段位移\n         * 不使用 preventDefault 是因为 mouseup 和 click 没有注册在同一个 DOM 上\n         */\n        setTimeout(function () {\n          _this.dragging = false;\n          _this.hideTooltip();\n          if (!_this.isClick) {\n            _this.setPosition(_this.newPosition);\n            _this.$parent.emitChange();\n          }\n        }, 0);\n        window.removeEventListener('mousemove', this.onDragging);\n        window.removeEventListener('touchmove', this.onDragging);\n        window.removeEventListener('mouseup', this.onDragEnd);\n        window.removeEventListener('touchend', this.onDragEnd);\n        window.removeEventListener('contextmenu', this.onDragEnd);\n      }\n    },\n    setPosition: function setPosition(newPosition) {\n      var _this2 = this;\n\n      if (newPosition === null || isNaN(newPosition)) return;\n      if (newPosition < 0) {\n        newPosition = 0;\n      } else if (newPosition > 100) {\n        newPosition = 100;\n      }\n      var lengthPerStep = 100 / ((this.max - this.min) / this.step);\n      var steps = Math.round(newPosition / lengthPerStep);\n      var value = steps * lengthPerStep * (this.max - this.min) * 0.01 + this.min;\n      value = parseFloat(value.toFixed(this.precision));\n      this.$emit('input', value);\n      this.$nextTick(function () {\n        _this2.displayTooltip();\n        _this2.$refs.tooltip && _this2.$refs.tooltip.updatePopper();\n      });\n      if (!this.dragging && this.value !== this.oldValue) {\n        this.oldValue = this.value;\n      }\n    }\n  }\n});\n// CONCATENATED MODULE: ./packages/slider/src/button.vue?vue&type=script&lang=js&\n /* harmony default export */ var packages_slider_src_buttonvue_type_script_lang_js_ = (slider_src_buttonvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/slider/src/button.vue\n\n\n\n\n\n/* normalize component */\n\nvar src_button_component = normalizeComponent(\n  packages_slider_src_buttonvue_type_script_lang_js_,\n  buttonvue_type_template_id_e72d2ad2_render,\n  buttonvue_type_template_id_e72d2ad2_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var src_button_api; }\nsrc_button_component.options.__file = \"packages/slider/src/button.vue\"\n/* harmony default export */ var slider_src_button = (src_button_component.exports);\n// CONCATENATED MODULE: ./packages/slider/src/marker.js\n/* harmony default export */ var marker = ({\n  name: 'ElMarker',\n\n  props: {\n    mark: {\n      type: [String, Object]\n    }\n  },\n  render: function render() {\n    var h = arguments[0];\n\n    var label = typeof this.mark === 'string' ? this.mark : this.mark.label;\n\n    return h(\n      'div',\n      { 'class': 'el-slider__marks-text', style: this.mark.style || {} },\n      [label]\n    );\n  }\n});\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/slider/src/main.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n\n/* harmony default export */ var slider_src_mainvue_type_script_lang_js_ = ({\n  name: 'ElSlider',\n\n  mixins: [emitter_default.a],\n\n  inject: {\n    elForm: {\n      default: ''\n    }\n  },\n\n  props: {\n    min: {\n      type: Number,\n      default: 0\n    },\n    max: {\n      type: Number,\n      default: 100\n    },\n    step: {\n      type: Number,\n      default: 1\n    },\n    value: {\n      type: [Number, Array],\n      default: 0\n    },\n    showInput: {\n      type: Boolean,\n      default: false\n    },\n    showInputControls: {\n      type: Boolean,\n      default: true\n    },\n    inputSize: {\n      type: String,\n      default: 'small'\n    },\n    showStops: {\n      type: Boolean,\n      default: false\n    },\n    showTooltip: {\n      type: Boolean,\n      default: true\n    },\n    formatTooltip: Function,\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    range: {\n      type: Boolean,\n      default: false\n    },\n    vertical: {\n      type: Boolean,\n      default: false\n    },\n    height: {\n      type: String\n    },\n    debounce: {\n      type: Number,\n      default: 300\n    },\n    label: {\n      type: String\n    },\n    tooltipClass: String,\n    marks: Object\n  },\n\n  components: {\n    ElInputNumber: input_number_default.a,\n    SliderButton: slider_src_button,\n    SliderMarker: marker\n  },\n\n  data: function data() {\n    return {\n      firstValue: null,\n      secondValue: null,\n      oldValue: null,\n      dragging: false,\n      sliderSize: 1\n    };\n  },\n\n\n  watch: {\n    value: function value(val, oldVal) {\n      if (this.dragging || Array.isArray(val) && Array.isArray(oldVal) && val.every(function (item, index) {\n        return item === oldVal[index];\n      })) {\n        return;\n      }\n      this.setValues();\n    },\n    dragging: function dragging(val) {\n      if (!val) {\n        this.setValues();\n      }\n    },\n    firstValue: function firstValue(val) {\n      if (this.range) {\n        this.$emit('input', [this.minValue, this.maxValue]);\n      } else {\n        this.$emit('input', val);\n      }\n    },\n    secondValue: function secondValue() {\n      if (this.range) {\n        this.$emit('input', [this.minValue, this.maxValue]);\n      }\n    },\n    min: function min() {\n      this.setValues();\n    },\n    max: function max() {\n      this.setValues();\n    }\n  },\n\n  methods: {\n    valueChanged: function valueChanged() {\n      var _this = this;\n\n      if (this.range) {\n        return ![this.minValue, this.maxValue].every(function (item, index) {\n          return item === _this.oldValue[index];\n        });\n      } else {\n        return this.value !== this.oldValue;\n      }\n    },\n    setValues: function setValues() {\n      if (this.min > this.max) {\n        console.error('[Element Error][Slider]min should not be greater than max.');\n        return;\n      }\n      var val = this.value;\n      if (this.range && Array.isArray(val)) {\n        if (val[1] < this.min) {\n          this.$emit('input', [this.min, this.min]);\n        } else if (val[0] > this.max) {\n          this.$emit('input', [this.max, this.max]);\n        } else if (val[0] < this.min) {\n          this.$emit('input', [this.min, val[1]]);\n        } else if (val[1] > this.max) {\n          this.$emit('input', [val[0], this.max]);\n        } else {\n          this.firstValue = val[0];\n          this.secondValue = val[1];\n          if (this.valueChanged()) {\n            this.dispatch('ElFormItem', 'el.form.change', [this.minValue, this.maxValue]);\n            this.oldValue = val.slice();\n          }\n        }\n      } else if (!this.range && typeof val === 'number' && !isNaN(val)) {\n        if (val < this.min) {\n          this.$emit('input', this.min);\n        } else if (val > this.max) {\n          this.$emit('input', this.max);\n        } else {\n          this.firstValue = val;\n          if (this.valueChanged()) {\n            this.dispatch('ElFormItem', 'el.form.change', val);\n            this.oldValue = val;\n          }\n        }\n      }\n    },\n    setPosition: function setPosition(percent) {\n      var targetValue = this.min + percent * (this.max - this.min) / 100;\n      if (!this.range) {\n        this.$refs.button1.setPosition(percent);\n        return;\n      }\n      var button = void 0;\n      if (Math.abs(this.minValue - targetValue) < Math.abs(this.maxValue - targetValue)) {\n        button = this.firstValue < this.secondValue ? 'button1' : 'button2';\n      } else {\n        button = this.firstValue > this.secondValue ? 'button1' : 'button2';\n      }\n      this.$refs[button].setPosition(percent);\n    },\n    onSliderClick: function onSliderClick(event) {\n      if (this.sliderDisabled || this.dragging) return;\n      this.resetSize();\n      if (this.vertical) {\n        var sliderOffsetBottom = this.$refs.slider.getBoundingClientRect().bottom;\n        this.setPosition((sliderOffsetBottom - event.clientY) / this.sliderSize * 100);\n      } else {\n        var sliderOffsetLeft = this.$refs.slider.getBoundingClientRect().left;\n        this.setPosition((event.clientX - sliderOffsetLeft) / this.sliderSize * 100);\n      }\n      this.emitChange();\n    },\n    resetSize: function resetSize() {\n      if (this.$refs.slider) {\n        this.sliderSize = this.$refs.slider['client' + (this.vertical ? 'Height' : 'Width')];\n      }\n    },\n    emitChange: function emitChange() {\n      var _this2 = this;\n\n      this.$nextTick(function () {\n        _this2.$emit('change', _this2.range ? [_this2.minValue, _this2.maxValue] : _this2.value);\n      });\n    },\n    getStopStyle: function getStopStyle(position) {\n      return this.vertical ? { 'bottom': position + '%' } : { 'left': position + '%' };\n    }\n  },\n\n  computed: {\n    stops: function stops() {\n      var _this3 = this;\n\n      if (!this.showStops || this.min > this.max) return [];\n      if (this.step === 0) {\n          false && false;\n        return [];\n      }\n      var stopCount = (this.max - this.min) / this.step;\n      var stepWidth = 100 * this.step / (this.max - this.min);\n      var result = [];\n      for (var i = 1; i < stopCount; i++) {\n        result.push(i * stepWidth);\n      }\n      if (this.range) {\n        return result.filter(function (step) {\n          return step < 100 * (_this3.minValue - _this3.min) / (_this3.max - _this3.min) || step > 100 * (_this3.maxValue - _this3.min) / (_this3.max - _this3.min);\n        });\n      } else {\n        return result.filter(function (step) {\n          return step > 100 * (_this3.firstValue - _this3.min) / (_this3.max - _this3.min);\n        });\n      }\n    },\n    markList: function markList() {\n      var _this4 = this;\n\n      if (!this.marks) {\n        return [];\n      }\n\n      var marksKeys = Object.keys(this.marks);\n      return marksKeys.map(parseFloat).sort(function (a, b) {\n        return a - b;\n      }).filter(function (point) {\n        return point <= _this4.max && point >= _this4.min;\n      }).map(function (point) {\n        return {\n          point: point,\n          position: (point - _this4.min) * 100 / (_this4.max - _this4.min),\n          mark: _this4.marks[point]\n        };\n      });\n    },\n    minValue: function minValue() {\n      return Math.min(this.firstValue, this.secondValue);\n    },\n    maxValue: function maxValue() {\n      return Math.max(this.firstValue, this.secondValue);\n    },\n    barSize: function barSize() {\n      return this.range ? 100 * (this.maxValue - this.minValue) / (this.max - this.min) + '%' : 100 * (this.firstValue - this.min) / (this.max - this.min) + '%';\n    },\n    barStart: function barStart() {\n      return this.range ? 100 * (this.minValue - this.min) / (this.max - this.min) + '%' : '0%';\n    },\n    precision: function precision() {\n      var precisions = [this.min, this.max, this.step].map(function (item) {\n        var decimal = ('' + item).split('.')[1];\n        return decimal ? decimal.length : 0;\n      });\n      return Math.max.apply(null, precisions);\n    },\n    runwayStyle: function runwayStyle() {\n      return this.vertical ? { height: this.height } : {};\n    },\n    barStyle: function barStyle() {\n      return this.vertical ? {\n        height: this.barSize,\n        bottom: this.barStart\n      } : {\n        width: this.barSize,\n        left: this.barStart\n      };\n    },\n    sliderDisabled: function sliderDisabled() {\n      return this.disabled || (this.elForm || {}).disabled;\n    }\n  },\n\n  mounted: function mounted() {\n    var valuetext = void 0;\n    if (this.range) {\n      if (Array.isArray(this.value)) {\n        this.firstValue = Math.max(this.min, this.value[0]);\n        this.secondValue = Math.min(this.max, this.value[1]);\n      } else {\n        this.firstValue = this.min;\n        this.secondValue = this.max;\n      }\n      this.oldValue = [this.firstValue, this.secondValue];\n      valuetext = this.firstValue + '-' + this.secondValue;\n    } else {\n      if (typeof this.value !== 'number' || isNaN(this.value)) {\n        this.firstValue = this.min;\n      } else {\n        this.firstValue = Math.min(this.max, Math.max(this.min, this.value));\n      }\n      this.oldValue = this.firstValue;\n      valuetext = this.firstValue;\n    }\n    this.$el.setAttribute('aria-valuetext', valuetext);\n\n    // label screen reader\n    this.$el.setAttribute('aria-label', this.label ? this.label : 'slider between ' + this.min + ' and ' + this.max);\n\n    this.resetSize();\n    window.addEventListener('resize', this.resetSize);\n  },\n  beforeDestroy: function beforeDestroy() {\n    window.removeEventListener('resize', this.resetSize);\n  }\n});\n// CONCATENATED MODULE: ./packages/slider/src/main.vue?vue&type=script&lang=js&\n /* harmony default export */ var packages_slider_src_mainvue_type_script_lang_js_ = (slider_src_mainvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/slider/src/main.vue\n\n\n\n\n\n/* normalize component */\n\nvar slider_src_main_component = normalizeComponent(\n  packages_slider_src_mainvue_type_script_lang_js_,\n  mainvue_type_template_id_32708644_render,\n  mainvue_type_template_id_32708644_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var slider_src_main_api; }\nslider_src_main_component.options.__file = \"packages/slider/src/main.vue\"\n/* harmony default export */ var slider_src_main = (slider_src_main_component.exports);\n// CONCATENATED MODULE: ./packages/slider/index.js\n\n\n/* istanbul ignore next */\nslider_src_main.install = function (Vue) {\n  Vue.component(slider_src_main.name, slider_src_main);\n};\n\n/* harmony default export */ var slider = (slider_src_main);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/loading/src/loading.vue?vue&type=template&id=eee0a7ac&\nvar loadingvue_type_template_id_eee0a7ac_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"transition\",\n    {\n      attrs: { name: \"el-loading-fade\" },\n      on: { \"after-leave\": _vm.handleAfterLeave }\n    },\n    [\n      _c(\n        \"div\",\n        {\n          directives: [\n            {\n              name: \"show\",\n              rawName: \"v-show\",\n              value: _vm.visible,\n              expression: \"visible\"\n            }\n          ],\n          staticClass: \"el-loading-mask\",\n          class: [_vm.customClass, { \"is-fullscreen\": _vm.fullscreen }],\n          style: { backgroundColor: _vm.background || \"\" }\n        },\n        [\n          _c(\"div\", { staticClass: \"el-loading-spinner\" }, [\n            !_vm.spinner\n              ? _c(\n                  \"svg\",\n                  {\n                    staticClass: \"circular\",\n                    attrs: { viewBox: \"25 25 50 50\" }\n                  },\n                  [\n                    _c(\"circle\", {\n                      staticClass: \"path\",\n                      attrs: { cx: \"50\", cy: \"50\", r: \"20\", fill: \"none\" }\n                    })\n                  ]\n                )\n              : _c(\"i\", { class: _vm.spinner }),\n            _vm.text\n              ? _c(\"p\", { staticClass: \"el-loading-text\" }, [\n                  _vm._v(_vm._s(_vm.text))\n                ])\n              : _vm._e()\n          ])\n        ]\n      )\n    ]\n  )\n}\nvar loadingvue_type_template_id_eee0a7ac_staticRenderFns = []\nloadingvue_type_template_id_eee0a7ac_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/loading/src/loading.vue?vue&type=template&id=eee0a7ac&\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/loading/src/loading.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* harmony default export */ var loadingvue_type_script_lang_js_ = ({\n  data: function data() {\n    return {\n      text: null,\n      spinner: null,\n      background: null,\n      fullscreen: true,\n      visible: false,\n      customClass: ''\n    };\n  },\n\n\n  methods: {\n    handleAfterLeave: function handleAfterLeave() {\n      this.$emit('after-leave');\n    },\n    setText: function setText(text) {\n      this.text = text;\n    }\n  }\n});\n// CONCATENATED MODULE: ./packages/loading/src/loading.vue?vue&type=script&lang=js&\n /* harmony default export */ var src_loadingvue_type_script_lang_js_ = (loadingvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/loading/src/loading.vue\n\n\n\n\n\n/* normalize component */\n\nvar loading_component = normalizeComponent(\n  src_loadingvue_type_script_lang_js_,\n  loadingvue_type_template_id_eee0a7ac_render,\n  loadingvue_type_template_id_eee0a7ac_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var loading_api; }\nloading_component.options.__file = \"packages/loading/src/loading.vue\"\n/* harmony default export */ var loading = (loading_component.exports);\n// EXTERNAL MODULE: external \"element-ui/lib/utils/after-leave\"\nvar after_leave_ = __webpack_require__(32);\nvar after_leave_default = /*#__PURE__*/__webpack_require__.n(after_leave_);\n\n// CONCATENATED MODULE: ./packages/loading/src/directive.js\n\n\n\n\n\nvar Mask = external_vue_default.a.extend(loading);\n\nvar loadingDirective = {};\nloadingDirective.install = function (Vue) {\n  if (Vue.prototype.$isServer) return;\n  var toggleLoading = function toggleLoading(el, binding) {\n    if (binding.value) {\n      Vue.nextTick(function () {\n        if (binding.modifiers.fullscreen) {\n          el.originalPosition = Object(dom_[\"getStyle\"])(document.body, 'position');\n          el.originalOverflow = Object(dom_[\"getStyle\"])(document.body, 'overflow');\n          el.maskStyle.zIndex = popup_[\"PopupManager\"].nextZIndex();\n\n          Object(dom_[\"addClass\"])(el.mask, 'is-fullscreen');\n          insertDom(document.body, el, binding);\n        } else {\n          Object(dom_[\"removeClass\"])(el.mask, 'is-fullscreen');\n\n          if (binding.modifiers.body) {\n            el.originalPosition = Object(dom_[\"getStyle\"])(document.body, 'position');\n\n            ['top', 'left'].forEach(function (property) {\n              var scroll = property === 'top' ? 'scrollTop' : 'scrollLeft';\n              el.maskStyle[property] = el.getBoundingClientRect()[property] + document.body[scroll] + document.documentElement[scroll] - parseInt(Object(dom_[\"getStyle\"])(document.body, 'margin-' + property), 10) + 'px';\n            });\n            ['height', 'width'].forEach(function (property) {\n              el.maskStyle[property] = el.getBoundingClientRect()[property] + 'px';\n            });\n\n            insertDom(document.body, el, binding);\n          } else {\n            el.originalPosition = Object(dom_[\"getStyle\"])(el, 'position');\n            insertDom(el, el, binding);\n          }\n        }\n      });\n    } else {\n      after_leave_default()(el.instance, function (_) {\n        if (!el.instance.hiding) return;\n        el.domVisible = false;\n        var target = binding.modifiers.fullscreen || binding.modifiers.body ? document.body : el;\n        Object(dom_[\"removeClass\"])(target, 'el-loading-parent--relative');\n        Object(dom_[\"removeClass\"])(target, 'el-loading-parent--hidden');\n        el.instance.hiding = false;\n      }, 300, true);\n      el.instance.visible = false;\n      el.instance.hiding = true;\n    }\n  };\n  var insertDom = function insertDom(parent, el, binding) {\n    if (!el.domVisible && Object(dom_[\"getStyle\"])(el, 'display') !== 'none' && Object(dom_[\"getStyle\"])(el, 'visibility') !== 'hidden') {\n      Object.keys(el.maskStyle).forEach(function (property) {\n        el.mask.style[property] = el.maskStyle[property];\n      });\n\n      if (el.originalPosition !== 'absolute' && el.originalPosition !== 'fixed') {\n        Object(dom_[\"addClass\"])(parent, 'el-loading-parent--relative');\n      }\n      if (binding.modifiers.fullscreen && binding.modifiers.lock) {\n        Object(dom_[\"addClass\"])(parent, 'el-loading-parent--hidden');\n      }\n      el.domVisible = true;\n\n      parent.appendChild(el.mask);\n      Vue.nextTick(function () {\n        if (el.instance.hiding) {\n          el.instance.$emit('after-leave');\n        } else {\n          el.instance.visible = true;\n        }\n      });\n      el.domInserted = true;\n    } else if (el.domVisible && el.instance.hiding === true) {\n      el.instance.visible = true;\n      el.instance.hiding = false;\n    }\n  };\n\n  Vue.directive('loading', {\n    bind: function bind(el, binding, vnode) {\n      var textExr = el.getAttribute('element-loading-text');\n      var spinnerExr = el.getAttribute('element-loading-spinner');\n      var backgroundExr = el.getAttribute('element-loading-background');\n      var customClassExr = el.getAttribute('element-loading-custom-class');\n      var vm = vnode.context;\n      var mask = new Mask({\n        el: document.createElement('div'),\n        data: {\n          text: vm && vm[textExr] || textExr,\n          spinner: vm && vm[spinnerExr] || spinnerExr,\n          background: vm && vm[backgroundExr] || backgroundExr,\n          customClass: vm && vm[customClassExr] || customClassExr,\n          fullscreen: !!binding.modifiers.fullscreen\n        }\n      });\n      el.instance = mask;\n      el.mask = mask.$el;\n      el.maskStyle = {};\n\n      binding.value && toggleLoading(el, binding);\n    },\n\n    update: function update(el, binding) {\n      el.instance.setText(el.getAttribute('element-loading-text'));\n      if (binding.oldValue !== binding.value) {\n        toggleLoading(el, binding);\n      }\n    },\n\n    unbind: function unbind(el, binding) {\n      if (el.domInserted) {\n        el.mask && el.mask.parentNode && el.mask.parentNode.removeChild(el.mask);\n        toggleLoading(el, { value: false, modifiers: binding.modifiers });\n      }\n      el.instance && el.instance.$destroy();\n    }\n  });\n};\n\n/* harmony default export */ var src_directive = (loadingDirective);\n// CONCATENATED MODULE: ./packages/loading/src/index.js\n\n\n\n\n\n\n\nvar LoadingConstructor = external_vue_default.a.extend(loading);\n\nvar src_defaults = {\n  text: null,\n  fullscreen: true,\n  body: false,\n  lock: false,\n  customClass: ''\n};\n\nvar fullscreenLoading = void 0;\n\nLoadingConstructor.prototype.originalPosition = '';\nLoadingConstructor.prototype.originalOverflow = '';\n\nLoadingConstructor.prototype.close = function () {\n  var _this = this;\n\n  if (this.fullscreen) {\n    fullscreenLoading = undefined;\n  }\n  after_leave_default()(this, function (_) {\n    var target = _this.fullscreen || _this.body ? document.body : _this.target;\n    Object(dom_[\"removeClass\"])(target, 'el-loading-parent--relative');\n    Object(dom_[\"removeClass\"])(target, 'el-loading-parent--hidden');\n    if (_this.$el && _this.$el.parentNode) {\n      _this.$el.parentNode.removeChild(_this.$el);\n    }\n    _this.$destroy();\n  }, 300);\n  this.visible = false;\n};\n\nvar src_addStyle = function addStyle(options, parent, instance) {\n  var maskStyle = {};\n  if (options.fullscreen) {\n    instance.originalPosition = Object(dom_[\"getStyle\"])(document.body, 'position');\n    instance.originalOverflow = Object(dom_[\"getStyle\"])(document.body, 'overflow');\n    maskStyle.zIndex = popup_[\"PopupManager\"].nextZIndex();\n  } else if (options.body) {\n    instance.originalPosition = Object(dom_[\"getStyle\"])(document.body, 'position');\n    ['top', 'left'].forEach(function (property) {\n      var scroll = property === 'top' ? 'scrollTop' : 'scrollLeft';\n      maskStyle[property] = options.target.getBoundingClientRect()[property] + document.body[scroll] + document.documentElement[scroll] + 'px';\n    });\n    ['height', 'width'].forEach(function (property) {\n      maskStyle[property] = options.target.getBoundingClientRect()[property] + 'px';\n    });\n  } else {\n    instance.originalPosition = Object(dom_[\"getStyle\"])(parent, 'position');\n  }\n  Object.keys(maskStyle).forEach(function (property) {\n    instance.$el.style[property] = maskStyle[property];\n  });\n};\n\nvar src_Loading = function Loading() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (external_vue_default.a.prototype.$isServer) return;\n  options = merge_default()({}, src_defaults, options);\n  if (typeof options.target === 'string') {\n    options.target = document.querySelector(options.target);\n  }\n  options.target = options.target || document.body;\n  if (options.target !== document.body) {\n    options.fullscreen = false;\n  } else {\n    options.body = true;\n  }\n  if (options.fullscreen && fullscreenLoading) {\n    return fullscreenLoading;\n  }\n\n  var parent = options.body ? document.body : options.target;\n  var instance = new LoadingConstructor({\n    el: document.createElement('div'),\n    data: options\n  });\n\n  src_addStyle(options, parent, instance);\n  if (instance.originalPosition !== 'absolute' && instance.originalPosition !== 'fixed') {\n    Object(dom_[\"addClass\"])(parent, 'el-loading-parent--relative');\n  }\n  if (options.fullscreen && options.lock) {\n    Object(dom_[\"addClass\"])(parent, 'el-loading-parent--hidden');\n  }\n  parent.appendChild(instance.$el);\n  external_vue_default.a.nextTick(function () {\n    instance.visible = true;\n  });\n  if (options.fullscreen) {\n    fullscreenLoading = instance;\n  }\n  return instance;\n};\n\n/* harmony default export */ var src = (src_Loading);\n// CONCATENATED MODULE: ./packages/loading/index.js\n\n\n\n/* harmony default export */ var packages_loading = ({\n  install: function install(Vue) {\n    Vue.use(src_directive);\n    Vue.prototype.$loading = src;\n  },\n\n  directive: src_directive,\n  service: src\n});\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/icon/src/icon.vue?vue&type=template&id=cb3fe7f4&\nvar iconvue_type_template_id_cb3fe7f4_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"i\", { class: \"el-icon-\" + _vm.name })\n}\nvar iconvue_type_template_id_cb3fe7f4_staticRenderFns = []\niconvue_type_template_id_cb3fe7f4_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/icon/src/icon.vue?vue&type=template&id=cb3fe7f4&\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/icon/src/icon.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n\n/* harmony default export */ var iconvue_type_script_lang_js_ = ({\n  name: 'ElIcon',\n\n  props: {\n    name: String\n  }\n});\n// CONCATENATED MODULE: ./packages/icon/src/icon.vue?vue&type=script&lang=js&\n /* harmony default export */ var src_iconvue_type_script_lang_js_ = (iconvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/icon/src/icon.vue\n\n\n\n\n\n/* normalize component */\n\nvar icon_component = normalizeComponent(\n  src_iconvue_type_script_lang_js_,\n  iconvue_type_template_id_cb3fe7f4_render,\n  iconvue_type_template_id_cb3fe7f4_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var icon_api; }\nicon_component.options.__file = \"packages/icon/src/icon.vue\"\n/* harmony default export */ var icon = (icon_component.exports);\n// CONCATENATED MODULE: ./packages/icon/index.js\n\n\n/* istanbul ignore next */\nicon.install = function (Vue) {\n  Vue.component(icon.name, icon);\n};\n\n/* harmony default export */ var packages_icon = (icon);\n// CONCATENATED MODULE: ./packages/row/src/row.js\n/* harmony default export */ var src_row = ({\n  name: 'ElRow',\n\n  componentName: 'ElRow',\n\n  props: {\n    tag: {\n      type: String,\n      default: 'div'\n    },\n    gutter: Number,\n    type: String,\n    justify: {\n      type: String,\n      default: 'start'\n    },\n    align: String\n  },\n\n  computed: {\n    style: function style() {\n      var ret = {};\n\n      if (this.gutter) {\n        ret.marginLeft = '-' + this.gutter / 2 + 'px';\n        ret.marginRight = ret.marginLeft;\n      }\n\n      return ret;\n    }\n  },\n\n  render: function render(h) {\n    return h(this.tag, {\n      class: ['el-row', this.justify !== 'start' ? 'is-justify-' + this.justify : '', this.align ? 'is-align-' + this.align : '', { 'el-row--flex': this.type === 'flex' }],\n      style: this.style\n    }, this.$slots.default);\n  }\n});\n// CONCATENATED MODULE: ./packages/row/index.js\n\n\n/* istanbul ignore next */\nsrc_row.install = function (Vue) {\n  Vue.component(src_row.name, src_row);\n};\n\n/* harmony default export */ var packages_row = (src_row);\n// CONCATENATED MODULE: ./packages/col/src/col.js\nvar col_typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/* harmony default export */ var col = ({\n  name: 'ElCol',\n\n  props: {\n    span: {\n      type: Number,\n      default: 24\n    },\n    tag: {\n      type: String,\n      default: 'div'\n    },\n    offset: Number,\n    pull: Number,\n    push: Number,\n    xs: [Number, Object],\n    sm: [Number, Object],\n    md: [Number, Object],\n    lg: [Number, Object],\n    xl: [Number, Object]\n  },\n\n  computed: {\n    gutter: function gutter() {\n      var parent = this.$parent;\n      while (parent && parent.$options.componentName !== 'ElRow') {\n        parent = parent.$parent;\n      }\n      return parent ? parent.gutter : 0;\n    }\n  },\n  render: function render(h) {\n    var _this = this;\n\n    var classList = [];\n    var style = {};\n\n    if (this.gutter) {\n      style.paddingLeft = this.gutter / 2 + 'px';\n      style.paddingRight = style.paddingLeft;\n    }\n\n    ['span', 'offset', 'pull', 'push'].forEach(function (prop) {\n      if (_this[prop] || _this[prop] === 0) {\n        classList.push(prop !== 'span' ? 'el-col-' + prop + '-' + _this[prop] : 'el-col-' + _this[prop]);\n      }\n    });\n\n    ['xs', 'sm', 'md', 'lg', 'xl'].forEach(function (size) {\n      if (typeof _this[size] === 'number') {\n        classList.push('el-col-' + size + '-' + _this[size]);\n      } else if (col_typeof(_this[size]) === 'object') {\n        var props = _this[size];\n        Object.keys(props).forEach(function (prop) {\n          classList.push(prop !== 'span' ? 'el-col-' + size + '-' + prop + '-' + props[prop] : 'el-col-' + size + '-' + props[prop]);\n        });\n      }\n    });\n\n    return h(this.tag, {\n      class: ['el-col', classList],\n      style: style\n    }, this.$slots.default);\n  }\n});\n// CONCATENATED MODULE: ./packages/col/index.js\n\n\n/* istanbul ignore next */\ncol.install = function (Vue) {\n  Vue.component(col.name, col);\n};\n\n/* harmony default export */ var packages_col = (col);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/upload/src/upload-list.vue?vue&type=template&id=173fedf5&\nvar upload_listvue_type_template_id_173fedf5_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"transition-group\",\n    {\n      class: [\n        \"el-upload-list\",\n        \"el-upload-list--\" + _vm.listType,\n        { \"is-disabled\": _vm.disabled }\n      ],\n      attrs: { tag: \"ul\", name: \"el-list\" }\n    },\n    _vm._l(_vm.files, function(file) {\n      return _c(\n        \"li\",\n