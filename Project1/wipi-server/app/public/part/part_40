) {\n    var steps = this.$parent.steps;\n    var index = steps.indexOf(this);\n    if (index >= 0) {\n      steps.splice(index, 1);\n    }\n  },\n\n\n  computed: {\n    currentStatus: function currentStatus() {\n      return this.status || this.internalStatus;\n    },\n    prevStatus: function prevStatus() {\n      var prevStep = this.$parent.steps[this.index - 1];\n      return prevStep ? prevStep.currentStatus : 'wait';\n    },\n    isCenter: function isCenter() {\n      return this.$parent.alignCenter;\n    },\n    isVertical: function isVertical() {\n      return this.$parent.direction === 'vertical';\n    },\n    isSimple: function isSimple() {\n      return this.$parent.simple;\n    },\n    isLast: function isLast() {\n      var parent = this.$parent;\n      return parent.steps[parent.steps.length - 1] === this;\n    },\n    stepsCount: function stepsCount() {\n      return this.$parent.steps.length;\n    },\n    space: function space() {\n      var isSimple = this.isSimple,\n          space = this.$parent.space;\n\n      return isSimple ? '' : space;\n    },\n\n    style: function style() {\n      var style = {};\n      var parent = this.$parent;\n      var len = parent.steps.length;\n\n      var space = typeof this.space === 'number' ? this.space + 'px' : this.space ? this.space : 100 / (len - (this.isCenter ? 0 : 1)) + '%';\n      style.flexBasis = space;\n      if (this.isVertical) return style;\n      if (this.isLast) {\n        style.maxWidth = 100 / this.stepsCount + '%';\n      } else {\n        style.marginRight = -this.$parent.stepOffset + 'px';\n      }\n\n      return style;\n    }\n  },\n\n  methods: {\n    updateStatus: function updateStatus(val) {\n      var prevChild = this.$parent.$children[this.index - 1];\n\n      if (val > this.index) {\n        this.internalStatus = this.$parent.finishStatus;\n      } else if (val === this.index && this.prevStatus !== 'error') {\n        this.internalStatus = this.$parent.processStatus;\n      } else {\n        this.internalStatus = 'wait';\n      }\n\n      if (prevChild) prevChild.calcProgress(this.internalStatus);\n    },\n    calcProgress: function calcProgress(status) {\n      var step = 100;\n      var style = {};\n\n      style.transitionDelay = 150 * this.index + 'ms';\n      if (status === this.$parent.processStatus) {\n        step = this.currentStatus !== 'error' ? 0 : 0;\n      } else if (status === 'wait') {\n        step = 0;\n        style.transitionDelay = -150 * this.index + 'ms';\n      }\n\n      style.borderWidth = step && !this.isSimple ? '1px' : 0;\n      this.$parent.direction === 'vertical' ? style.height = step + '%' : style.width = step + '%';\n\n      this.lineStyle = style;\n    }\n  },\n\n  mounted: function mounted() {\n    var _this = this;\n\n    var unwatch = this.$watch('index', function (val) {\n      _this.$watch('$parent.active', _this.updateStatus, { immediate: true });\n      _this.$watch('$parent.processStatus', function () {\n        var activeIndex = _this.$parent.active;\n        _this.updateStatus(activeIndex);\n      }, { immediate: true });\n      unwatch();\n    });\n  }\n});\n// CONCATENATED MODULE: ./packages/steps/src/step.vue?vue&type=script&lang=js&\n /* harmony default export */ var src_stepvue_type_script_lang_js_ = (stepvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/steps/src/step.vue\n\n\n\n\n\n/* normalize component */\n\nvar step_component = normalizeComponent(\n  src_stepvue_type_script_lang_js_,\n  stepvue_type_template_id_f414a87a_render,\n  stepvue_type_template_id_f414a87a_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var step_api; }\nstep_component.options.__file = \"packages/steps/src/step.vue\"\n/* harmony default export */ var step = (step_component.exports);\n// CONCATENATED MODULE: ./packages/step/index.js\n\n\n/* istanbul ignore next */\nstep.install = function (Vue) {\n  Vue.component(step.name, step);\n};\n\n/* harmony default export */ var packages_step = (step);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/carousel/src/main.vue?vue&type=template&id=5d5d1482&\nvar mainvue_type_template_id_5d5d1482_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    {\n      class: _vm.carouselClasses,\n      on: {\n        mouseenter: function($event) {\n          $event.stopPropagation()\n          return _vm.handleMouseEnter($event)\n        },\n        mouseleave: function($event) {\n          $event.stopPropagation()\n          return _vm.handleMouseLeave($event)\n        }\n      }\n    },\n    [\n      _c(\n        \"div\",\n        {\n          staticClass: \"el-carousel__container\",\n          style: { height: _vm.height }\n        },\n        [\n          _vm.arrowDisplay\n            ? _c(\"transition\", { attrs: { name: \"carousel-arrow-left\" } }, [\n                _c(\n                  \"button\",\n                  {\n                    directives: [\n                      {\n                        name: \"show\",\n                        rawName: \"v-show\",\n                        value:\n                          (_vm.arrow === \"always\" || _vm.hover) &&\n                          (_vm.loop || _vm.activeIndex > 0),\n                        expression:\n                          \"(arrow === 'always' || hover) && (loop || activeIndex > 0)\"\n                      }\n                    ],\n                    staticClass: \"el-carousel__arrow el-carousel__arrow--left\",\n                    attrs: { type: \"button\" },\n                    on: {\n                      mouseenter: function($event) {\n                        _vm.handleButtonEnter(\"left\")\n                      },\n                      mouseleave: _vm.handleButtonLeave,\n                      click: function($event) {\n                        $event.stopPropagation()\n                        _vm.throttledArrowClick(_vm.activeIndex - 1)\n                      }\n                    }\n                  },\n                  [_c(\"i\", { staticClass: \"el-icon-arrow-left\" })]\n                )\n              ])\n            : _vm._e(),\n          _vm.arrowDisplay\n            ? _c(\"transition\", { attrs: { name: \"carousel-arrow-right\" } }, [\n                _c(\n                  \"button\",\n                  {\n                    directives: [\n                      {\n                        name: \"show\",\n                        rawName: \"v-show\",\n                        value:\n                          (_vm.arrow === \"always\" || _vm.hover) &&\n                          (_vm.loop || _vm.activeIndex < _vm.items.length - 1),\n                        expression:\n                          \"(arrow === 'always' || hover) && (loop || activeIndex < items.length - 1)\"\n                      }\n                    ],\n                    staticClass: \"el-carousel__arrow el-carousel__arrow--right\",\n                    attrs: { type: \"button\" },\n                    on: {\n                      mouseenter: function($event) {\n                        _vm.handleButtonEnter(\"right\")\n                      },\n                      mouseleave: _vm.handleButtonLeave,\n                      click: function($event) {\n                        $event.stopPropagation()\n                        _vm.throttledArrowClick(_vm.activeIndex + 1)\n                      }\n                    }\n                  },\n                  [_c(\"i\", { staticClass: \"el-icon-arrow-right\" })]\n                )\n              ])\n            : _vm._e(),\n          _vm._t(\"default\")\n        ],\n        2\n      ),\n      _vm.indicatorPosition !== \"none\"\n        ? _c(\n            \"ul\",\n            { class: _vm.indicatorsClasses },\n            _vm._l(_vm.items, function(item, index) {\n              return _c(\n                \"li\",\n                {\n                  key: index,\n                  class: [\n                    \"el-carousel__indicator\",\n                    \"el-carousel__indicator--\" + _vm.direction,\n                    { \"is-active\": index === _vm.activeIndex }\n                  ],\n                  on: {\n                    mouseenter: function($event) {\n                      _vm.throttledIndicatorHover(index)\n                    },\n                    click: function($event) {\n                      $event.stopPropagation()\n                      _vm.handleIndicatorClick(index)\n                    }\n                  }\n                },\n                [\n                  _c(\"button\", { staticClass: \"el-carousel__button\" }, [\n                    _vm.hasLabel\n                      ? _c(\"span\", [_vm._v(_vm._s(item.label))])\n                      : _vm._e()\n                  ])\n                ]\n              )\n            }),\n            0\n          )\n        : _vm._e()\n    ]\n  )\n}\nvar mainvue_type_template_id_5d5d1482_staticRenderFns = []\nmainvue_type_template_id_5d5d1482_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/carousel/src/main.vue?vue&type=template&id=5d5d1482&\n\n// EXTERNAL MODULE: external \"throttle-debounce/throttle\"\nvar throttle_ = __webpack_require__(25);\nvar throttle_default = /*#__PURE__*/__webpack_require__.n(throttle_);\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/carousel/src/main.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n/* harmony default export */ var carousel_src_mainvue_type_script_lang_js_ = ({\n  name: 'ElCarousel',\n\n  props: {\n    initialIndex: {\n      type: Number,\n      default: 0\n    },\n    height: String,\n    trigger: {\n      type: String,\n      default: 'hover'\n    },\n    autoplay: {\n      type: Boolean,\n      default: true\n    },\n    interval: {\n      type: Number,\n      default: 3000\n    },\n    indicatorPosition: String,\n    indicator: {\n      type: Boolean,\n      default: true\n    },\n    arrow: {\n      type: String,\n      default: 'hover'\n    },\n    type: String,\n    loop: {\n      type: Boolean,\n      default: true\n    },\n    direction: {\n      type: String,\n      default: 'horizontal',\n      validator: function validator(val) {\n        return ['horizontal', 'vertical'].indexOf(val) !== -1;\n      }\n    }\n  },\n\n  data: function data() {\n    return {\n      items: [],\n      activeIndex: -1,\n      containerWidth: 0,\n      timer: null,\n      hover: false\n    };\n  },\n\n\n  computed: {\n    arrowDisplay: function arrowDisplay() {\n      return this.arrow !== 'never' && this.direction !== 'vertical';\n    },\n    hasLabel: function hasLabel() {\n      return this.items.some(function (item) {\n        return item.label.toString().length > 0;\n      });\n    },\n    carouselClasses: function carouselClasses() {\n      var classes = ['el-carousel', 'el-carousel--' + this.direction];\n      if (this.type === 'card') {\n        classes.push('el-carousel--card');\n      }\n      return classes;\n    },\n    indicatorsClasses: function indicatorsClasses() {\n      var classes = ['el-carousel__indicators', 'el-carousel__indicators--' + this.direction];\n      if (this.hasLabel) {\n        classes.push('el-carousel__indicators--labels');\n      }\n      if (this.indicatorPosition === 'outside' || this.type === 'card') {\n        classes.push('el-carousel__indicators--outside');\n      }\n      return classes;\n    }\n  },\n\n  watch: {\n    items: function items(val) {\n      if (val.length > 0) this.setActiveItem(this.initialIndex);\n    },\n    activeIndex: function activeIndex(val, oldVal) {\n      this.resetItemPosition(oldVal);\n      if (oldVal > -1) {\n        this.$emit('change', val, oldVal);\n      }\n    },\n    autoplay: function autoplay(val) {\n      val ? this.startTimer() : this.pauseTimer();\n    },\n    loop: function loop() {\n      this.setActiveItem(this.activeIndex);\n    },\n    interval: function interval() {\n      this.pauseTimer();\n      this.startTimer();\n    }\n  },\n\n  methods: {\n    handleMouseEnter: function handleMouseEnter() {\n      this.hover = true;\n      this.pauseTimer();\n    },\n    handleMouseLeave: function handleMouseLeave() {\n      this.hover = false;\n      this.startTimer();\n    },\n    itemInStage: function itemInStage(item, index) {\n      var length = this.items.length;\n      if (index === length - 1 && item.inStage && this.items[0].active || item.inStage && this.items[index + 1] && this.items[index + 1].active) {\n        return 'left';\n      } else if (index === 0 && item.inStage && this.items[length - 1].active || item.inStage && this.items[index - 1] && this.items[index - 1].active) {\n        return 'right';\n      }\n      return false;\n    },\n    handleButtonEnter: function handleButtonEnter(arrow) {\n      var _this = this;\n\n      if (this.direction === 'vertical') return;\n      this.items.forEach(function (item, index) {\n        if (arrow === _this.itemInStage(item, index)) {\n          item.hover = true;\n        }\n      });\n    },\n    handleButtonLeave: function handleButtonLeave() {\n      if (this.direction === 'vertical') return;\n      this.items.forEach(function (item) {\n        item.hover = false;\n      });\n    },\n    updateItems: function updateItems() {\n      this.items = this.$children.filter(function (child) {\n        return child.$options.name === 'ElCarouselItem';\n      });\n    },\n    resetItemPosition: function resetItemPosition(oldIndex) {\n      var _this2 = this;\n\n      this.items.forEach(function (item, index) {\n        item.translateItem(index, _this2.activeIndex, oldIndex);\n      });\n    },\n    playSlides: function playSlides() {\n      if (this.activeIndex < this.items.length - 1) {\n        this.activeIndex++;\n      } else if (this.loop) {\n        this.activeIndex = 0;\n      }\n    },\n    pauseTimer: function pauseTimer() {\n      if (this.timer) {\n        clearInterval(this.timer);\n        this.timer = null;\n      }\n    },\n    startTimer: function startTimer() {\n      if (this.interval <= 0 || !this.autoplay || this.timer) return;\n      this.timer = setInterval(this.playSlides, this.interval);\n    },\n    resetTimer: function resetTimer() {\n      this.pauseTimer();\n      this.startTimer();\n    },\n    setActiveItem: function setActiveItem(index) {\n      if (typeof index === 'string') {\n        var filteredItems = this.items.filter(function (item) {\n          return item.name === index;\n        });\n        if (filteredItems.length > 0) {\n          index = this.items.indexOf(filteredItems[0]);\n        }\n      }\n      index = Number(index);\n      if (isNaN(index) || index !== Math.floor(index)) {\n        console.warn('[Element Warn][Carousel]index must be an integer.');\n        return;\n      }\n      var length = this.items.length;\n      var oldIndex = this.activeIndex;\n      if (index < 0) {\n        this.activeIndex = this.loop ? length - 1 : 0;\n      } else if (index >= length) {\n        this.activeIndex = this.loop ? 0 : length - 1;\n      } else {\n        this.activeIndex = index;\n      }\n      if (oldIndex === this.activeIndex) {\n        this.resetItemPosition(oldIndex);\n      }\n      this.resetTimer();\n    },\n    prev: function prev() {\n      this.setActiveItem(this.activeIndex - 1);\n    },\n    next: function next() {\n      this.setActiveItem(this.activeIndex + 1);\n    },\n    handleIndicatorClick: function handleIndicatorClick(index) {\n      this.activeIndex = index;\n    },\n    handleIndicatorHover: function handleIndicatorHover(index) {\n      if (this.trigger === 'hover' && index !== this.activeIndex) {\n        this.activeIndex = index;\n      }\n    }\n  },\n\n  created: function created() {\n    var _this3 = this;\n\n    this.throttledArrowClick = throttle_default()(300, true, function (index) {\n      _this3.setActiveItem(index);\n    });\n    this.throttledIndicatorHover = throttle_default()(300, function (index) {\n      _this3.handleIndicatorHover(index);\n    });\n  },\n  mounted: function mounted() {\n    var _this4 = this;\n\n    this.updateItems();\n    this.$nextTick(function () {\n      Object(resize_event_[\"addResizeListener\"])(_this4.$el, _this4.resetItemPosition);\n      if (_this4.initialIndex < _this4.items.length && _this4.initialIndex >= 0) {\n        _this4.activeIndex = _this4.initialIndex;\n      }\n      _this4.startTimer();\n    });\n  },\n  beforeDestroy: function beforeDestroy() {\n    if (this.$el) Object(resize_event_[\"removeResizeListener\"])(this.$el, this.resetItemPosition);\n    this.pauseTimer();\n  }\n});\n// CONCATENATED MODULE: ./packages/carousel/src/main.vue?vue&type=script&lang=js&\n /* harmony default export */ var packages_carousel_src_mainvue_type_script_lang_js_ = (carousel_src_mainvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/carousel/src/main.vue\n\n\n\n\n\n/* normalize component */\n\nvar carousel_src_main_component = normalizeComponent(\n  packages_carousel_src_mainvue_type_script_lang_js_,\n  mainvue_type_template_id_5d5d1482_render,\n  mainvue_type_template_id_5d5d1482_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var carousel_src_main_api; }\ncarousel_src_main_component.options.__file = \"packages/carousel/src/main.vue\"\n/* harmony default export */ var carousel_src_main = (carousel_src_main_component.exports);\n// CONCATENATED MODULE: ./packages/carousel/index.js\n\n\n/* istanbul ignore next */\ncarousel_src_main.install = function (Vue) {\n  Vue.component(carousel_src_main.name, carousel_src_main);\n};\n\n/* harmony default export */ var carousel = (carousel_src_main);\n// CONCATENATED MODULE: ./packages/scrollbar/src/util.js\nvar BAR_MAP = {\n  vertical: {\n    offset: 'offsetHeight',\n    scroll: 'scrollTop',\n    scrollSize: 'scrollHeight',\n    size: 'height',\n    key: 'vertical',\n    axis: 'Y',\n    client: 'clientY',\n    direction: 'top'\n  },\n  horizontal: {\n    offset: 'offsetWidth',\n    scroll: 'scrollLeft',\n    scrollSize: 'scrollWidth',\n    size: 'width',\n    key: 'horizontal',\n    axis: 'X',\n    client: 'clientX',\n    direction: 'left'\n  }\n};\n\nfunction renderThumbStyle(_ref) {\n  var move = _ref.move,\n      size = _ref.size,\n      bar = _ref.bar;\n\n  var style = {};\n  var translate = 'translate' + bar.axis + '(' + move + '%)';\n\n  style[bar.size] = size;\n  style.transform = translate;\n  style.msTransform = translate;\n  style.webkitTransform = translate;\n\n  return style;\n};\n// CONCATENATED MODULE: ./packages/scrollbar/src/bar.js\n\n\n\n/* istanbul ignore next */\n/* harmony default export */ var src_bar = ({\n  name: 'Bar',\n\n  props: {\n    vertical: Boolean,\n    size: String,\n    move: Number\n  },\n\n  computed: {\n    bar: function bar() {\n      return BAR_MAP[this.vertical ? 'vertical' : 'horizontal'];\n    },\n    wrap: function wrap() {\n      return this.$parent.wrap;\n    }\n  },\n\n  render: function render(h) {\n    var size = this.size,\n        move = this.move,\n        bar = this.bar;\n\n\n    return h(\n      'div',\n      {\n        'class': ['el-scrollbar__bar', 'is-' + bar.key],\n        on: {\n          'mousedown': this.clickTrackHandler\n        }\n      },\n      [h('div', {\n        ref: 'thumb',\n        'class': 'el-scrollbar__thumb',\n        on: {\n          'mousedown': this.clickThumbHandler\n        },\n\n        style: renderThumbStyle({ size: size, move: move, bar: bar }) })]\n    );\n  },\n\n\n  methods: {\n    clickThumbHandler: function clickThumbHandler(e) {\n      // prevent click event of right button\n      if (e.ctrlKey || e.button === 2) {\n        return;\n      }\n      this.startDrag(e);\n      this[this.bar.axis] = e.currentTarget[this.bar.offset] - (e[this.bar.client] - e.currentTarget.getBoundingClientRect()[this.bar.direction]);\n    },\n    clickTrackHandler: function clickTrackHandler(e) {\n      var offset = Math.abs(e.target.getBoundingClientRect()[this.bar.direction] - e[this.bar.client]);\n      var thumbHalf = this.$refs.thumb[this.bar.offset] / 2;\n      var thumbPositionPercentage = (offset - thumbHalf) * 100 / this.$el[this.bar.offset];\n\n      this.wrap[this.bar.scroll] = thumbPositionPercentage * this.wrap[this.bar.scrollSize] / 100;\n    },\n    startDrag: function startDrag(e) {\n      e.stopImmediatePropagation();\n      this.cursorDown = true;\n\n      Object(dom_[\"on\"])(document, 'mousemove', this.mouseMoveDocumentHandler);\n      Object(dom_[\"on\"])(document, 'mouseup', this.mouseUpDocumentHandler);\n      document.onselectstart = function () {\n        return false;\n      };\n    },\n    mouseMoveDocumentHandler: function mouseMoveDocumentHandler(e) {\n      if (this.cursorDown === false) return;\n      var prevPage = this[this.bar.axis];\n\n      if (!prevPage) return;\n\n      var offset = (this.$el.getBoundingClientRect()[this.bar.direction] - e[this.bar.client]) * -1;\n      var thumbClickPosition = this.$refs.thumb[this.bar.offset] - prevPage;\n      var thumbPositionPercentage = (offset - thumbClickPosition) * 100 / this.$el[this.bar.offset];\n\n      this.wrap[this.bar.scroll] = thumbPositionPercentage * this.wrap[this.bar.scrollSize] / 100;\n    },\n    mouseUpDocumentHandler: function mouseUpDocumentHandler(e) {\n      this.cursorDown = false;\n      this[this.bar.axis] = 0;\n      Object(dom_[\"off\"])(document, 'mousemove', this.mouseMoveDocumentHandler);\n      document.onselectstart = null;\n    }\n  },\n\n  destroyed: function destroyed() {\n    Object(dom_[\"off\"])(document, 'mouseup', this.mouseUpDocumentHandler);\n  }\n});\n// CONCATENATED MODULE: ./packages/scrollbar/src/main.js\n// reference https://github.com/noeldelgado/gemini-scrollbar/blob/master/index.js\n\n\n\n\n\n\n/* istanbul ignore next */\n/* harmony default export */ var scrollbar_src_main = ({\n  name: 'ElScrollbar',\n\n  components: { Bar: src_bar },\n\n  props: {\n    native: Boolean,\n    wrapStyle: {},\n    wrapClass: {},\n    viewClass: {},\n    viewStyle: {},\n    noresize: Boolean, // 如果 container 尺寸不会发生变化，最好设置它可以优化性能\n    tag: {\n      type: String,\n      default: 'div'\n    }\n  },\n\n  data: function data() {\n    return {\n      sizeWidth: '0',\n      sizeHeight: '0',\n      moveX: 0,\n      moveY: 0\n    };\n  },\n\n\n  computed: {\n    wrap: function wrap() {\n      return this.$refs.wrap;\n    }\n  },\n\n  render: function render(h) {\n    var gutter = scrollbar_width_default()();\n    var style = this.wrapStyle;\n\n    if (gutter) {\n      var gutterWith = '-' + gutter + 'px';\n      var gutterStyle = 'margin-bottom: ' + gutterWith + '; margin-right: ' + gutterWith + ';';\n\n      if (Array.isArray(this.wrapStyle)) {\n        style = Object(util_[\"toObject\"])(this.wrapStyle);\n        style.marginRight = style.marginBottom = gutterWith;\n      } else if (typeof this.wrapStyle === 'string') {\n        style += gutterStyle;\n      } else {\n        style = gutterStyle;\n      }\n    }\n    var view = h(this.tag, {\n      class: ['el-scrollbar__view', this.viewClass],\n      style: this.viewStyle,\n      ref: 'resize'\n    }, this.$slots.default);\n    var wrap = h(\n      'div',\n      {\n        ref: 'wrap',\n        style: style,\n        on: {\n          'scroll': this.handleScroll\n        },\n\n        'class': [this.wrapClass, 'el-scrollbar__wrap', gutter ? '' : 'el-scrollbar__wrap--hidden-default'] },\n      [[view]]\n    );\n    var nodes = void 0;\n\n    if (!this.native) {\n      nodes = [wrap, h(src_bar, {\n        attrs: {\n          move: this.moveX,\n          size: this.sizeWidth }\n      }), h(src_bar, {\n        attrs: {\n          vertical: true,\n          move: this.moveY,\n          size: this.sizeHeight }\n      })];\n    } else {\n      nodes = [h(\n        'div',\n        {\n          ref: 'wrap',\n          'class': [this.wrapClass, 'el-scrollbar__wrap'],\n          style: style },\n        [[view]]\n      )];\n    }\n    return h('div', { class: 'el-scrollbar' }, nodes);\n  },\n\n\n  methods: {\n    handleScroll: function handleScroll() {\n      var wrap = this.wrap;\n\n      this.moveY = wrap.scrollTop * 100 / wrap.clientHeight;\n      this.moveX = wrap.scrollLeft * 100 / wrap.clientWidth;\n    },\n    update: function update() {\n      var heightPercentage = void 0,\n          widthPercentage = void 0;\n      var wrap = this.wrap;\n      if (!wrap) return;\n\n      heightPercentage = wrap.clientHeight * 100 / wrap.scrollHeight;\n      widthPercentage = wrap.clientWidth * 100 / wrap.scrollWidth;\n\n      this.sizeHeight = heightPercentage < 100 ? heightPercentage + '%' : '';\n      this.sizeWidth = widthPercentage < 100 ? widthPercentage + '%' : '';\n    }\n  },\n\n  mounted: function mounted() {\n    if (this.native) return;\n    this.$nextTick(this.update);\n    !this.noresize && Object(resize_event_[\"addResizeListener\"])(this.$refs.resize, this.update);\n  },\n  beforeDestroy: function beforeDestroy() {\n    if (this.native) return;\n    !this.noresize && Object(resize_event_[\"removeResizeListener\"])(this.$refs.resize, this.update);\n  }\n});\n// CONCATENATED MODULE: ./packages/scrollbar/index.js\n\n\n/* istanbul ignore next */\nscrollbar_src_main.install = function (Vue) {\n  Vue.component(scrollbar_src_main.name, scrollbar_src_main);\n};\n\n/* harmony default export */ var scrollbar = (scrollbar_src_main);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/carousel/src/item.vue?vue&type=template&id=1801ae19&\nvar itemvue_type_template_id_1801ae19_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    {\n      directives: [\n        {\n          name: \"show\",\n          rawName: \"v-show\",\n          value: _vm.ready,\n          expression: \"ready\"\n        }\n      ],\n      staticClass: \"el-carousel__item\",\n      class: {\n        \"is-active\": _vm.active,\n        \"el-carousel__item--card\": _vm.$parent.type === \"card\",\n        \"is-in-stage\": _vm.inStage,\n        \"is-hover\": _vm.hover,\n        \"is-animating\": _vm.animating\n      },\n      style: _vm.itemStyle,\n      on: { click: _vm.handleItemClick }\n    },\n    [\n      _vm.$parent.type === \"card\"\n        ? _c(\"div\", {\n            directives: [\n              {\n                name: \"show\",\n                rawName: \"v-show\",\n                value: !_vm.active,\n                expression: \"!active\"\n              }\n            ],\n            staticClass: \"el-carousel__mask\"\n          })\n        : _vm._e(),\n      _vm._t(\"default\")\n    ],\n    2\n  )\n}\nvar itemvue_type_template_id_1801ae19_staticRenderFns = []\nitemvue_type_template_id_1801ae19_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/carousel/src/item.vue?vue&type=template&id=1801ae19&\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/carousel/src/item.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\nvar CARD_SCALE = 0.83;\n/* harmony default export */ var itemvue_type_script_lang_js_ = ({\n  name: 'ElCarouselItem',\n\n  props: {\n    name: String,\n    label: {\n      type: [String, Number],\n      default: ''\n    }\n  },\n\n  data: function data() {\n    return {\n      hover: false,\n      translate: 0,\n      scale: 1,\n      active: false,\n      ready: false,\n      inStage: false,\n      animating: false\n    };\n  },\n\n\n  methods: {\n    processIndex: function processIndex(index, activeIndex, length) {\n      if (activeIndex === 0 && index === length - 1) {\n        return -1;\n      } else if (activeIndex === length - 1 && index === 0) {\n        return length;\n      } else if (index < activeIndex - 1 && activeIndex - index >= length / 2) {\n        return length + 1;\n      } else if (index > activeIndex + 1 && index - activeIndex >= length / 2) {\n        return -2;\n      }\n      return index;\n    },\n    calcCardTranslate: function calcCardTranslate(index, activeIndex) {\n      var parentWidth = this.$parent.$el.offsetWidth;\n      if (this.inStage) {\n        return parentWidth * ((2 - CARD_SCALE) * (index - activeIndex) + 1) / 4;\n      } else if (index < activeIndex) {\n        return -(1 + CARD_SCALE) * parentWidth / 4;\n      } else {\n        return (3 + CARD_SCALE) * parentWidth / 4;\n      }\n    },\n    calcTranslate: function calcTranslate(index, activeIndex, isVertical) {\n      var distance = this.$parent.$el[isVertical ? 'offsetHeight' : 'offsetWidth'];\n      return distance * (index - activeIndex);\n    },\n    translateItem: function translateItem(index, activeIndex, oldIndex) {\n      var parentType = this.$parent.type;\n      var parentDirection = this.parentDirection;\n      var length = this.$parent.items.length;\n      if (parentType !== 'card' && oldIndex !== undefined) {\n        this.animating = index === activeIndex || index === oldIndex;\n      }\n      if (index !== activeIndex && length > 2 && this.$parent.loop) {\n        index = this.processIndex(index, activeIndex, length);\n      }\n      if (parentType === 'card') {\n        if (parentDirection === 'vertical') {\n          console.warn('[Element Warn][Carousel]vertical direction is not supported in card mode');\n        }\n        this.inStage = Math.round(Math.abs(index - activeIndex)) <= 1;\n        this.active = index === activeIndex;\n        this.translate = this.calcCardTranslate(index, activeIndex);\n        this.scale = this.active ? 1 : CARD_SCALE;\n      } else {\n        this.active = index === activeIndex;\n        var isVertical = parentDirection === 'vertical';\n        this.translate = this.calcTranslate(index, activeIndex, isVertical);\n        this.scale = 1;\n      }\n      this.ready = true;\n    },\n    handleItemClick: function handleItemClick() {\n      var parent = this.$parent;\n      if (parent && parent.type === 'card') {\n        var index = parent.items.indexOf(this);\n        parent.setActiveItem(index);\n      }\n    }\n  },\n\n  computed: {\n    parentDirection: function parentDirection() {\n      return this.$parent.direction;\n    },\n    itemStyle: function itemStyle() {\n      var translateType = this.parentDirection === 'vertical' ? 'translateY' : 'translateX';\n      var value = translateType + '(' + this.translate + 'px) scale(' + this.scale + ')';\n      var style = {\n        transform: value\n      };\n      return Object(util_[\"autoprefixer\"])(style);\n    }\n  },\n\n  created: function created() {\n    this.$parent && this.$parent.updateItems();\n  },\n  destroyed: function destroyed() {\n    this.$parent && this.$parent.updateItems();\n  }\n});\n// CONCATENATED MODULE: ./packages/carousel/src/item.vue?vue&type=script&lang=js&\n /* harmony default export */ var src_itemvue_type_script_lang_js_ = (itemvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/carousel/src/item.vue\n\n\n\n\n\n/* normalize component */\n\nvar item_component = normalizeComponent(\n  src_itemvue_type_script_lang_js_,\n  itemvue_type_template_id_1801ae19_render,\n  itemvue_type_template_id_1801ae19_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var item_api; }\nitem_component.options.__file = \"packages/carousel/src/item.vue\"\n/* harmony default export */ var src_item = (item_component.exports);\n// CONCATENATED MODULE: ./packages/carousel-item/index.js\n\n\n/* istanbul ignore next */\nsrc_item.install = function (Vue) {\n  Vue.component(src_item.name, src_item);\n};\n\n/* harmony default export */ var carousel_item = (src_item);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/collapse/src/collapse.vue?vue&type=template&id=461d57f4&\nvar collapsevue_type_template_id_461d57f4_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    {\n      staticClass: \"el-collapse\",\n      attrs: { role: \"tablist\", \"aria-multiselectable\": \"true\" }\n    },\n    [_vm._t(\"default\")],\n    2\n  )\n}\nvar collapsevue_type_template_id_461d57f4_staticRenderFns = []\ncollapsevue_type_template_id_461d57f4_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/collapse/src/collapse.vue?vue&type=template&id=461d57f4&\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/collapse/src/collapse.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n\n/* harmony default export */ var collapsevue_type_script_lang_js_ = ({\n  name: 'ElCollapse',\n\n  componentName: 'ElCollapse',\n\n  props: {\n    accordion: Boolean,\n    value: {\n      type: [Array, String, Number],\n      default: function _default() {\n        return [];\n      }\n    }\n  },\n\n  data: function data() {\n    return {\n      activeNames: [].concat(this.value)\n    };\n  },\n  provide: function provide() {\n    return {\n      collapse: this\n    };\n  },\n\n\n  watch: {\n    value: function value(_value) {\n      this.activeNames = [].concat(_value);\n    }\n  },\n\n  methods: {\n    setActiveNames: function setActiveNames(activeNames) {\n      activeNames = [].concat(activeNames);\n      var value = this.accordion ? activeNames[0] : activeNames;\n      this.activeNames = activeNames;\n      this.$emit('input', value);\n      this.$emit('change', value);\n    },\n    handleItemClick: function handleItemClick(item) {\n      if (this.accordion) {\n        this.setActiveNames((this.activeNames[0] || this.activeNames[0] === 0) && this.activeNames[0] === item.name ? '' : item.name);\n      } else {\n        var activeNames = this.activeNames.slice(0);\n        var index = activeNames.indexOf(item.name);\n\n        if (index > -1) {\n          activeNames.splice(index, 1);\n        } else {\n          activeNames.push(item.name);\n        }\n        this.setActiveNames(activeNames);\n      }\n    }\n  },\n\n  created: function created() {\n    this.$on('item-click', this.handleItemClick);\n  }\n});\n// CONCATENATED MODULE: ./packages/collapse/src/collapse.vue?vue&type=script&lang=js&\n /* harmony default export */ var src_collapsevue_type_script_lang_js_ = (collapsevue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/collapse/src/collapse.vue\n\n\n\n\n\n/* normalize component */\n\nvar collapse_component = normalizeComponent(\n  src_collapsevue_type_script_lang_js_,\n  collapsevue_type_template_id_461d57f4_render,\n  collapsevue_type_template_id_461d57f4_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var collapse_api; }\ncollapse_component.options.__file = \"packages/collapse/src/collapse.vue\"\n/* harmony default export */ var collapse = (collapse_component.exports);\n// CONCATENATED MODULE: ./packages/collapse/index.js\n\n\n/* istanbul ignore next */\ncollapse.install = function (Vue) {\n  Vue.component(collapse.name, collapse);\n};\n\n/* harmony default export */ var packages_collapse = (collapse);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/collapse/src/collapse-item.vue?vue&type=template&id=2d05faac&\nvar collapse_itemvue_type_template_id_2d05faac_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    {\n      staticClass: \"el-collapse-item\",\n      class: { \"is-active\": _vm.isActive, \"is-disabled\": _vm.disabled }\n    },\n    [\n      _c(\n        \"div\",\n        {\n          attrs: {\n            role: \"tab\",\n            \"aria-expanded\": _vm.isActive,\n            \"aria-controls\": \"el-collapse-content-\" + _vm.id,\n            \"aria-describedby\": \"el-collapse-content-\" + _vm.id\n          }\n        },\n        [\n          _c(\n            \"div\",\n            {\n              staticClass: \"el-collapse-item__header\",\n              class: {\n                focusing: _vm.focusing,\n                \"is-active\": _vm.isActive\n              },\n              attrs: {\n                role: \"button\",\n                id: \"el-collapse-head-\" + _vm.id,\n                tabindex: _vm.disabled ? undefined : 0\n              },\n              on: {\n                click: _vm.handleHeaderClick,\n                keyup: function($event) {\n                  if (\n                    !(\"button\" in $event) &&\n                    _vm._k($event.keyCode, \"space\", 32, $event.key, [\n                      \" \",\n                      \"Spacebar\"\n                    ]) &&\n                    _vm._k($event.keyCode, \"enter\", 13, $event.key, \"Enter\")\n                  ) {\n                    return null\n                  }\n                  $event.stopPropagation()\n                  return _vm.handleEnterClick($event)\n                },\n                focus: _vm.handleFocus,\n                blur: function($event) {\n                  _vm.focusing = false\n                }\n              }\n            },\n            [\n              _vm._t(\"title\", [_vm._v(_vm._s(_vm.title))]),\n              _c(\"i\", {\n                staticClass: \"el-collapse-item__arrow el-icon-arrow-right\",\n                class: { \"is-active\": _vm.isActive }\n              })\n            ],\n            2\n          )\n        ]\n      ),\n      _c(\"el-collapse-transition\", [\n        _c(\n          \"div\",\n          {\n            directives: [\n              {\n                name: \"show\",\n                rawName: \"v-show\",\n                value: _vm.isActive,\n                expression: \"isActive\"\n              }\n            ],\n            staticClass: \"el-collapse-item__wrap\",\n            attrs: {\n              role: \"tabpanel\",\n              \"aria-hidden\": !_vm.isActive,\n              \"aria-labelledby\": \"el-collapse-head-\" + _vm.id,\n              id: \"el-collapse-content-\" + _vm.id\n            }\n          },\n          [\n            _c(\n              \"div\",\n              { staticClass: \"el-collapse-item__content\" },\n              [_vm._t(\"default\")],\n              2\n            )\n          ]\n        )\n      ])\n    ],\n    1\n  )\n}\nvar collapse_itemvue_type_template_id_2d05faac_staticRenderFns = []\ncollapse_itemvue_type_template_id_2d05faac_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/collapse/src/collapse-item.vue?vue&type=template&id=2d05faac&\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/collapse/src/collapse-item.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n/* harmony default export */ var collapse_itemvue_type_script_lang_js_ = ({\n  name: 'ElCollapseItem',\n\n  componentName: 'ElCollapseItem',\n\n  mixins: [emitter_default.a],\n\n  components: { ElCollapseTransition: collapse_transition_default.a },\n\n  data: function data() {\n    return {\n      contentWrapStyle: {\n        height: 'auto',\n        display: 'block'\n      },\n      contentHeight: 0,\n      focusing: false,\n      isClick: false,\n      id: Object(util_[\"generateId\"])()\n    };\n  },\n\n\n  inject: ['collapse'],\n\n  props: {\n    title: String,\n    name: {\n      type: [String, Number],\n      default: function _default() {\n        return this._uid;\n      }\n    },\n    disabled: Boolean\n  },\n\n  computed: {\n    isActive: function isActive() {\n      return this.collapse.activeNames.indexOf(this.name) > -1;\n    }\n  },\n\n  methods: {\n    handleFocus: function handleFocus() {\n      var _this = this;\n\n      setTimeout(function () {\n        if (!_this.isClick) {\n          _this.focusing = true;\n        } else {\n          _this.isClick = false;\n        }\n      }, 50);\n    },\n    handleHeaderClick: function handleHeaderClick() {\n      if (this.disabled) return;\n      this.dispatch('ElCollapse', 'item-click', this);\n      this.focusing = false;\n      this.isClick = true;\n    },\n    handleEnterClick: function handleEnterClick() {\n      this.dispatch('ElCollapse', 'item-click', this);\n    }\n  }\n});\n// CONCATENATED MODULE: ./packages/collapse/src/collapse-item.vue?vue&type=script&lang=js&\n /* harmony default export */ var src_collapse_itemvue_type_script_lang_js_ = (collapse_itemvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/collapse/src/collapse-item.vue\n\n\n\n\n\n/* normalize component */\n\nvar collapse_item_component = normalizeComponent(\n  src_collapse_itemvue_type_script_lang_js_,\n  collapse_itemvue_type_template_id_2d05faac_render,\n  collapse_itemvue_type_template_id_2d05faac_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var collapse_item_api; }\ncollapse_item_component.options.__file = \"packages/collapse/src/collapse-item.vue\"\n/* harmony default export */ var collapse_item = (collapse_item_component.exports);\n// CONCATENATED MODULE: ./packages/collapse-item/index.js\n\n\n/* istanbul ignore next */\ncollapse_item.install = function (Vue) {\n  Vue.component(collapse_item.name, collapse_item);\n};\n\n/* harmony default export */ var packages_collapse_item = (collapse_item);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/cascader/src/cascader.vue?vue&type=template&id=032537a6&\nvar cascadervue_type_template_id_032537a6_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    {\n      directives: [\n        {\n          name: \"clickoutside\",\n          rawName: \"v-clickoutside\",\n          value: function() {\n            return _vm.toggleDropDownVisible(false)\n          },\n          expression: \"() => toggleDropDownVisible(false)\"\n        }\n      ],\n      ref: \"reference\",\n      class: [\n        \"el-cascader\",\n        _vm.realSize && \"el-cascader--\" + _vm.realSize,\n        { \"is-disabled\": _vm.isDisabled }\n      ],\n      on: {\n        mouseenter: function($event) {\n          _vm.inputHover = true\n        },\n        mouseleave: function($event) {\n          _vm.inputHover = false\n        },\n        click: function() {\n          return _vm.toggleDropDownVisible(_vm.readonly ? undefined : true)\n        },\n        keydown: _vm.handleKeyDown\n      }\n    },\n    [\n      _c(\n        \"el-input\",\n        {\n          ref: \"input\",\n          class: { \"is-focus\": _vm.dropDownVisible },\n          attrs: {\n            size: _vm.realSize,\n            placeholder: _vm.placeholder,\n            readonly: _vm.readonly,\n            disabled: _vm.isDisabled,\n            \"validate-event\": false\n          },\n          on: {\n            focus: _vm.handleFocus,\n            blur: _vm.handleBlur,\n            input: _vm.handleInput\n          },\n          model: {\n            value: _vm.multiple ? _vm.presentText : _vm.inputValue,\n            callback: function($$v) {\n              _vm.multiple ? _vm.presentText : (_vm.inputValue = $$v)\n            },\n            expression: \"multiple ? presentText : inputValue\"\n          }\n        },\n        [\n          _c(\"template\", { slot: \"suffix\" }, [\n            _vm.clearBtnVisible\n              ? _c(\"i\", {\n                  key: \"clear\",\n                  staticClass: \"el-input__icon el-icon-circle-close\",\n                  on: {\n                    click: function($event) {\n                      $event.stopPropagation()\n                      return _vm.handleClear($event)\n                    }\n                  }\n                })\n              : _c(\"i\", {\n                  key: \"arrow-down\",\n                  class: [\n                    \"el-input__icon\",\n                    \"el-icon-arrow-down\",\n                    _vm.dropDownVisible && \"is-reverse\"\n                  ],\n                  on: {\n                    click: function($event) {\n                      $event.stopPropagation()\n                      _vm.toggleDropDownVisible()\n                    }\n                  }\n                })\n          ])\n        ],\n        2\n      ),\n      _vm.multiple\n        ? _c(\n            \"div\",\n            { staticClass: \"el-cascader__tags\" },\n            [\n              _vm._l(_vm.presentTags, function(tag) {\n                return _c(\n                  \"el-tag\",\n                  {\n                    key: tag.key,\n                    attrs: {\n                      type: \"info\",\n                      size: _vm.tagSize,\n                      hit: tag.hitState,\n                      closable: tag.closable,\n                      \"disable-transitions\": \"\"\n                    },\n                    on: {\n                      close: function($event) {\n                        _vm.deleteTag(tag)\n                      }\n                    }\n                  },\n                  [_c(\"span\", [_vm._v(_vm._s(tag.text))])]\n                )\n              }),\n              _vm.filterable && !_vm.isDisabled\n                ? _c(\"input\", {\n                    directives: [\n                      {\n                        name: \"model\",\n                        rawName: \"v-model.trim\",\n                        value: _vm.inputValue,\n                        expression: \"inputValue\",\n                        modifiers: { trim: true }\n                      }\n                    ],\n                    staticClass: \"el-cascader__search-input\",\n                    attrs: {\n                      type: \"text\",\n                      placeholder: _vm.presentTags.length ? \"\" : _vm.placeholder\n                    },\n                    domProps: { value: _vm.inputValue },\n                    on: {\n                      input: [\n                        function($event) {\n                          if ($event.target.composing) {\n                            return\n                          }\n                          _vm.inputValue = $event.target.value.trim()\n                        },\n                        function(e) {\n                          return _vm.handleInput(_vm.inputValue, e)\n                        }\n                      ],\n                      click: function($event) {\n                        $event.stopPropagation()\n                        _vm.toggleDropDownVisible(true)\n                      },\n                      keydown: function($event) {\n                        if (\n                          !(\"button\" in $event) &&\n                          _vm._k(\n                            $event.keyCode,\n                            \"delete\",\n                            [8, 46],\n                            $event.key,\n                            [\"Backspace\", \"Delete\", \"Del\"]\n                          )\n                        ) {\n                          return null\n                        }\n                        return _vm.handleDelete($event)\n                      },\n                      blur: function($event) {\n                        _vm.$forceUpdate()\n                      }\n                    }\n                  })\n                : _vm._e()\n            ],\n            2\n          )\n        : _vm._e(),\n      _c(\n        \"transition\",\n        {\n          attrs: { name: \"el-zoom-in-top\" },\n          on: { \"after-leave\": _vm.handleDropdownLeave }\n        },\n        [\n          _c(\n            \"div\",\n            {\n              directives: [\n                {\n                  name: \"show\",\n                  rawName: \"v-show\",\n                  value: _vm.dropDownVisible,\n                  expression: \"dropDownVisible\"\n                }\n              ],\n              ref: \"popper\",\n              class: [\"el-popper\", \"el-cascader__dropdown\", _vm.popperClass]\n            },\n            [\n              _c(\"el-cascader-panel\", {\n                directives: [\n                  {\n                    name: \"show\",\n                    rawName: \"v-show\",\n                    value: !_vm.filtering,\n                    expression: \"!filtering\"\n                  }\n                ],\n                ref: \"panel\",\n                attrs: {\n                  options: _vm.options,\n                  props: _vm.config,\n                  border: false,\n                  \"render-label\": _vm.$scopedSlots.default\n                },\n                on: {\n                  \"expand-change\": _vm.handleExpandChange,\n                  close: function($event) {\n                    _vm.toggleDropDownVisible(false)\n                  }\n                },\n                model: {\n                  value: _vm.checkedValue,\n                  callback: function($$v) {\n                    _vm.checkedValue = $$v\n                  },\n                  expression: \"checkedValue\"\n                }\n              }),\n              _vm.filterable\n                ? _c(\n                    \"el-scrollbar\",\n                    {\n                      directives: [\n                        {\n                          name: \"show\",\n                          rawName: \"v-show\",\n                          value: _vm.filtering,\n                          expression: \"filtering\"\n                        }\n                      ],\n                      ref: \"suggestionPanel\",\n                      staticClass: \"el-cascader__suggestion-panel\",\n                      attrs: {\n                        tag: \"ul\",\n                        \"view-class\": \"el-cascader__suggestion-list\"\n                      },\n                      nativeOn: {\n                        keydown: function($event) {\n                          return _vm.handleSuggestionKeyDown($event)\n                        }\n                      }\n                    },\n                    [\n                      _vm.suggestions.length\n                        ? _vm._l(_vm.suggestions, function(item, index) {\n                            return _c(\n                              \"li\",\n                              {\n                                key: item.uid,\n                                class: [\n                                  \"el-cascader__suggestion-item\",\n                                  item.checked && \"is-checked\"\n                                ],\n                                attrs: { tabindex: -1 },\n                                on: {\n                                  click: function($event) {\n                                    _vm.handleSuggestionClick(index)\n                                  }\n                                }\n                              },\n                              [\n                                _c(\"span\", [_vm._v(_vm._s(item.text))]),\n                                item.checked\n                                  ? _c(\"i\", { staticClass: \"el-icon-check\" })\n                                  : _vm._e()\n                              ]\n                            )\n                          })\n                        : _vm._t(\"empty\", [\n                            _c(\n                              \"li\",\n                              { staticClass: \"el-cascader__empty-text\" },\n                              [_vm._v(_vm._s(_vm.t(\"el.cascader.noMatch\")))]\n                            )\n                          ])\n                    ],\n                    2\n                  )\n                : _vm._e()\n            ],\n            1\n          )\n        ]\n      )\n    ],\n    1\n  )\n}\nvar cascadervue_type_template_id_032537a6_staticRenderFns = []\ncascadervue_type_template_id_032537a6_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/cascader/src/cascader.vue?vue&type=template&id=032537a6&\n\n// EXTERNAL MODULE: external \"element-ui/lib/cascader-panel\"\nvar cascader_panel_ = __webpack_require__(42);\nvar cascader_panel_default = /*#__PURE__*/__webpack_require__.n(cascader_panel_);\n\n// EXTERNAL MODULE: external \"element-ui/lib/utils/aria-utils\"\nvar aria_utils_ = __webpack_require__(34);\nvar aria_utils_default = /*#__PURE__*/__webpack_require__.n(aria_utils_);\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/cascader/src/cascader.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar KeyCode = aria_utils_default.a.keys;\n\nvar MigratingProps = {\n  expandTrigger: {\n    newProp: 'expandTrigger',\n    type: String\n  },\n  changeOnSelect: {\n    newProp: 'checkStrictly',\n    type: Boolean\n  },\n  hoverThreshold: {\n    newProp: 'hoverThreshold',\n    type: Number\n  }\n};\n\nvar PopperMixin = {\n  props: {\n    placement: {\n      type: String,\n      default: 'bottom-start'\n    },\n    appendToBody: vue_popper_default.a.props.appendToBody,\n    visibleArrow: {\n      type: Boolean,\n      default: true\n    },\n    arrowOffset: vue_popper_default.a.props.arrowOffset,\n    offset: vue_popper_default.a.props.offset,\n    boundariesPadding: vue_popper_default.a.props.boundariesPadding,\n    popperOptions: vue_popper_default.a.props.popperOptions\n  },\n  methods: vue_popper_default.a.methods,\n  data: vue_popper_default.a.data,\n  beforeDestroy: vue_popper_default.a.beforeDestroy\n};\n\nvar InputSizeMap = {\n  medium: 36,\n  small: 32,\n  mini: 28\n};\n\n/* harmony default export */ var cascadervue_type_script_lang_js_ = ({\n  name: 'ElCascader',\n\n  directives: { Clickoutside: clickoutside_default.a },\n\n  mixins: [PopperMixin, emitter_default.a, locale_default.a, migrating_default.a],\n\n  inject: {\n    elForm: {\n      default: ''\n    },\n    elFormItem: {\n      default: ''\n    }\n  },\n\n  components: {\n    ElInput: input_default.a,\n    ElTag: tag_default.a,\n    ElScrollbar: scrollbar_default.a,\n    ElCascaderPanel: cascader_panel_default.a\n  },\n\n  props: {\n    value: {},\n    options: Array,\n    props: Object,\n    size: String,\n    placeholder: {\n      type: String,\n      default: function _default() {\n        return Object(lib_locale_[\"t\"])('el.cascader.placeholder');\n      }\n    },\n    disabled: Boolean,\n    clearable: Boolean,\n    filterable: Boolean,\n    filterMethod: Function,\n    separator: {\n      type: String,\n      default: ' / '\n    },\n    showAllLevels: {\n      type: Boolean,\n      default: true\n    },\n    collapseTags: Boolean,\n    debounce: {\n      type: Number,\n      default: 300\n    },\n    beforeFilter: {\n      type: Function,\n      default: function _default() {\n        return function () {};\n      }\n    },\n    popperClass: String\n  },\n\n  data: function data() {\n    return {\n      dropDownVisible: false,\n      checkedValue: this.value,\n      inputHover: false,\n      inputValue: null,\n      presentText: null,\n      presentTags: [],\n      checkedNodes: [],\n      filtering: false,\n      suggestions: [],\n      inputInitialHeight: 0,\n      pressDeleteCount: 0\n    };\n  },\n\n\n  computed: {\n    realSize: function realSize() {\n      var _elFormItemSize = (this.elFormItem || {}).elFormItemSize;\n      return this.size || _elFormItemSize || (this.$ELEMENT || {}).size;\n    },\n    tagSize: function tagSize() {\n      return ['small', 'mini'].indexOf(this.realSize) > -1 ? 'mini' : 'small';\n    },\n    isDisabled: function isDisabled() {\n      return this.disabled || (this.elForm || {}).disabled;\n    },\n    config: function config() {\n      var config = this.props || {};\n      var $attrs = this.$attrs;\n\n\n      Object.keys(MigratingProps).forEach(function (oldProp) {\n        var _MigratingProps$oldPr = MigratingProps[oldProp],\n            newProp = _MigratingProps$oldPr.newProp,\n            type = _MigratingProps$oldPr.type;\n\n        var oldValue = $attrs[oldProp] || $attrs[Object(util_[\"kebabCase\"])(oldProp)];\n        if (Object(shared_[\"isDef\"])(oldProp) && !Object(shared_[\"isDef\"])(config[newProp])) {\n          if (type === Boolean && oldValue === '') {\n            oldValue = true;\n          }\n          config[newProp] = oldValue;\n        }\n      });\n\n      return config;\n    },\n    multiple: function multiple() {\n      return this.config.multiple;\n    },\n    leafOnly: function leafOnly() {\n      return !this.config.checkStrictly;\n    },\n    readonly: function readonly() {\n      return !this.filterable || this.multiple;\n    },\n    clearBtnVisible: function clearBtnVisible() {\n      if (!this.clearable || this.isDisabled || this.filtering || !this.inputHover) {\n        return false;\n      }\n\n      return this.multiple ? !!this.checkedNodes.filter(function (node) {\n        return !node.isDisabled;\n      }).length : !!this.presentText;\n    },\n    panel: function panel() {\n      return this.$refs.panel;\n    }\n  },\n\n  watch: {\n    disabled: function disabled() {\n      this.computePresentContent();\n    },\n    value: function value(val) {\n      if (!Object(util_[\"isEqual\"])(val, this.checkedValue)) {\n        this.checkedValue = val;\n        this.computePresentContent();\n      }\n    },\n    checkedValue: function checkedValue(val) {\n      var value = this.value,\n          dropDownVisible = this.dropDownVisible;\n      var _config = this.config,\n          checkStrictly = _config.checkStrictly,\n          multiple = _config.multiple;\n\n\n      if (!Object(util_[\"isEqual\"])(val, value) || Object(types_[\"isUndefined\"])(value)) {\n        this.computePresentContent();\n        // hide dropdown when single mode\n        if (!multiple && !checkStrictly && dropDownVisible) {\n          this.toggleDropDownVisible(false);\n        }\n\n        this.$emit('input', val);\n        this.$emit('change', val);\n        this.dispatch('ElFormItem', 'el.form.change', [val]);\n      }\n    },\n\n    options: {\n      handler: function handler() {\n        this.$nextTick(this.computePresentContent);\n      },\n      deep: true\n    },\n    presentText: function presentText(val) {\n      this.inputValue = val;\n    },\n    presentTags: function presentTags(val, oldVal) {\n      if (this.multiple && (val.length || oldVal.length)) {\n        this.$nextTick(this.updateStyle);\n      }\n    },\n    filtering: function filtering(val) {\n      this.$nextTick(this.updatePopper);\n    }\n  },\n\n  mounted: function mounted() {\n    var _this = this;\n\n    var input = this.$refs.input;\n\n    if (input && input.$el) {\n      this.inputInitialHeight = input.$el.offsetHeight || InputSizeMap[this.realSize] || 40;\n    }\n\n    if (!this.isEmptyValue(this.value)) {\n      this.computePresentContent();\n    }\n\n    this.filterHandler = debounce_default()(this.debounce, function () {\n      var inputValue = _this.inputValue;\n\n\n      if (!inputValue) {\n        _this.filtering = false;\n        return;\n      }\n\n      var before = _this.beforeFilter(inputValue);\n      if (before && before.then) {\n        before.then(_this.getSuggestions);\n      } else if (before !== false) {\n        _this.getSuggestions();\n      } else {\n        _this.filtering = false;\n      }\n    });\n\n    Object(resize_event_[\"addResizeListener\"])(this.$el, this.updateStyle);\n  },\n  beforeDestroy: function beforeDestroy() {\n    Object(resize_event_[\"removeResizeListener\"])(this.$el, this.updateStyle);\n  },\n\n\n  methods: {\n    getMigratingConfig: function getMigratingConfig() {\n      return {\n        props: {\n          'expand-trigger': 'expand-trigger is removed, use `props.expandTrigger` instead.',\n          'change-on-select': 'change-on-select is removed, use `props.checkStrictly` instead.',\n          'hover-threshold': 'hover-threshold is removed, use `props.hoverThreshold` instead'\n        },\n        events: {\n          'active-item-change': 'active-item-change is renamed to expand-change'\n        }\n      };\n    },\n    toggleDropDownVisible: function toggleDropDownVisible(visible) {\n      var _this2 = this;\n\n      if (this.isDisabled) return;\n\n      var dropDownVisible = this.dropDownVisible;\n      var input = this.$refs.input;\n\n      visible = Object(shared_[\"isDef\"])(visible) ? visible : !dropDownVisible;\n      if (visible !== dropDownVisible) {\n        this.dropDownVisible = visible;\n        if (visible) {\n          this.$nextTick(function () {\n            _this2.updatePopper();\n            _this2.panel.scrollIntoView();\n          });\n        }\n        input.$refs.input.setAttribute('aria-expanded', visible);\n        this.$emit('visible-change', visible);\n      }\n    },\n    handleDropdownLeave: function handleDropdownLeave() {\n      this.filtering = false;\n      this.inputValue = this.presentText;\n      this.doDestroy();\n    },\n    handleKeyDown: function handleKeyDown(event) {\n      switch (event.keyCode) {\n        case KeyCode.enter:\n          this.toggleDropDownVisible();\n          break;\n        case KeyCode.down:\n          this.toggleDropDownVisible(true);\n          this.focusFirstNode();\n          event.preventDefault();\n          break;\n        case KeyCode.esc:\n        case KeyCode.tab:\n          this.toggleDropDownVisible(false);\n          break;\n      }\n    },\n    handleFocus: function handleFocus(e) {\n      this.$emit('focus', e);\n    },\n    handleBlur: function handleBlur(e) {\n      this.$emit('blur', e);\n    },\n    handleInput: function handleInput(val, event) {\n      !this.dropDownVisible && this.toggleDropDownVisible(true);\n\n      if (event && event.isComposing) return;\n      if (val) {\n        this.filterHandler();\n      } else {\n        this.filtering = false;\n      }\n    },\n    handleClear: function handleClear() {\n      this.presentText = '';\n      this.panel.clearCheckedNodes();\n    },\n    handleExpandChange: function handleExpandChange(value) {\n      this.$nextTick(this.updatePopper.bind(this));\n      this.$emit('expand-change', value);\n      this.$emit('active-item-change', value); // Deprecated\n    },\n    focusFirstNode: function focusFirstNode() {\n      var _this3 = this;\n\n      this.$nextTick(function () {\n        var filtering = _this3.filtering;\n        var _$refs = _this3.$refs,\n            popper = _$refs.popper,\n            suggestionPanel = _$refs.suggestionPanel;\n\n        var firstNode = null;\n\n        if (filtering && suggestionPanel) {\n          firstNode = suggestionPanel.$el.querySelector('.el-cascader__suggestion-item');\n        } else {\n          var firstMenu = popper.querySelector('.el-cascader-menu');\n          firstNode = firstMenu.querySelector('.el-cascader-node[tabindex=\"-1\"]');\n        }\n\n        if (firstNode) {\n          firstNode.focus();\n          !filtering && firstNode.click();\n        }\n      });\n    },\n    computePresentContent: function computePresentContent() {\n      var _this4 = this;\n\n      // nextTick is required, because checked nodes may not change right now\n      this.$nextTick(function () {\n        if (_this4.config.multiple) {\n          _this4.computePresentTags();\n          _this4.presentText = _this4.presentTags.length ? ' ' : null;\n        } else {\n          _this4.computePresentText();\n        }\n      });\n    },\n    isEmptyValue: function isEmptyValue(val) {\n      var multiple = this.multiple;\n      var emitPath = this.panel.config.emitPath;\n\n      if (multiple || emitPath) {\n        return Object(util_[\"isEmpty\"])(val);\n      }\n      return false;\n    },\n    computePresentText: function computePresentText() {\n      var checkedValue = this.checkedValue,\n          config = this.config;\n\n      if (!this.isEmptyValue(checkedValue)) {\n        var node = this.panel.getNodeByValue(checkedValue);\n        if (node && (config.checkStrictly || node.isLeaf)) {\n          this.presentText = node.getText(this.showAllLevels, this.separator);\n          return;\n        }\n      }\n      this.presentText = null;\n    },\n    computePresentTags: function computePresentTags() {\n      var isDisabled = this.isDisabled,\n          leafOnly = this.leafOnly,\n          showAllLevels = this.showAllLevels,\n          separator = this.separator,\n          collapseTags = this.collapseTags;\n\n      var checkedNodes = this.getCheckedNodes(leafOnly);\n      var tags = [];\n\n      var genTag = function genTag(node) {\n        return {\n          node: node,\n          key: node.uid,\n          text: node.getText(showAllLevels, separator),\n          hitState: false,\n          closable: !isDisabled && !node.isDisabled\n        };\n      };\n\n      if (checkedNodes.length) {\n        var first = checkedNodes[0],\n            rest = checkedNodes.slice(1);\n\n        var restCount = rest.length;\n        tags.push(genTag(first));\n\n        if (restCount) {\n          if (collapseTags) {\n            tags.push({\n              key: -1,\n              text: '+ ' + restCount,\n              closable: false\n            });\n          } else {\n            rest.forEach(function (node) {\n              return tags.push(genTag(node));\n            });\n          }\n        }\n      }\n\n      this.checkedNodes = checkedNodes;\n      this.presentTags = tags;\n    },\n    getSuggestions: function getSuggestions() {\n      var _this5 = this;\n\n      var filterMethod = this.filterMethod;\n\n\n      if (!Object(types_[\"isFunction\"])(filterMethod)) {\n        filterMethod = function filterMethod(node, keyword) {\n          return node.text.includes(keyword);\n        };\n      }\n\n      var suggestions = this.panel.getFlattedNodes(this.leafOnly).filter(function (node) {\n        if (node.isDisabled) return false;\n        node.text = node.getText(_this5.showAllLevels, _this5.separator) || '';\n        return filterMethod(node, _this5.inputValue);\n      });\n\n      if (this.multiple) {\n        this.presentTags.forEach(function (tag) {\n          tag.hitState = false;\n        });\n      } else {\n        suggestions.forEach(function (node) {\n          node.checked = Object(util_[\"isEqual\"])(_this5.checkedValue, node.getValueByOption());\n        });\n      }\n\n      this.filtering = true;\n      this.suggestions = suggestions;\n      this.$nextTick(this.updatePopper);\n    },\n    handleSuggestionKeyDown: function handleSuggestionKeyDown(event) {\n      var keyCode = event.keyCode,\n          target = event.target;\n\n      switch (keyCode) {\n        case KeyCode.enter:\n          target.click();\n          break;\n        case KeyCode.up:\n          var prev = target.previousElementSibling;\n          prev && prev.focus();\n          break;\n        case KeyCode.down:\n          var next = target.nextElementSibling;\n          next && next.focus();\n          break;\n        case KeyCode.esc:\n        case KeyCode.tab:\n          this.toggleDropDownVisible(false);\n          break;\n      }\n    },\n    handleDelete: function handleDelete() {\n      var inputValue = this.inputValue,\n          pressDeleteCount = this.pressDeleteCount,\n          presentTags = this.presentTags;\n\n      var lastIndex = presentTags.length - 1;\n      var lastTag = presentTags[lastIndex];\n      this.pressDeleteCount = inputValue ? 0 : pressDeleteCount + 1;\n\n      if (!lastTag) return;\n\n      if (this.pressDeleteCount) {\n        if (lastTag.hitState) {\n          this.deleteTag(lastTag);\n        } else {\n          lastTag.hitState = true;\n        }\n      }\n    },\n    handleSuggestionClick: function handleSuggestionClick(index) {\n      var multiple = this.multiple;\n\n      var targetNode = this.suggestions[index];\n\n      if (multiple) {\n        var checked = targetNode.checked;\n\n        targetNode.doCheck(!checked);\n        this.panel.calculateMultiCheckedValue();\n      } else {\n        this.checkedValue = targetNode.getValueByOption();\n        this.toggleDropDownVisible(false);\n      }\n    },\n    deleteTag: function deleteTag(tag) {\n      var checkedValue = this.checkedValue;\n\n      var current = tag.node.getValueByOption();\n      var val = checkedValue.find(function (n) {\n        return Object(util_[\"isEqual\"])(n, current);\n      });\n      this.checkedValue = checkedValue.filter(function (n) {\n        return !Object(util_[\"isEqual\"])(n, current);\n      });\n      this.$emit('remove-tag', val);\n    },\n    updateStyle: function updateStyle() {\n      var $el = this.$el,\n          inputInitialHeight = this.inputInitialHeight;\n\n      if (this.$isServer || !$el) return;\n\n      var suggestionPanel = this.$refs.suggestionPanel;\n\n      var inputInner = $el.querySelector('.el-input__inner');\n\n      if (!inputInner) return;\n\n      var tags = $el.querySelector('.el-cascader__tags');\n      var suggestionPanelEl = null;\n\n      if (suggestionPanel && (suggestionPanelEl = suggestionPanel.$el)) {\n        var suggestionList = suggestionPanelEl.querySelector('.el-cascader__suggestion-list');\n        suggestionList.style.minWidth = inputInner.offsetWidth + 'px';\n      }\n\n      if (tags) {\n        var offsetHeight = Math.round(tags.getBoundingClientRect().height);\n        var height = Math.max(offsetHeight + 6, inputInitialHeight) + 'px';\n        inputInner.style.height = height;\n        if (this.dropDownVisible) {\n          this.updatePopper();\n        }\n      }\n    },\n\n\n    /**\n     * public methods\n    */\n    getCheckedNodes: function getCheckedNodes(leafOnly) {\n      return this.panel.getCheckedNodes(leafOnly);\n    }\n  }\n});\n// CONCATENATED MODULE: ./packages/cascader/src/cascader.vue?vue&type=script&lang=js&\n /* harmony default export */ var src_cascadervue_type_script_lang_js_ = (cascadervue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/cascader/src/cascader.vue\n\n\n\n\n\n/* normalize component */\n\nvar cascader_component = normalizeComponent(\n  src_cascadervue_type_script_lang_js_,\n  cascadervue_type_template_id_032537a6_render,\n  cascadervue_type_template_id_032537a6_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var cascader_api; }\ncascader_component.options.__file = \"packages/cascader/src/cascader.vue\"\n/* harmony default export */ var cascader = (cascader_component.exports);\n// CONCATENATED MODULE: ./packages/cascader/index.js\n\n\n/* istanbul ignore next */\ncascader.install = function (Vue) {\n  Vue.component(cascader.name, cascader);\n};\n\n/* harmony default export */ var packages_cascader = (cascader);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/color-picker/src/main.vue?vue&type=template&id=55c8ade7&\nvar mainvue_type_template_id_55c8ade7_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    {\n      directives: [\n        {\n          name: \"clickoutside\",\n          rawName: \"v-clickoutside\",\n          value: _vm.hide,\n          expression: \"hide\"\n        }\n      ],\n      class: [\n        \"el-color-picker\",\n        _vm.colorDisabled ? \"is-disabled\" : \"\",\n        _vm.colorSize ? \"el-color-picker--\" + _vm.colorSize : \"\"\n      ]\n    },\n    [\n      _vm.colorDisabled\n        ? _c(\"div\", { staticClass: \"el-color-picker__mask\" })\n        : _vm._e(),\n      _c(\n        \"div\",\n        {\n          staticClass: \"el-color-picker__trigger\",\n          on: { click: _vm.handleTrigger }\n        },\n        [\n          _c(\n            \"span\",\n            {\n              staticClass: \"el-color-picker__color\",\n              class: { \"is-alpha\": _vm.showAlpha }\n            },\n            [\n              _c(\"span\", {\n                staticClass: \"el-color-picker__color-inner\",\n                style: {\n                  backgroundColor: _vm.displayedColor\n                }\n              }),\n              !_vm.value && !_vm.showPanelColor\n                ? _c(\"span\", {\n                    staticClass: \"el-color-picker__empty el-icon-close\"\n                  })\n                : _vm._e()\n            ]\n          ),\n          _c(\"span\", {\n            directives: [\n              {\n                name: \"show\",\n                rawName: \"v-show\",\n                value: _vm.value || _vm.showPanelColor,\n                expression: \"value || showPanelColor\"\n              }\n            ],\n            staticClass: \"el-color-picker__icon el-icon-arrow-down\"\n          })\n        ]\n      ),\n      _c(\"picker-dropdown\", {\n        ref: \"dropdown\",\n        class: [\"el-color-picker__panel\", _vm.popperClass || \"\"],\n        attrs: {\n          color: _vm.color,\n          \"show-alpha\": _vm.showAlpha,\n          predefine: _vm.predefine\n        },\n        on: { pick: _vm.confirmValue, clear: _vm.clearValue },\n        model: {\n          value: _vm.showPicker,\n          callback: function($$v) {\n            _vm.showPicker = $$v\n          },\n          expression: \"showPicker\"\n        }\n      })\n    ],\n    1\n  )\n}\nvar mainvue_type_template_id_55c8ade7_staticRenderFns = []\nmainvue_type_template_id_55c8ade7_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/color-picker/src/main.vue?vue&type=template&id=55c8ade7&\n\n// CONCATENATED MODULE: ./packages/color-picker/src/color.js\nvar color_typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nfunction color_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar hsv2hsl = function hsv2hsl(hue, sat, val) {\n  return [hue, sat * val / ((hue = (2 - sat) * val) < 1 ? hue : 2 - hue) || 0, hue / 2];\n};\n\n// Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1\n// <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>\nvar isOnePointZero = function isOnePointZero(n) {\n  return typeof n === 'string' && n.indexOf('.') !== -1 && parseFloat(n) === 1;\n};\n\nvar isPercentage = function isPercentage(n) {\n  return typeof n === 'string' && n.indexOf('%') !== -1;\n};\n\n// Take input from [0, n] and return it as [0, 1]\nvar bound01 = function bound01(value, max) {\n  if (isOnePointZero(value)) value = '100%';\n\n  var processPercent = isPercentage(value);\n  value = Math.min(max, Math.max(0, parseFloat(value)));\n\n  // Automatically convert percentage into number\n  if (processPercent) {\n    value = parseInt(value * max, 10) / 100;\n  }\n\n  // Handle floating point rounding errors\n  if (Math.abs(value - max) < 0.000001) {\n    return 1;\n  }\n\n  // Convert into [0, 1] range if it isn't already\n  return value % max / parseFloat(max);\n};\n\nvar INT_HEX_MAP = { 10: 'A', 11: 'B', 12: 'C', 13: 'D', 14: 'E', 15: 'F' };\n