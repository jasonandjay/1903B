ype: Array,\n      required: true\n    },\n    index: Number\n  },\n\n  data: function data() {\n    return {\n      activeNode: null,\n      hoverTimer: null,\n      id: Object(util_[\"generateId\"])()\n    };\n  },\n\n\n  computed: {\n    isEmpty: function isEmpty() {\n      return !this.nodes.length;\n    },\n    menuId: function menuId() {\n      return 'cascader-menu-' + this.id + '-' + this.index;\n    }\n  },\n\n  methods: {\n    handleExpand: function handleExpand(e) {\n      this.activeNode = e.target;\n    },\n    handleMouseMove: function handleMouseMove(e) {\n      var activeNode = this.activeNode,\n          hoverTimer = this.hoverTimer;\n      var hoverZone = this.$refs.hoverZone;\n\n\n      if (!activeNode || !hoverZone) return;\n\n      if (activeNode.contains(e.target)) {\n        clearTimeout(hoverTimer);\n\n        var _$el$getBoundingClien = this.$el.getBoundingClientRect(),\n            left = _$el$getBoundingClien.left;\n\n        var startX = e.clientX - left;\n        var _$el = this.$el,\n            offsetWidth = _$el.offsetWidth,\n            offsetHeight = _$el.offsetHeight;\n\n        var top = activeNode.offsetTop;\n        var bottom = top + activeNode.offsetHeight;\n\n        hoverZone.innerHTML = '\\n          <path style=\"pointer-events: auto;\" fill=\"transparent\" d=\"M' + startX + ' ' + top + ' L' + offsetWidth + ' 0 V' + top + ' Z\" />\\n          <path style=\"pointer-events: auto;\" fill=\"transparent\" d=\"M' + startX + ' ' + bottom + ' L' + offsetWidth + ' ' + offsetHeight + ' V' + bottom + ' Z\" />\\n        ';\n      } else if (!hoverTimer) {\n        this.hoverTimer = setTimeout(this.clearHoverZone, this.panel.config.hoverThreshold);\n      }\n    },\n    clearHoverZone: function clearHoverZone() {\n      var hoverZone = this.$refs.hoverZone;\n\n      if (!hoverZone) return;\n      hoverZone.innerHTML = '';\n    },\n    renderEmptyText: function renderEmptyText(h) {\n      return h(\n        'div',\n        { 'class': 'el-cascader-menu__empty-text' },\n        [this.t('el.cascader.noData')]\n      );\n    },\n    renderNodeList: function renderNodeList(h) {\n      var menuId = this.menuId;\n      var isHoverMenu = this.panel.isHoverMenu;\n\n      var events = { on: {} };\n\n      if (isHoverMenu) {\n        events.on.expand = this.handleExpand;\n      }\n\n      var nodes = this.nodes.map(function (node, index) {\n        var hasChildren = node.hasChildren;\n\n        return h('cascader-node', external_babel_helper_vue_jsx_merge_props_default()([{\n          key: node.uid,\n          attrs: { node: node,\n            'node-id': menuId + '-' + index,\n            'aria-haspopup': hasChildren,\n            'aria-owns': hasChildren ? menuId : null\n          }\n        }, events]));\n      });\n\n      return [].concat(nodes, [isHoverMenu ? h('svg', { ref: 'hoverZone', 'class': 'el-cascader-menu__hover-zone' }) : null]);\n    }\n  },\n\n  render: function render(h) {\n    var isEmpty = this.isEmpty,\n        menuId = this.menuId;\n\n    var events = { nativeOn: {} };\n\n    // optimize hover to expand experience (#8010)\n    if (this.panel.isHoverMenu) {\n      events.nativeOn.mousemove = this.handleMouseMove;\n      // events.nativeOn.mouseleave = this.clearHoverZone;\n    }\n\n    return h(\n      'el-scrollbar',\n      external_babel_helper_vue_jsx_merge_props_default()([{\n        attrs: {\n          tag: 'ul',\n          role: 'menu',\n          id: menuId,\n\n          'wrap-class': 'el-cascader-menu__wrap',\n          'view-class': {\n            'el-cascader-menu__list': true,\n            'is-empty': isEmpty\n          }\n        },\n        'class': 'el-cascader-menu' }, events]),\n      [isEmpty ? this.renderEmptyText(h) : this.renderNodeList(h)]\n    );\n  }\n});\n// CONCATENATED MODULE: ./packages/cascader-panel/src/cascader-menu.vue?vue&type=script&lang=js&\n /* harmony default export */ var src_cascader_menuvue_type_script_lang_js_ = (cascader_menuvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/cascader-panel/src/cascader-menu.vue\nvar cascader_menu_render, cascader_menu_staticRenderFns\n\n\n\n\n/* normalize component */\n\nvar cascader_menu_component = normalizeComponent(\n  src_cascader_menuvue_type_script_lang_js_,\n  cascader_menu_render,\n  cascader_menu_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var cascader_menu_api; }\ncascader_menu_component.options.__file = \"packages/cascader-panel/src/cascader-menu.vue\"\n/* harmony default export */ var cascader_menu = (cascader_menu_component.exports);\n// CONCATENATED MODULE: ./packages/cascader-panel/src/node.js\nvar node_createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction src_node_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\n\n\nvar uid = 0;\n\nvar src_node_Node = function () {\n  function Node(data, config, parentNode) {\n    src_node_classCallCheck(this, Node);\n\n    this.data = data;\n    this.config = config;\n    this.parent = parentNode || null;\n    this.level = !this.parent ? 1 : this.parent.level + 1;\n    this.uid = uid++;\n\n    this.initState();\n    this.initChildren();\n  }\n\n  Node.prototype.initState = function initState() {\n    var _config = this.config,\n        valueKey = _config.value,\n        labelKey = _config.label;\n\n\n    this.value = this.data[valueKey];\n    this.label = this.data[labelKey];\n    this.pathNodes = this.calculatePathNodes();\n    this.path = this.pathNodes.map(function (node) {\n      return node.value;\n    });\n    this.pathLabels = this.pathNodes.map(function (node) {\n      return node.label;\n    });\n\n    // lazy load\n    this.loading = false;\n    this.loaded = false;\n  };\n\n  Node.prototype.initChildren = function initChildren() {\n    var _this = this;\n\n    var config = this.config;\n\n    var childrenKey = config.children;\n    var childrenData = this.data[childrenKey];\n    this.hasChildren = Array.isArray(childrenData);\n    this.children = (childrenData || []).map(function (child) {\n      return new Node(child, config, _this);\n    });\n  };\n\n  Node.prototype.calculatePathNodes = function calculatePathNodes() {\n    var nodes = [this];\n    var parent = this.parent;\n\n    while (parent) {\n      nodes.unshift(parent);\n      parent = parent.parent;\n    }\n\n    return nodes;\n  };\n\n  Node.prototype.getPath = function getPath() {\n    return this.path;\n  };\n\n  Node.prototype.getValue = function getValue() {\n    return this.value;\n  };\n\n  Node.prototype.getValueByOption = function getValueByOption() {\n    return this.config.emitPath ? this.getPath() : this.getValue();\n  };\n\n  Node.prototype.getText = function getText(allLevels, separator) {\n    return allLevels ? this.pathLabels.join(separator) : this.label;\n  };\n\n  Node.prototype.isSameNode = function isSameNode(checkedValue) {\n    var value = this.getValueByOption();\n    return this.config.multiple && Array.isArray(checkedValue) ? checkedValue.some(function (val) {\n      return Object(util_[\"isEqual\"])(val, value);\n    }) : Object(util_[\"isEqual\"])(checkedValue, value);\n  };\n\n  Node.prototype.broadcast = function broadcast(event) {\n    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    var handlerName = 'onParent' + Object(util_[\"capitalize\"])(event);\n\n    this.children.forEach(function (child) {\n      if (child) {\n        // bottom up\n        child.broadcast.apply(child, [event].concat(args));\n        child[handlerName] && child[handlerName].apply(child, args);\n      }\n    });\n  };\n\n  Node.prototype.emit = function emit(event) {\n    var parent = this.parent;\n\n    var handlerName = 'onChild' + Object(util_[\"capitalize\"])(event);\n    if (parent) {\n      for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      parent[handlerName] && parent[handlerName].apply(parent, args);\n      parent.emit.apply(parent, [event].concat(args));\n    }\n  };\n\n  Node.prototype.onParentCheck = function onParentCheck(checked) {\n    if (!this.isDisabled) {\n      this.setCheckState(checked);\n    }\n  };\n\n  Node.prototype.onChildCheck = function onChildCheck() {\n    var children = this.children;\n\n    var validChildren = children.filter(function (child) {\n      return !child.isDisabled;\n    });\n    var checked = validChildren.length ? validChildren.every(function (child) {\n      return child.checked;\n    }) : false;\n\n    this.setCheckState(checked);\n  };\n\n  Node.prototype.setCheckState = function setCheckState(checked) {\n    var totalNum = this.children.length;\n    var checkedNum = this.children.reduce(function (c, p) {\n      var num = p.checked ? 1 : p.indeterminate ? 0.5 : 0;\n      return c + num;\n    }, 0);\n\n    this.checked = checked;\n    this.indeterminate = checkedNum !== totalNum && checkedNum > 0;\n  };\n\n  Node.prototype.syncCheckState = function syncCheckState(checkedValue) {\n    var value = this.getValueByOption();\n    var checked = this.isSameNode(checkedValue, value);\n\n    this.doCheck(checked);\n  };\n\n  Node.prototype.doCheck = function doCheck(checked) {\n    if (this.checked !== checked) {\n      if (this.config.checkStrictly) {\n        this.checked = checked;\n      } else {\n        // bottom up to unify the calculation of the indeterminate state\n        this.broadcast('check', checked);\n        this.setCheckState(checked);\n        this.emit('check');\n      }\n    }\n  };\n\n  node_createClass(Node, [{\n    key: 'isDisabled',\n    get: function get() {\n      var data = this.data,\n          parent = this.parent,\n          config = this.config;\n\n      var disabledKey = config.disabled;\n      var checkStrictly = config.checkStrictly;\n\n      return data[disabledKey] || !checkStrictly && parent && parent.isDisabled;\n    }\n  }, {\n    key: 'isLeaf',\n    get: function get() {\n      var data = this.data,\n          loaded = this.loaded,\n          hasChildren = this.hasChildren,\n          children = this.children;\n      var _config2 = this.config,\n          lazy = _config2.lazy,\n          leafKey = _config2.leaf;\n\n      if (lazy) {\n        var isLeaf = Object(shared_[\"isDef\"])(data[leafKey]) ? data[leafKey] : loaded ? !children.length : false;\n        this.hasChildren = !isLeaf;\n        return isLeaf;\n      }\n      return !hasChildren;\n    }\n  }]);\n\n  return Node;\n}();\n\n/* harmony default export */ var src_node = (src_node_Node);\n// CONCATENATED MODULE: ./packages/cascader-panel/src/store.js\nfunction store_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\n\n\nvar flatNodes = function flatNodes(data, leafOnly) {\n  return data.reduce(function (res, node) {\n    if (node.isLeaf) {\n      res.push(node);\n    } else {\n      !leafOnly && res.push(node);\n      res = res.concat(flatNodes(node.children, leafOnly));\n    }\n    return res;\n  }, []);\n};\n\nvar store_Store = function () {\n  function Store(data, config) {\n    store_classCallCheck(this, Store);\n\n    this.config = config;\n    this.initNodes(data);\n  }\n\n  Store.prototype.initNodes = function initNodes(data) {\n    var _this = this;\n\n    data = Object(util_[\"coerceTruthyValueToArray\"])(data);\n    this.nodes = data.map(function (nodeData) {\n      return new src_node(nodeData, _this.config);\n    });\n    this.flattedNodes = this.getFlattedNodes(false, false);\n    this.leafNodes = this.getFlattedNodes(true, false);\n  };\n\n  Store.prototype.appendNode = function appendNode(nodeData, parentNode) {\n    var node = new src_node(nodeData, this.config, parentNode);\n    var children = parentNode ? parentNode.children : this.nodes;\n\n    children.push(node);\n  };\n\n  Store.prototype.appendNodes = function appendNodes(nodeDataList, parentNode) {\n    var _this2 = this;\n\n    nodeDataList = Object(util_[\"coerceTruthyValueToArray\"])(nodeDataList);\n    nodeDataList.forEach(function (nodeData) {\n      return _this2.appendNode(nodeData, parentNode);\n    });\n  };\n\n  Store.prototype.getNodes = function getNodes() {\n    return this.nodes;\n  };\n\n  Store.prototype.getFlattedNodes = function getFlattedNodes(leafOnly) {\n    var cached = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n    var cachedNodes = leafOnly ? this.leafNodes : this.flattedNodes;\n    return cached ? cachedNodes : flatNodes(this.nodes, leafOnly);\n  };\n\n  Store.prototype.getNodeByValue = function getNodeByValue(value) {\n    var nodes = this.getFlattedNodes(false, !this.config.lazy).filter(function (node) {\n      return Object(util_[\"valueEquals\"])(node.path, value) || node.value === value;\n    });\n    return nodes && nodes.length ? nodes[0] : null;\n  };\n\n  return Store;\n}();\n\n/* harmony default export */ var cascader_panel_src_store = (store_Store);\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/cascader-panel/src/cascader-panel.vue?vue&type=script&lang=js&\nvar cascader_panelvue_type_script_lang_js_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n\n\n\nvar cascader_panelvue_type_script_lang_js_KeyCode = aria_utils_default.a.keys;\n\nvar DefaultProps = {\n  expandTrigger: 'click', // or hover\n  multiple: false,\n  checkStrictly: false, // whether all nodes can be selected\n  emitPath: true, // wether to emit an array of all levels value in which node is located\n  lazy: false,\n  lazyLoad: util_[\"noop\"],\n  value: 'value',\n  label: 'label',\n  children: 'children',\n  leaf: 'leaf',\n  disabled: 'disabled',\n  hoverThreshold: 500\n};\n\nvar cascader_panelvue_type_script_lang_js_isLeaf = function isLeaf(el) {\n  return !el.getAttribute('aria-owns');\n};\n\nvar getSibling = function getSibling(el, distance) {\n  var parentNode = el.parentNode;\n\n  if (parentNode) {\n    var siblings = parentNode.querySelectorAll('.el-cascader-node[tabindex=\"-1\"]');\n    var index = Array.prototype.indexOf.call(siblings, el);\n    return siblings[index + distance] || null;\n  }\n  return null;\n};\n\nvar getMenuIndex = function getMenuIndex(el, distance) {\n  if (!el) return;\n  var pieces = el.id.split('-');\n  return Number(pieces[pieces.length - 2]);\n};\n\nvar focusNode = function focusNode(el) {\n  if (!el) return;\n  el.focus();\n  !cascader_panelvue_type_script_lang_js_isLeaf(el) && el.click();\n};\n\nvar checkNode = function checkNode(el) {\n  if (!el) return;\n\n  var input = el.querySelector('input');\n  if (input) {\n    input.click();\n  } else if (cascader_panelvue_type_script_lang_js_isLeaf(el)) {\n    el.click();\n  }\n};\n\n/* harmony default export */ var cascader_panelvue_type_script_lang_js_ = ({\n  name: 'ElCascaderPanel',\n\n  components: {\n    CascaderMenu: cascader_menu\n  },\n\n  props: {\n    value: {},\n    options: Array,\n    props: Object,\n    border: {\n      type: Boolean,\n      default: true\n    },\n    renderLabel: Function\n  },\n\n  provide: function provide() {\n    return {\n      panel: this\n    };\n  },\n  data: function data() {\n    return {\n      checkedValue: null,\n      checkedNodePaths: [],\n      store: [],\n      menus: [],\n      activePath: [],\n      loadCount: 0\n    };\n  },\n\n\n  computed: {\n    config: function config() {\n      return merge_default()(cascader_panelvue_type_script_lang_js_extends({}, DefaultProps), this.props || {});\n    },\n    multiple: function multiple() {\n      return this.config.multiple;\n    },\n    checkStrictly: function checkStrictly() {\n      return this.config.checkStrictly;\n    },\n    leafOnly: function leafOnly() {\n      return !this.checkStrictly;\n    },\n    isHoverMenu: function isHoverMenu() {\n      return this.config.expandTrigger === 'hover';\n    },\n    renderLabelFn: function renderLabelFn() {\n      return this.renderLabel || this.$scopedSlots.default;\n    }\n  },\n\n  watch: {\n    options: {\n      handler: function handler() {\n        this.initStore();\n      },\n      immediate: true,\n      deep: true\n    },\n    value: function value() {\n      this.syncCheckedValue();\n      this.checkStrictly && this.calculateCheckedNodePaths();\n    },\n    checkedValue: function checkedValue(val) {\n      if (!Object(util_[\"isEqual\"])(val, this.value)) {\n        this.checkStrictly && this.calculateCheckedNodePaths();\n        this.$emit('input', val);\n        this.$emit('change', val);\n      }\n    }\n  },\n\n  mounted: function mounted() {\n    if (!this.isEmptyValue(this.value)) {\n      this.syncCheckedValue();\n    }\n  },\n\n\n  methods: {\n    initStore: function initStore() {\n      var config = this.config,\n          options = this.options;\n\n      if (config.lazy && Object(util_[\"isEmpty\"])(options)) {\n        this.lazyLoad();\n      } else {\n        this.store = new cascader_panel_src_store(options, config);\n        this.menus = [this.store.getNodes()];\n        this.syncMenuState();\n      }\n    },\n    syncCheckedValue: function syncCheckedValue() {\n      var value = this.value,\n          checkedValue = this.checkedValue;\n\n      if (!Object(util_[\"isEqual\"])(value, checkedValue)) {\n        this.activePath = [];\n        this.checkedValue = value;\n        this.syncMenuState();\n      }\n    },\n    syncMenuState: function syncMenuState() {\n      var multiple = this.multiple,\n          checkStrictly = this.checkStrictly;\n\n      this.syncActivePath();\n      multiple && this.syncMultiCheckState();\n      checkStrictly && this.calculateCheckedNodePaths();\n      this.$nextTick(this.scrollIntoView);\n    },\n    syncMultiCheckState: function syncMultiCheckState() {\n      var _this = this;\n\n      var nodes = this.getFlattedNodes(this.leafOnly);\n\n      nodes.forEach(function (node) {\n        node.syncCheckState(_this.checkedValue);\n      });\n    },\n    isEmptyValue: function isEmptyValue(val) {\n      var multiple = this.multiple,\n          config = this.config;\n      var emitPath = config.emitPath;\n\n      if (multiple || emitPath) {\n        return Object(util_[\"isEmpty\"])(val);\n      }\n      return false;\n    },\n    syncActivePath: function syncActivePath() {\n      var _this2 = this;\n\n      var store = this.store,\n          multiple = this.multiple,\n          activePath = this.activePath,\n          checkedValue = this.checkedValue;\n\n\n      if (!Object(util_[\"isEmpty\"])(activePath)) {\n        var nodes = activePath.map(function (node) {\n          return _this2.getNodeByValue(node.getValue());\n        });\n        this.expandNodes(nodes);\n      } else if (!this.isEmptyValue(checkedValue)) {\n        var value = multiple ? checkedValue[0] : checkedValue;\n        var checkedNode = this.getNodeByValue(value) || {};\n        var _nodes = (checkedNode.pathNodes || []).slice(0, -1);\n        this.expandNodes(_nodes);\n      } else {\n        this.activePath = [];\n        this.menus = [store.getNodes()];\n      }\n    },\n    expandNodes: function expandNodes(nodes) {\n      var _this3 = this;\n\n      nodes.forEach(function (node) {\n        return _this3.handleExpand(node, true /* silent */);\n      });\n    },\n    calculateCheckedNodePaths: function calculateCheckedNodePaths() {\n      var _this4 = this;\n\n      var checkedValue = this.checkedValue,\n          multiple = this.multiple;\n\n      var checkedValues = multiple ? Object(util_[\"coerceTruthyValueToArray\"])(checkedValue) : [checkedValue];\n      this.checkedNodePaths = checkedValues.map(function (v) {\n        var checkedNode = _this4.getNodeByValue(v);\n        return checkedNode ? checkedNode.pathNodes : [];\n      });\n    },\n    handleKeyDown: function handleKeyDown(e) {\n      var target = e.target,\n          keyCode = e.keyCode;\n\n\n      switch (keyCode) {\n        case cascader_panelvue_type_script_lang_js_KeyCode.up:\n          var prev = getSibling(target, -1);\n          focusNode(prev);\n          break;\n        case cascader_panelvue_type_script_lang_js_KeyCode.down:\n          var next = getSibling(target, 1);\n          focusNode(next);\n          break;\n        case cascader_panelvue_type_script_lang_js_KeyCode.left:\n          var preMenu = this.$refs.menu[getMenuIndex(target) - 1];\n          if (preMenu) {\n            var expandedNode = preMenu.$el.querySelector('.el-cascader-node[aria-expanded=\"true\"]');\n            focusNode(expandedNode);\n          }\n          break;\n        case cascader_panelvue_type_script_lang_js_KeyCode.right:\n          var nextMenu = this.$refs.menu[getMenuIndex(target) + 1];\n          if (nextMenu) {\n            var firstNode = nextMenu.$el.querySelector('.el-cascader-node[tabindex=\"-1\"]');\n            focusNode(firstNode);\n          }\n          break;\n        case cascader_panelvue_type_script_lang_js_KeyCode.enter:\n          checkNode(target);\n          break;\n        case cascader_panelvue_type_script_lang_js_KeyCode.esc:\n        case cascader_panelvue_type_script_lang_js_KeyCode.tab:\n          this.$emit('close');\n          break;\n        default:\n          return;\n      }\n    },\n    handleExpand: function handleExpand(node, silent) {\n      var activePath = this.activePath;\n      var level = node.level;\n\n      var path = activePath.slice(0, level - 1);\n      var menus = this.menus.slice(0, level);\n\n      if (!node.isLeaf) {\n        path.push(node);\n        menus.push(node.children);\n      }\n\n      this.activePath = path;\n      this.menus = menus;\n\n      if (!silent) {\n        var pathValues = path.map(function (node) {\n          return node.getValue();\n        });\n        var activePathValues = activePath.map(function (node) {\n          return node.getValue();\n        });\n        if (!Object(util_[\"valueEquals\"])(pathValues, activePathValues)) {\n          this.$emit('active-item-change', pathValues); // Deprecated\n          this.$emit('expand-change', pathValues);\n        }\n      }\n    },\n    handleCheckChange: function handleCheckChange(value) {\n      this.checkedValue = value;\n    },\n    lazyLoad: function lazyLoad(node, onFullfiled) {\n      var _this5 = this;\n\n      var config = this.config;\n\n      if (!node) {\n        node = node || { root: true, level: 0 };\n        this.store = new cascader_panel_src_store([], config);\n        this.menus = [this.store.getNodes()];\n      }\n      node.loading = true;\n      var resolve = function resolve(dataList) {\n        var parent = node.root ? null : node;\n        dataList && dataList.length && _this5.store.appendNodes(dataList, parent);\n        node.loading = false;\n        node.loaded = true;\n\n        // dispose default value on lazy load mode\n        if (Array.isArray(_this5.checkedValue)) {\n          var nodeValue = _this5.checkedValue[_this5.loadCount++];\n          var valueKey = _this5.config.value;\n          var leafKey = _this5.config.leaf;\n\n          if (Array.isArray(dataList) && dataList.filter(function (item) {\n            return item[valueKey] === nodeValue;\n          }).length > 0) {\n            var checkedNode = _this5.store.getNodeByValue(nodeValue);\n\n            if (!checkedNode.data[leafKey]) {\n              _this5.lazyLoad(checkedNode, function () {\n                _this5.handleExpand(checkedNode);\n              });\n            }\n\n            if (_this5.loadCount === _this5.checkedValue.length) {\n              _this5.$parent.computePresentText();\n            }\n          }\n        }\n\n        onFullfiled && onFullfiled(dataList);\n      };\n      config.lazyLoad(node, resolve);\n    },\n\n\n    /**\n     * public methods\n    */\n    calculateMultiCheckedValue: function calculateMultiCheckedValue() {\n      this.checkedValue = this.getCheckedNodes(this.leafOnly).map(function (node) {\n        return node.getValueByOption();\n      });\n    },\n    scrollIntoView: function scrollIntoView() {\n      if (this.$isServer) return;\n\n      var menus = this.$refs.menu || [];\n      menus.forEach(function (menu) {\n        var menuElement = menu.$el;\n        if (menuElement) {\n          var container = menuElement.querySelector('.el-scrollbar__wrap');\n          var activeNode = menuElement.querySelector('.el-cascader-node.is-active') || menuElement.querySelector('.el-cascader-node.in-active-path');\n          scroll_into_view_default()(container, activeNode);\n        }\n      });\n    },\n    getNodeByValue: function getNodeByValue(val) {\n      return this.store.getNodeByValue(val);\n    },\n    getFlattedNodes: function getFlattedNodes(leafOnly) {\n      var cached = !this.config.lazy;\n      return this.store.getFlattedNodes(leafOnly, cached);\n    },\n    getCheckedNodes: function getCheckedNodes(leafOnly) {\n      var checkedValue = this.checkedValue,\n          multiple = this.multiple;\n\n      if (multiple) {\n        var nodes = this.getFlattedNodes(leafOnly);\n        return nodes.filter(function (node) {\n          return node.checked;\n        });\n      } else {\n        return this.isEmptyValue(checkedValue) ? [] : [this.getNodeByValue(checkedValue)];\n      }\n    },\n    clearCheckedNodes: function clearCheckedNodes() {\n      var config = this.config,\n          leafOnly = this.leafOnly;\n      var multiple = config.multiple,\n          emitPath = config.emitPath;\n\n      if (multiple) {\n        this.getCheckedNodes(leafOnly).filter(function (node) {\n          return !node.isDisabled;\n        }).forEach(function (node) {\n          return node.doCheck(false);\n        });\n        this.calculateMultiCheckedValue();\n      } else {\n        this.checkedValue = emitPath ? [] : null;\n      }\n    }\n  }\n});\n// CONCATENATED MODULE: ./packages/cascader-panel/src/cascader-panel.vue?vue&type=script&lang=js&\n /* harmony default export */ var src_cascader_panelvue_type_script_lang_js_ = (cascader_panelvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/cascader-panel/src/cascader-panel.vue\n\n\n\n\n\n/* normalize component */\n\nvar cascader_panel_component = normalizeComponent(\n  src_cascader_panelvue_type_script_lang_js_,\n  cascader_panelvue_type_template_id_34932346_render,\n  cascader_panelvue_type_template_id_34932346_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var cascader_panel_api; }\ncascader_panel_component.options.__file = \"packages/cascader-panel/src/cascader-panel.vue\"\n/* harmony default export */ var cascader_panel = (cascader_panel_component.exports);\n// CONCATENATED MODULE: ./packages/cascader-panel/index.js\n\n\n/* istanbul ignore next */\ncascader_panel.install = function (Vue) {\n  Vue.component(cascader_panel.name, cascader_panel);\n};\n\n/* harmony default export */ var packages_cascader_panel = (cascader_panel);\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/avatar/src/main.vue?vue&type=script&lang=js&\n\n/* harmony default export */ var avatar_src_mainvue_type_script_lang_js_ = ({\n  name: 'ElAvatar',\n\n  props: {\n    size: {\n      type: [Number, String],\n      validator: function validator(val) {\n        if (typeof val === 'string') {\n          return ['large', 'medium', 'small'].includes(val);\n        }\n        return typeof val === 'number';\n      }\n    },\n    shape: {\n      type: String,\n      default: 'circle',\n      validator: function validator(val) {\n        return ['circle', 'square'].includes(val);\n      }\n    },\n    icon: String,\n    src: String,\n    alt: String,\n    srcSet: String,\n    error: Function,\n    fit: {\n      type: String,\n      default: 'cover'\n    }\n  },\n\n  data: function data() {\n    return {\n      isImageExist: true\n    };\n  },\n\n\n  computed: {\n    avatarClass: function avatarClass() {\n      var size = this.size,\n          icon = this.icon,\n          shape = this.shape;\n\n      var classList = ['el-avatar'];\n\n      if (size && typeof size === 'string') {\n        classList.push('el-avatar--' + size);\n      }\n\n      if (icon) {\n        classList.push('el-avatar--icon');\n      }\n\n      if (shape) {\n        classList.push('el-avatar--' + shape);\n      }\n\n      return classList.join(' ');\n    }\n  },\n\n  methods: {\n    handleError: function handleError() {\n      var error = this.error;\n\n      var errorFlag = error ? error() : undefined;\n      if (errorFlag !== false) {\n        this.isImageExist = false;\n      }\n    },\n    renderAvatar: function renderAvatar() {\n      var h = this.$createElement;\n      var icon = this.icon,\n          src = this.src,\n          alt = this.alt,\n          isImageExist = this.isImageExist,\n          srcSet = this.srcSet,\n          fit = this.fit;\n\n\n      if (isImageExist && src) {\n        return h('img', {\n          attrs: {\n            src: src,\n\n            alt: alt,\n            srcSet: srcSet\n          },\n          on: {\n            'error': this.handleError\n          },\n          style: { 'object-fit': fit } });\n      }\n\n      if (icon) {\n        return h('i', { 'class': icon });\n      }\n\n      return this.$slots.default;\n    }\n  },\n\n  render: function render() {\n    var h = arguments[0];\n    var avatarClass = this.avatarClass,\n        size = this.size;\n\n\n    var sizeStyle = typeof size === 'number' ? {\n      height: size + 'px',\n      width: size + 'px',\n      lineHeight: size + 'px'\n    } : {};\n\n    return h(\n      'span',\n      { 'class': avatarClass, style: sizeStyle },\n      [this.renderAvatar()]\n    );\n  }\n});\n// CONCATENATED MODULE: ./packages/avatar/src/main.vue?vue&type=script&lang=js&\n /* harmony default export */ var packages_avatar_src_mainvue_type_script_lang_js_ = (avatar_src_mainvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/avatar/src/main.vue\nvar src_main_render, src_main_staticRenderFns\n\n\n\n\n/* normalize component */\n\nvar avatar_src_main_component = normalizeComponent(\n  packages_avatar_src_mainvue_type_script_lang_js_,\n  src_main_render,\n  src_main_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var avatar_src_main_api; }\navatar_src_main_component.options.__file = \"packages/avatar/src/main.vue\"\n/* harmony default export */ var avatar_src_main = (avatar_src_main_component.exports);\n// CONCATENATED MODULE: ./packages/avatar/index.js\n\n\n/* istanbul ignore next */\navatar_src_main.install = function (Vue) {\n  Vue.component(avatar_src_main.name, avatar_src_main);\n};\n\n/* harmony default export */ var avatar = (avatar_src_main);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/drawer/src/main.vue?vue&type=template&id=a4885264&\nvar mainvue_type_template_id_a4885264_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"transition\",\n    {\n      attrs: { name: \"el-drawer-fade\" },\n      on: { \"after-enter\": _vm.afterEnter, \"after-leave\": _vm.afterLeave }\n    },\n    [\n      _c(\n        \"div\",\n        {\n          directives: [\n            {\n              name: \"show\",\n              rawName: \"v-show\",\n              value: _vm.visible,\n              expression: \"visible\"\n            }\n          ],\n          staticClass: \"el-drawer__wrapper\",\n          attrs: { tabindex: \"-1\" }\n        },\n        [\n          _c(\n            \"div\",\n            {\n              staticClass: \"el-drawer__container\",\n              class: _vm.visible && \"el-drawer__open\",\n              attrs: { role: \"document\", tabindex: \"-1\" },\n              on: {\n                click: function($event) {\n                  if ($event.target !== $event.currentTarget) {\n                    return null\n                  }\n                  return _vm.handleWrapperClick($event)\n                }\n              }\n            },\n            [\n              _c(\n                \"div\",\n                {\n                  ref: \"drawer\",\n                  staticClass: \"el-drawer\",\n                  class: [_vm.direction, _vm.customClass],\n                  style: _vm.isHorizontal\n                    ? \"width: \" + _vm.drawerSize\n                    : \"height: \" + _vm.drawerSize,\n                  attrs: {\n                    \"aria-modal\": \"true\",\n                    \"aria-labelledby\": \"el-drawer__title\",\n                    \"aria-label\": _vm.title,\n                    role: \"dialog\",\n                    tabindex: \"-1\"\n                  }\n                },\n                [\n                  _vm.withHeader\n                    ? _c(\n                        \"header\",\n                        {\n                          staticClass: \"el-drawer__header\",\n                          attrs: { id: \"el-drawer__title\" }\n                        },\n                        [\n                          _vm._t(\"title\", [\n                            _c(\n                              \"span\",\n                              { attrs: { role: \"heading\", title: _vm.title } },\n                              [_vm._v(_vm._s(_vm.title))]\n                            )\n                          ]),\n                          _vm.showClose\n                            ? _c(\n                                \"button\",\n                                {\n                                  staticClass: \"el-drawer__close-btn\",\n                                  attrs: {\n                                    \"aria-label\":\n                                      \"close \" + (_vm.title || \"drawer\"),\n                                    type: \"button\"\n                                  },\n                                  on: { click: _vm.closeDrawer }\n                                },\n                                [\n                                  _c(\"i\", {\n                                    staticClass:\n                                      \"el-dialog__close el-icon el-icon-close\"\n                                  })\n                                ]\n                              )\n                            : _vm._e()\n                        ],\n                        2\n                      )\n                    : _vm._e(),\n                  _vm.rendered\n                    ? _c(\n                        \"section\",\n                        { staticClass: \"el-drawer__body\" },\n                        [_vm._t(\"default\")],\n                        2\n                      )\n                    : _vm._e()\n                ]\n              )\n            ]\n          )\n        ]\n      )\n    ]\n  )\n}\nvar mainvue_type_template_id_a4885264_staticRenderFns = []\nmainvue_type_template_id_a4885264_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/drawer/src/main.vue?vue&type=template&id=a4885264&\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/drawer/src/main.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n/* harmony default export */ var drawer_src_mainvue_type_script_lang_js_ = ({\n  name: 'ElDrawer',\n  mixins: [popup_default.a, emitter_default.a],\n  props: {\n    appendToBody: {\n      type: Boolean,\n      default: false\n    },\n    beforeClose: {\n      type: Function\n    },\n    customClass: {\n      type: String,\n      default: ''\n    },\n    closeOnPressEscape: {\n      type: Boolean,\n      default: true\n    },\n    destroyOnClose: {\n      type: Boolean,\n      default: false\n    },\n    modal: {\n      type: Boolean,\n      default: true\n    },\n    direction: {\n      type: String,\n      default: 'rtl',\n      validator: function validator(val) {\n        return ['ltr', 'rtl', 'ttb', 'btt'].indexOf(val) !== -1;\n      }\n    },\n    modalAppendToBody: {\n      type: Boolean,\n      default: true\n    },\n    showClose: {\n      type: Boolean,\n      default: true\n    },\n    size: {\n      type: [Number, String],\n      default: '30%'\n    },\n    title: {\n      type: String,\n      default: ''\n    },\n    visible: {\n      type: Boolean\n    },\n    wrapperClosable: {\n      type: Boolean,\n      default: true\n    },\n    withHeader: {\n      type: Boolean,\n      default: true\n    }\n  },\n  computed: {\n    isHorizontal: function isHorizontal() {\n      return this.direction === 'rtl' || this.direction === 'ltr';\n    },\n    drawerSize: function drawerSize() {\n      return typeof this.size === 'number' ? this.size + 'px' : this.size;\n    }\n  },\n  data: function data() {\n    return {\n      closed: false,\n      prevActiveElement: null\n    };\n  },\n\n  watch: {\n    visible: function visible(val) {\n      var _this = this;\n\n      if (val) {\n        this.closed = false;\n        this.$emit('open');\n        if (this.appendToBody) {\n          document.body.appendChild(this.$el);\n        }\n        this.prevActiveElement = document.activeElement;\n      } else {\n        if (!this.closed) {\n          this.$emit('close');\n          if (this.destroyOnClose === true) {\n            this.rendered = false;\n          }\n        }\n        this.$nextTick(function () {\n          if (_this.prevActiveElement) {\n            _this.prevActiveElement.focus();\n          }\n        });\n      }\n    }\n  },\n  methods: {\n    afterEnter: function afterEnter() {\n      this.$emit('opened');\n    },\n    afterLeave: function afterLeave() {\n      this.$emit('closed');\n    },\n    hide: function hide(cancel) {\n      if (cancel !== false) {\n        this.$emit('update:visible', false);\n        this.$emit('close');\n        if (this.destroyOnClose === true) {\n          this.rendered = false;\n        }\n        this.closed = true;\n      }\n    },\n    handleWrapperClick: function handleWrapperClick() {\n      if (this.wrapperClosable) {\n        this.closeDrawer();\n      }\n    },\n    closeDrawer: function closeDrawer() {\n      if (typeof this.beforeClose === 'function') {\n        this.beforeClose(this.hide);\n      } else {\n        this.hide();\n      }\n    },\n    handleClose: function handleClose() {\n      // This method here will be called by PopupManger, when the `closeOnPressEscape` was set to true\n      // pressing `ESC` will call this method, and also close the drawer.\n      // This method also calls `beforeClose` if there was one.\n      this.closeDrawer();\n    }\n  },\n  mounted: function mounted() {\n    if (this.visible) {\n      this.rendered = true;\n      this.open();\n      if (this.appendToBody) {\n        document.body.appendChild(this.$el);\n      }\n    }\n  },\n  destroyed: function destroyed() {\n    // if appendToBody is true, remove DOM node after destroy\n    if (this.appendToBody && this.$el && this.$el.parentNode) {\n      this.$el.parentNode.removeChild(this.$el);\n    }\n  }\n});\n// CONCATENATED MODULE: ./packages/drawer/src/main.vue?vue&type=script&lang=js&\n /* harmony default export */ var packages_drawer_src_mainvue_type_script_lang_js_ = (drawer_src_mainvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/drawer/src/main.vue\n\n\n\n\n\n/* normalize component */\n\nvar drawer_src_main_component = normalizeComponent(\n  packages_drawer_src_mainvue_type_script_lang_js_,\n  mainvue_type_template_id_a4885264_render,\n  mainvue_type_template_id_a4885264_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var drawer_src_main_api; }\ndrawer_src_main_component.options.__file = \"packages/drawer/src/main.vue\"\n/* harmony default export */ var drawer_src_main = (drawer_src_main_component.exports);\n// CONCATENATED MODULE: ./packages/drawer/index.js\n\n\n/* istanbul ignore next */\ndrawer_src_main.install = function (Vue) {\n  Vue.component(drawer_src_main.name, drawer_src_main);\n};\n\n/* harmony default export */ var drawer = (drawer_src_main);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/popconfirm/src/main.vue?vue&type=template&id=048de730&\nvar mainvue_type_template_id_048de730_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"el-popover\",\n    _vm._b(\n      {\n        attrs: { trigger: \"click\" },\n        model: {\n          value: _vm.visible,\n          callback: function($$v) {\n            _vm.visible = $$v\n          },\n          expression: \"visible\"\n        }\n      },\n      \"el-popover\",\n      _vm.$attrs,\n      false\n    ),\n    [\n      _c(\"div\", { staticClass: \"el-popconfirm\" }, [\n        _c(\"p\", { staticClass: \"el-popconfirm__main\" }, [\n          !_vm.hideIcon\n            ? _c(\"i\", {\n                staticClass: \"el-popconfirm__icon\",\n                class: _vm.icon,\n                style: { color: _vm.iconColor }\n              })\n            : _vm._e(),\n          _vm._v(\"\\n      \" + _vm._s(_vm.title) + \"\\n    \")\n        ]),\n        _c(\n          \"div\",\n          { staticClass: \"el-popconfirm__action\" },\n          [\n            _c(\n              \"el-button\",\n              {\n                attrs: { size: \"mini\", type: _vm.cancelButtonType },\n                on: { click: _vm.cancel }\n              },\n              [\n                _vm._v(\n                  \"\\n        \" +\n                    _vm._s(_vm.displayCancelButtonText) +\n                    \"\\n      \"\n                )\n              ]\n            ),\n            _c(\n              \"el-button\",\n              {\n                attrs: { size: \"mini\", type: _vm.confirmButtonType },\n                on: { click: _vm.confirm }\n              },\n              [\n                _vm._v(\n                  \"\\n        \" +\n                    _vm._s(_vm.displayConfirmButtonText) +\n                    \"\\n      \"\n                )\n              ]\n            )\n          ],\n          1\n        )\n      ]),\n      _vm._t(\"reference\", null, { slot: \"reference\" })\n    ],\n    2\n  )\n}\nvar mainvue_type_template_id_048de730_staticRenderFns = []\nmainvue_type_template_id_048de730_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/popconfirm/src/main.vue?vue&type=template&id=048de730&\n\n// EXTERNAL MODULE: external \"element-ui/lib/popover\"\nvar popover_ = __webpack_require__(44);\nvar popover_default = /*#__PURE__*/__webpack_require__.n(popover_);\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/popconfirm/src/main.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n/* harmony default export */ var popconfirm_src_mainvue_type_script_lang_js_ = ({\n  name: 'ElPopconfirm',\n  props: {\n    title: {\n      type: String\n    },\n    confirmButtonText: {\n      type: String\n    },\n    cancelButtonText: {\n      type: String\n    },\n    confirmButtonType: {\n      type: String,\n      default: 'primary'\n    },\n    cancelButtonType: {\n      type: String,\n      default: 'text'\n    },\n    icon: {\n      type: String,\n      default: 'el-icon-question'\n    },\n    iconColor: {\n      type: String,\n      default: '#f90'\n    },\n    hideIcon: {\n      type: Boolean,\n      default: false\n    }\n  },\n  components: {\n    ElPopover: popover_default.a,\n    ElButton: button_default.a\n  },\n  data: function data() {\n    return {\n      visible: false\n    };\n  },\n\n  computed: {\n    displayConfirmButtonText: function displayConfirmButtonText() {\n      return this.confirmButtonText || Object(lib_locale_[\"t\"])('el.popconfirm.confirmButtonText');\n    },\n    displayCancelButtonText: function displayCancelButtonText() {\n      return this.cancelButtonText || Object(lib_locale_[\"t\"])('el.popconfirm.cancelButtonText');\n    }\n  },\n  methods: {\n    confirm: function confirm() {\n      this.visible = false;\n      this.$emit('confirm');\n    },\n    cancel: function cancel() {\n      this.visible = false;\n      this.$emit('cancel');\n    }\n  }\n});\n// CONCATENATED MODULE: ./packages/popconfirm/src/main.vue?vue&type=script&lang=js&\n /* harmony default export */ var packages_popconfirm_src_mainvue_type_script_lang_js_ = (popconfirm_src_mainvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/popconfirm/src/main.vue\n\n\n\n\n\n/* normalize component */\n\nvar popconfirm_src_main_component = normalizeComponent(\n  packages_popconfirm_src_mainvue_type_script_lang_js_,\n  mainvue_type_template_id_048de730_render,\n  mainvue_type_template_id_048de730_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var popconfirm_src_main_api; }\npopconfirm_src_main_component.options.__file = \"packages/popconfirm/src/main.vue\"\n/* harmony default export */ var popconfirm_src_main = (popconfirm_src_main_component.exports);\n// CONCATENATED MODULE: ./packages/popconfirm/index.js\n\n\n/* istanbul ignore next */\npopconfirm_src_main.install = function (Vue) {\n  Vue.component(popconfirm_src_main.name, popconfirm_src_main);\n};\n\n/* harmony default export */ var popconfirm = (popconfirm_src_main);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/skeleton/src/index.vue?vue&type=template&id=7f659269&\nvar srcvue_type_template_id_7f659269_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    [\n      _vm.uiLoading\n        ? [\n            _c(\n              \"div\",\n              _vm._b(\n                { class: [\"el-skeleton\", _vm.animated ? \"is-animated\" : \"\"] },\n                \"div\",\n                _vm.$attrs,\n                false\n              ),\n              [\n                _vm._l(_vm.count, function(i) {\n                  return [\n                    _vm.loading\n                      ? _vm._t(\n                          \"template\",\n                          _vm._l(_vm.rows, function(item) {\n                            return _c(\"el-skeleton-item\", {\n                              key: i + \"-\" + item,\n                              class: {\n                                \"el-skeleton__paragraph\": item !== 1,\n                                \"is-first\": item === 1,\n                                \"is-last\": item === _vm.rows && _vm.rows > 1\n                              },\n                              attrs: { variant: \"p\" }\n                            })\n                          })\n                        )\n                      : _vm._e()\n                  ]\n                })\n              ],\n              2\n            )\n          ]\n        : [_vm._t(\"default\", null, null, _vm.$attrs)]\n    ],\n    2\n  )\n}\nvar srcvue_type_template_id_7f659269_staticRenderFns = []\nsrcvue_type_template_id_7f659269_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/skeleton/src/index.vue?vue&type=template&id=7f659269&\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/skeleton/src/index.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* harmony default export */ var skeleton_srcvue_type_script_lang_js_ = ({\n  name: 'ElSkeleton',\n  props: {\n    animated: {\n      type: Boolean,\n      default: false\n    },\n    count: {\n      type: Number,\n      default: 1\n    },\n    rows: {\n      type: Number,\n      default: 4\n    },\n    loading: {\n      type: Boolean,\n      default: true\n    },\n    throttle: {\n      type: Number,\n      default: 0\n    }\n  },\n  watch: {\n    loading: {\n      handler: function handler(loading) {\n        var _this = this;\n\n        if (this.throttle <= 0) {\n          this.uiLoading = loading;\n          return;\n        }\n        if (loading) {\n          clearTimeout(this.timeoutHandle);\n          this.timeoutHandle = setTimeout(function () {\n            _this.uiLoading = _this.loading;\n          }, this.throttle);\n        } else {\n          this.uiLoading = loading;\n        }\n      },\n\n      immediate: true\n    }\n  },\n  data: function data() {\n    return {\n      uiLoading: this.throttle <= 0 ? this.loading : false\n    };\n  }\n});\n// CONCATENATED MODULE: ./packages/skeleton/src/index.vue?vue&type=script&lang=js&\n /* harmony default export */ var packages_skeleton_srcvue_type_script_lang_js_ = (skeleton_srcvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/skeleton/src/index.vue\n\n\n\n\n\n/* normalize component */\n\nvar skeleton_src_component = normalizeComponent(\n  packages_skeleton_srcvue_type_script_lang_js_,\n  srcvue_type_template_id_7f659269_render,\n  srcvue_type_template_id_7f659269_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var skeleton_src_api; }\nskeleton_src_component.options.__file = \"packages/skeleton/src/index.vue\"\n/* harmony default export */ var skeleton_src = (skeleton_src_component.exports);\n// CONCATENATED MODULE: ./packages/skeleton/index.js\n\n\n/* istanbul ignore next */\nskeleton_src.install = function (Vue) {\n  Vue.component(skeleton_src.name, skeleton_src);\n};\n\n/* harmony default export */ var skeleton = (skeleton_src);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/skeleton/src/item.vue?vue&type=template&id=4bc8804c&\nvar itemvue_type_template_id_4bc8804c_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    { class: [\"el-skeleton__item\", \"el-skeleton__\" + _vm.variant] },\n    [_vm.variant === \"image\" ? _c(\"img-placeholder\") : _vm._e()],\n    1\n  )\n}\nvar itemvue_type_template_id_4bc8804c_staticRenderFns = []\nitemvue_type_template_id_4bc8804c_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/skeleton/src/item.vue?vue&type=template&id=4bc8804c&\n\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/skeleton/src/img-placeholder.vue?vue&type=template&id=1b2cb5c0&\nvar img_placeholdervue_type_template_id_1b2cb5c0_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"svg\",\n    {\n      attrs: { viewBox: \"0 0 1024 1024\", xmlns: \"http://www.w3.org/2000/svg\" }\n    },\n    [\n      _c(\"path\", {\n        attrs: {\n          d:\n            \"M64 896V128h896v768H64z m64-128l192-192 116.352 116.352L640 448l256 307.2V192H128v576z m224-480a96 96 0 1 1-0.064 192.064A96 96 0 0 1 352 288z\"\n        }\n      })\n    ]\n  )\n}\nvar img_placeholdervue_type_template_id_1b2cb5c0_staticRenderFns = []\nimg_placeholdervue_type_template_id_1b2cb5c0_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/skeleton/src/img-placeholder.vue?vue&type=template&id=1b2cb5c0&\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/skeleton/src/img-placeholder.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* harmony default export */ var img_placeholdervue_type_script_lang_js_ = ({\n  name: 'ImgPlaceholder'\n});\n// CONCATENATED MODULE: ./packages/skeleton/src/img-placeholder.vue?vue&type=script&lang=js&\n /* harmony default export */ var src_img_placeholdervue_type_script_lang_js_ = (img_placeholdervue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/skeleton/src/img-placeholder.vue\n\n\n\n\n\n/* normalize component */\n\nvar img_placeholder_component = normalizeComponent(\n  src_img_placeholdervue_type_script_lang_js_,\n  img_placeholdervue_type_template_id_1b2cb5c0_render,\n  img_placeholdervue_type_template_id_1b2cb5c0_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var img_placeholder_api; }\nimg_placeholder_component.options.__file = \"packages/skeleton/src/img-placeholder.vue\"\n/* harmony default export */ var img_placeholder = (img_placeholder_component.exports);\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/skeleton/src/item.vue?vue&type=script&lang=js&\nvar _components;\n\n//\n//\n//\n//\n//\n//\n\n\n\n/* harmony default export */ var skeleton_src_itemvue_type_script_lang_js_ = ({\n  name: 'ElSkeletonItem',\n  props: {\n    variant: {\n      type: String,\n      default: 'text'\n    }\n  },\n  components: (_components = {}, _components[img_placeholder.name] = img_placeholder, _components)\n});\n// CONCATENATED MODULE: ./packages/skeleton/src/item.vue?vue&type=script&lang=js&\n /* harmony default export */ var packages_skeleton_src_itemvue_type_script_lang_js_ = (skeleton_src_itemvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/skeleton/src/item.vue\n\n\n\n\n\n/* normalize component */\n\nvar skeleton_src_item_component = normalizeComponent(\n  packages_skeleton_src_itemvue_type_script_lang_js_,\n  itemvue_type_template_id_4bc8804c_render,\n  itemvue_type_template_id_4bc8804c_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var skeleton_src_item_api; }\nskeleton_src_item_component.options.__file = \"packages/skeleton/src/item.vue\"\n/* harmony default export */ var skeleton_src_item = (skeleton_src_item_component.exports);\n// CONCATENATED MODULE: ./packages/skeleton-item/index.js\n\n\n/* istanbul ignore next */\nskeleton_src_item.install = function (Vue) {\n  Vue.component(skeleton_src_item.name, skeleton_src_item);\n};\n\n/* harmony default export */ var skeleton_item = (skeleton_src_item);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/empty/src/index.vue?vue&type=template&id=347ced91&\nvar srcvue_type_template_id_347ced91_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"div\", { staticClass: \"el-empty\" }, [\n    _c(\n      \"div\",\n      { staticClass: \"el-empty__image\", style: _vm.imageStyle },\n      [\n        _vm.image\n          ? _c(\"img\", {\n              attrs: { src: _vm.image, ondragstart: \"return false\" }\n            })\n          : _vm._t(\"image\", [_c(\"img-empty\")])\n      ],\n      2\n    ),\n    _c(\n      \"div\",\n      { staticClass: \"el-empty__description\" },\n      [\n        _vm.$slots.description\n          ? _vm._t(\"description\")\n          : _c(\"p\", [_vm._v(_vm._s(_vm.emptyDescription))])\n      ],\n      2\n    ),\n    _vm.$slots.default\n      ? _c(\"div\", { staticClass: \"el-empty__bottom\" }, [_vm._t(\"default\")], 2)\n      : _vm._e()\n  ])\n}\nvar srcvue_type_template_id_347ced91_staticRenderFns = []\nsrcvue_type_template_id_347ced91_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/empty/src/index.vue?vue&type=template&id=347ced91&\n\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/empty/src/img-empty.vue?vue&type=template&id=42918b82&\nvar img_emptyvue_type_template_id_42918b82_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"svg\",\n    {\n      attrs: {\n        viewBox: \"0 0 79 86\",\n        version: \"1.1\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        \"xmlns:xlink\": \"http://www.w3.org/1999/xlink\"\n      }\n    },\n    [\n      _c(\n        \"defs\",\n        [\n          _c(\n            \"linearGradient\",\n            {\n              attrs: {\n                id: \"linearGradient-1-\" + _vm.id,\n                x1: \"38.8503086%\",\n                y1: \"0%\",\n                x2: \"61.1496914%\",\n                y2: \"100%\"\n              }\n            },\n            [\n              _c(\"stop\", { attrs: { \"stop-color\": \"#FCFCFD\", offset: \"0%\" } }),\n              _c(\"stop\", { attrs: { \"stop-color\": \"#EEEFF3\", offset: \"100%\" } })\n            ],\n            1\n          ),\n          _c(\n            \"linearGradient\",\n            {\n              attrs: {\n                id: \"linearGradient-2-\" + _vm.id,\n                x1: \"0%\",\n                y1: \"9.5%\",\n                x2: \"100%\",\n                y2: \"90.5%\"\n              }\n            },\n            [\n              _c(\"stop\", { attrs: { \"stop-color\": \"#FCFCFD\", offset: \"0%\" } }),\n              _c(\"stop\", { attrs: { \"stop-color\": \"#E9EBEF\", offset: \"100%\" } })\n            ],\n            1\n          ),\n          _c(\"rect\", {\n            attrs: {\n              id: \"path-3-\" + _vm.id,\n              x: \"0\",\n              y: \"0\",\n              width: \"17\",\n              height: \"36\"\n            }\n          })\n        ],\n        1\n      ),\n      _c(\n        \"g\",\n        {\n          attrs: {\n            id: \"Illustrations\",\n            stroke: \"none\",\n            \"stroke-width\": \"1\",\n            fill: \"none\",\n            \"fill-rule\": \"evenodd\"\n          }\n        },\n        [\n          _c(\n            \"g\",\n            {\n              attrs: {\n                id: \"B-type\",\n                transform: \"translate(-1268.000000, -535.000000)\"\n              }\n            },\n            [\n              _c(\n                \"g\",\n                {\n                  attrs: {\n                    id: \"Group-2\",\n                    transform: \"translate(1268.000000, 535.000000)\"\n                  }\n                },\n                [\n                  _c(\"path\", {\n                    attrs: {\n                      id: \"Oval-Copy-2\",\n                      d:\n                        \"M39.5,86 C61.3152476,86 79,83.9106622 79,81.3333333 C79,78.7560045 57.3152476,78 35.5,78 C13.6847524,78 0,78.7560045 0,81.3333333 C0,83.9106622 17.6847524,86 39.5,86 Z\",\n                      fill: \"#F7F8FC\"\n                    }\n                  }),\n                  _c(\"polygon\", {\n                    attrs: {\n                      id: \"Rectangle-Copy-14\",\n                      fill: \"#E5E7E9\",\n                      transform:\n                        \"translate(27.500000, 51.500000) scale(1, -1) translate(-27.500000, -51.500000) \",\n                      points: \"13 58 53 58 42 45 2 45\"\n                    }\n                  }),\n                  _c(\n                    \"g\",\n                    {\n                      attrs: {\n                        id: \"Group-Copy\",\n                        transform:\n                          \"translate(34.500000, 31.500000) scale(-1, 1) rotate(-25.000000) translate(-34.500000, -31.500000) translate(7.000000, 10.000000)\"\n                      }\n                    },\n                    [\n                      _c(\"polygon\", {\n                        attrs: {\n                          id: \"Rectangle-Copy-10\",\n                          fill: \"#E5E7E9\",\n                          transform:\n                            \"translate(11.500000, 5.000000) scale(1, -1) translate(-11.500000, -5.000000) \",\n                          points: \"2.84078316e-14 3 18 3 23 7 5 7\"\n                        }\n                      }),\n                      _c(\"polygon\", {\n                        attrs: {\n                          id: \"Rectangle-Copy-11\",\n                          fill: \"#EDEEF2\",\n                          points:\n                            \"-3.69149156e-15 7 38 7 38 43 -3.69149156e-15 43\"\n                        }\n                      }),\n                      _c(\"rect\", {\n                        attrs: {\n                          id: \"Rectangle-Copy-12\",\n                          fill: \"url(#linearGradient-1-\" + _vm.id + \")\",\n                          transform:\n                            \"translate(46.500000, 25.000000) scale(-1, 1) translate(-46.500000, -25.000000) \",\n                          x: \"38\",\n                          y: \"7\",\n                          width: \"17\",\n                          height: \"36\"\n                        }\n                      }),\n                      _c(\"polygon\", {\n                        attrs: {\n                          id: \"Rectangle-Copy-13\",\n                          fill: \"#F8F9FB\",\n                          transform:\n                            \"translate(39.500000, 3.500000) scale(-1, 1) translate(-39.500000, -3.500000) \",\n                          points:\n                            \"24 7 41 7 55 -3.63806207e-12 38 -3.63806207e-12\"\n                        }\n                      })\n                    ]\n                  ),\n                  _c(\"rect\", {\n                    attrs: {\n                      id: \"Rectangle-Copy-15\",\n                      fill: \"url(#linearGradient-2-\" + _vm.id + \")\",\n                      x: \"13\",\n                      y: \"45\",\n                      width: \"40\",\n                      height: \"36\"\n                    }\n                  }),\n                  _c(\n                    \"g\",\n                    {\n                      attrs: {\n                        id: \"Rectangle-Copy-17\",\n                        transform: \"translate(53.000000, 45.000000)\"\n                      }\n                    },\n                    [\n                      _c(\n                        \"mask\",\n                        { attrs: { id: \"mask-4-\" + _vm.id, fill: \"white\" } },\n                        [\n                          _c(\"use\", {\n                            attrs: { \"xlink:href\": \"#path-3-\" + _vm.id }\n                          })\n                        ]\n                      ),\n                      _c(\"use\", {\n                        attrs: {\n                          id: \"Mask\",\n                          fill: \"#E0E3E9\",\n                          transform:\n                            \"translate(8.500000, 18.000000) scale(-1, 1) translate(-8.500000, -18.000000) \",\n                          \"xlink:href\": \"#path-3-\" + _vm.id\n                        }\n                      }),\n                      _c(\"polygon\", {\n                        attrs: {\n                          id: \"Rectangle-Copy\",\n                          fill: \"#D5D7DE\",\n                          mask: \"url(#mask-4-\" + _vm.id + \")\",\n                          transform:\n                            \"translate(12.000000, 9.000000) scale(-1, 1) translate(-12.000000, -9.000000) \",\n                          points: \"7 0 24 0 20 18 -1.70530257e-13 16\"\n                        }\n                      })\n                    ]\n                  ),\n                  _c(\"polygon\", {\n                    attrs: {\n                      id: \"Rectangle-Copy-18\",\n                      fill: \"#F8F9FB\",\n                      transform:\n                        \"translate(66.000000, 51.500000) scale(-1, 1) translate(-66.000000, -51.500000) \",\n                      points: \"62 45 79 45 70 58 53 58\"\n                    }\n                  })\n                ]\n              )\n            ]\n          )\n        ]\n      )\n    ]\n  )\n}\nvar img_emptyvue_type_template_id_42918b82_staticRenderFns = []\nimg_emptyvue_type_template_id_42918b82_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/empty/src/img-empty.vue?vue&type=template&id=42918b82&\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/empty/src/img-empty.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nvar img_emptyvue_type_script_lang_js_id = 0;\n/* harmony default export */ var img_emptyvue_type_script_lang_js_ = ({\n  name: 'ImgEmpty',\n  data: function data() {\n    return {\n      id: ++img_emptyvue_type_script_lang_js_id\n    };\n  }\n});\n// CONCATENATED MODULE: ./packages/empty/src/img-empty.vue?vue&type=script&lang=js&\n /* harmony default export */ var src_img_emptyvue_type_script_lang_js_ = (img_emptyvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/empty/src/img-empty.vue\n\n\n\n\n\n/* normalize component */\n\nvar img_empty_component = normalizeComponent(\n  src_img_emptyvue_type_script_lang_js_,\n  img_emptyvue_type_template_id_42918b82_render,\n  img_emptyvue_type_template_id_42918b82_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var img_empty_api; }\nimg_empty_component.options.__file = \"packages/empty/src/img-empty.vue\"\n/* harmony default export */ var img_empty = (img_empty_component.exports);\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/empty/src/index.vue?vue&type=script&lang=js&\nvar srcvue_type_script_lang_js_components;\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n/* harmony default export */ var empty_srcvue_type_script_lang_js_ = ({\n  name: 'ElEmpty',\n  components: (srcvue_type_script_lang_js_components = {}, srcvue_type_script_lang_js_components[img_empty.name] = img_empty, srcvue_type_script_lang_js_components),\n  props: {\n    image: {\n      type: String,\n      default: ''\n    },\n    imageSize: Number,\n    description: {\n      type: String,\n      default: ''\n    }\n  },\n  computed: {\n    emptyDescription: function emptyDescription() {\n      return this.description || Object(lib_locale_[\"t\"])('el.empty.description');\n    },\n    imageStyle: function imageStyle() {\n      return {\n        width: this.imageSize ? this.imageSize + 'px' : ''\n      };\n    }\n  }\n});\n// CONCATENATED MODULE: ./packages/empty/src/index.vue?vue&type=script&lang=js&\n /* harmony default export */ var packages_empty_srcvue_type_script_lang_js_ = (empty_srcvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/empty/src/index.vue\n\n\n\n\n\n/* normalize component */\n\nvar empty_src_component = normalizeComponent(\n  packages_empty_srcvue_type_script_lang_js_,\n  srcvue_type_template_id_347ced91_render,\n  srcvue_type_template_id_347ced91_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var empty_src_api; }\nempty_src_component.options.__file = \"packages/empty/src/index.vue\"\n/* harmony default export */ var empty_src = (empty_src_component.exports);\n// CONCATENATED MODULE: ./packages/empty/index.js\n\n\nempty_src.install = function (Vue) {\n  Vue.component(empty_src.name, empty_src);\n};\n\n/* harmony default export */ var empty = (empty_src);\n// CONCATENATED MODULE: ./packages/descriptions/src/descriptions-row.js\nvar descriptions_row_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\n/* harmony default export */ var descriptions_row = ({\n  name: 'ElDescriptionsRow',\n  props: {\n    row: {\n      type: Array\n    }\n  },\n  inject: ['elDescriptions'],\n  render: function render(h) {\n    var elDescriptions = this.elDescriptions;\n\n    var row = (this.row || []).map(function (item) {\n      return descriptions_row_extends({}, item, {\n        label: item.slots.label || item.props.label\n      }, ['labelClassName', 'contentClassName', 'labelStyle', 'contentStyle'].reduce(function (res, key) {\n        res[key] = item.props[key] || elDescriptions[key];\n        return res;\n      }, {}));\n    });\n    if (elDescriptions.direction === 'vertical') {\n      return h('tbody', [h(\n        'tr',\n        { 'class': 'el-descriptions-row' },\n        [row.map(function (item) {\n          var _ref;\n\n          return h(\n            'th',\n            {\n              'class': (_ref = {\n                'el-descriptions-item__cell': true,\n                'el-descriptions-item__label': true,\n                'has-colon': elDescriptions.border ? false : elDescriptions.colon,\n                'is-bordered-label': elDescriptions.border\n              }, _ref[item.labelClassName] = true, _ref),\n              style: item.labelStyle,\n              attrs: { colSpan: item.props.span\n              }\n            },\n            [item.label]\n          );\n        })]\n      ), h(\n        'tr',\n        { 'class': 'el-descriptions-row' },\n        [row.map(function (item) {\n          return h(\n            'td',\n            {\n              'class': ['el-descriptions-item__cell', 'el-descriptions-item__content', item.contentClassName],\n              style: item.contentStyle,\n              attrs: { colSpan: item.props.span\n              }\n            },\n            [item.slots.default]\n          );\n        })]\n      )]);\n    }\n    if (elDescriptions.border) {\n      return h('tbody', [h(\n        'tr',\n        { 'class': 'el-descriptions-row' },\n        [row.map(function (item) {\n          var _ref2;\n\n          return [h(\n            'th',\n            {\n              'class': (_ref2 = {\n                'el-descriptions-item__cell': true,\n                'el-descriptions-item__label': true,\n                'is-bordered-label': elDescriptions.border\n              }, _ref2[item.labelClassName] = true, _ref2),\n              style: item.labelStyle,\n              attrs: { colSpan: '1'\n              }\n            },\n            [item.label]\n          ), h(\n            'td',\n            {\n              'class': ['el-descriptions-item__cell', 'el-descriptions-item__content', item.contentClassName],\n              style: item.contentStyle,\n              attrs: { colSpan: item.props.span * 2 - 1\n              }\n            },\n            [item.slots.default]\n          )];\n        })]\n      )]);\n    }\n    return h('tbody', [h(\n      'tr',\n      { 'class': 'el-descriptions-row' },\n      [row.map(function (item) {\n        var _ref3;\n\n        return h(\n          'td',\n          { 'class': 'el-descriptions-item el-descriptions-item__cell', attrs: { colSpan: item.props.span }\n          },\n          [h(\n            'div',\n            { 'class': 'el-descriptions-item__container' },\n            [h(\n              'span',\n              {\n                'class': (_ref3 = {\n                  'el-descriptions-item__label': true,\n                  'has-colon': elDescriptions.colon\n                }, _ref3[item.labelClassName] = true, _ref3),\n                style: item.labelStyle\n              },\n              [item.props.label]\n            ), h(\n              'span',\n              {\n                'class': ['el-descriptions-item__content', item.contentClassName],\n                style: item.contentStyle\n              },\n              [item.slots.default]\n            )]\n          )]\n        );\n      })]\n    )]);\n  }\n});\n// CONCATENATED MODULE: ./packages/descriptions/src/index.js\nvar src_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar src_components;\n\n\n\n\n/* harmony default export */ var descriptions_src = ({\n  name: 'ElDescriptions',\n  components: (src_components = {}, src_components[descriptions_row.name] = descriptions_row, src_components),\n  props: {\n    border: {\n      type: Boolean,\n      default: false\n    },\n    column: {\n      type: Number,\n      default: 3\n    },\n    direction: {\n      type: String,\n      default: 'horizontal'\n    },\n    size: {\n      type: String\n      // validator: isValidComponentSize,\n    },\n    title: {\n      type: String,\n      default: ''\n    },\n    extra: {\n      type: String,\n      default: ''\n    },\n    labelStyle: {\n      type: Object\n    },\n    contentStyle: {\n      type: Object\n    },\n    labelClassName: {\n      type: String,\n      default: ''\n    },\n    contentClassName: {\n      type: String,\n      default: ''\n    },\n    colon: {\n      type: Boolean,\n      default: true\n    }\n  },\n  computed: {\n    descriptionsSize: function descriptionsSize() {\n      return this.size || (this.$ELEMENT || {}).size;\n    }\n  },\n  provide: function provide() {\n    return {\n      elDescriptions: this\n    };\n  },\n\n  methods: {\n    getOptionProps: function getOptionProps(vnode) {\n      if (vnode.componentOptions) {\n        var componentOptions = vnode.componentOptions;\n        var _componentOptions$pro = componentOptions.propsData,\n            propsData = _componentOptions$pro === undefined ? {} : _componentOptions$pro,\n            _componentOptions$Cto = componentOptions.Ctor,\n            Ctor = _componentOptions$Cto === undefined ? {} : _componentOptions$Cto;\n\n        var props = (Ctor.options || {}).props || {};\n        var res = {};\n        for (var k in props) {\n          var v = props[k];\n          var defaultValue = v.default;\n          if (defaultValue !== undefined) {\n            res[k] = Object(types_[\"isFunction\"])(defaultValue) ? defaultValue.call(vnode) : defaultValue;\n          }\n        }\n        return src_extends({}, res, propsData);\n      }\n      return {};\n    },\n    getSlots: function getSlots(vnode) {\n      var _this = this;\n\n      var componentOptions = vnode.componentOptions || {};\n      var children = vnode.children || componentOptions.children || [];\n      var slots = {};\n      children.forEach(function (child) {\n        if (!_this.isEmptyElement(child)) {\n          var name = child.data && child.data.slot || 'default';\n          slots[name] = slots[name] || [];\n          if (child.tag === 'template') {\n            slots[name].push(child.children);\n          } else {\n            slots[name].push(child);\n          }\n        }\n      });\n      return src_extends({}, slots);\n    },\n    isEmptyElement: function isEmptyElement(c) {\n      return !(c.tag || c.text && c.text.trim() !== '');\n    },\n    filledNode: function filledNode(node, span, count) {\n      var