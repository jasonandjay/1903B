        aria_utils.triggerEvent(event.currentTarget, 'mouseenter');\n        _this.submenu && _this.submenu.gotoSubIndex(_this.submenu.subMenuItems.length - 1);\n        prevDef = true;\n        break;\n      case keys.tab:\n        aria_utils.triggerEvent(event.currentTarget, 'mouseleave');\n        break;\n      case keys.enter:\n      case keys.space:\n        prevDef = true;\n        event.currentTarget.click();\n        break;\n    }\n    if (prevDef) {\n      event.preventDefault();\n    }\n  });\n};\n\n/* harmony default export */ var aria_menuitem = (MenuItem);\n// CONCATENATED MODULE: ./src/utils/menu/aria-menubar.js\n\n\nvar Menu = function Menu(domNode) {\n  this.domNode = domNode;\n  this.init();\n};\n\nMenu.prototype.init = function () {\n  var menuChildren = this.domNode.childNodes;\n  [].filter.call(menuChildren, function (child) {\n    return child.nodeType === 1;\n  }).forEach(function (child) {\n    new aria_menuitem(child); // eslint-disable-line\n  });\n};\n/* harmony default export */ var aria_menubar = (Menu);\n// EXTERNAL MODULE: external \"element-ui/lib/utils/dom\"\nvar dom_ = __webpack_require__(1);\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/menu/src/menu.vue?vue&type=script&lang=js&\n\n\n\n\n\n\n/* harmony default export */ var menuvue_type_script_lang_js_ = ({\n  name: 'ElMenu',\n\n  render: function render(h) {\n    var component = h(\n      'ul',\n      {\n        attrs: {\n          role: 'menubar'\n        },\n        key: +this.collapse,\n        style: { backgroundColor: this.backgroundColor || '' },\n        'class': {\n          'el-menu--horizontal': this.mode === 'horizontal',\n          'el-menu--collapse': this.collapse,\n          \"el-menu\": true\n        }\n      },\n      [this.$slots.default]\n    );\n\n    if (this.collapseTransition) {\n      return h('el-menu-collapse-transition', [component]);\n    } else {\n      return component;\n    }\n  },\n\n\n  componentName: 'ElMenu',\n\n  mixins: [emitter_default.a, migrating_default.a],\n\n  provide: function provide() {\n    return {\n      rootMenu: this\n    };\n  },\n\n\n  components: {\n    'el-menu-collapse-transition': {\n      functional: true,\n      render: function render(createElement, context) {\n        var data = {\n          props: {\n            mode: 'out-in'\n          },\n          on: {\n            beforeEnter: function beforeEnter(el) {\n              el.style.opacity = 0.2;\n            },\n            enter: function enter(el) {\n              Object(dom_[\"addClass\"])(el, 'el-opacity-transition');\n              el.style.opacity = 1;\n            },\n            afterEnter: function afterEnter(el) {\n              Object(dom_[\"removeClass\"])(el, 'el-opacity-transition');\n              el.style.opacity = '';\n            },\n            beforeLeave: function beforeLeave(el) {\n              if (!el.dataset) el.dataset = {};\n\n              if (Object(dom_[\"hasClass\"])(el, 'el-menu--collapse')) {\n                Object(dom_[\"removeClass\"])(el, 'el-menu--collapse');\n                el.dataset.oldOverflow = el.style.overflow;\n                el.dataset.scrollWidth = el.clientWidth;\n                Object(dom_[\"addClass\"])(el, 'el-menu--collapse');\n              } else {\n                Object(dom_[\"addClass\"])(el, 'el-menu--collapse');\n                el.dataset.oldOverflow = el.style.overflow;\n                el.dataset.scrollWidth = el.clientWidth;\n                Object(dom_[\"removeClass\"])(el, 'el-menu--collapse');\n              }\n\n              el.style.width = el.scrollWidth + 'px';\n              el.style.overflow = 'hidden';\n            },\n            leave: function leave(el) {\n              Object(dom_[\"addClass\"])(el, 'horizontal-collapse-transition');\n              el.style.width = el.dataset.scrollWidth + 'px';\n            }\n          }\n        };\n        return createElement('transition', data, context.children);\n      }\n    }\n  },\n\n  props: {\n    mode: {\n      type: String,\n      default: 'vertical'\n    },\n    defaultActive: {\n      type: String,\n      default: ''\n    },\n    defaultOpeneds: Array,\n    uniqueOpened: Boolean,\n    router: Boolean,\n    menuTrigger: {\n      type: String,\n      default: 'hover'\n    },\n    collapse: Boolean,\n    backgroundColor: String,\n    textColor: String,\n    activeTextColor: String,\n    collapseTransition: {\n      type: Boolean,\n      default: true\n    }\n  },\n  data: function data() {\n    return {\n      activeIndex: this.defaultActive,\n      openedMenus: this.defaultOpeneds && !this.collapse ? this.defaultOpeneds.slice(0) : [],\n      items: {},\n      submenus: {}\n    };\n  },\n\n  computed: {\n    hoverBackground: function hoverBackground() {\n      return this.backgroundColor ? this.mixColor(this.backgroundColor, 0.2) : '';\n    },\n    isMenuPopup: function isMenuPopup() {\n      return this.mode === 'horizontal' || this.mode === 'vertical' && this.collapse;\n    }\n  },\n  watch: {\n    defaultActive: function defaultActive(value) {\n      if (!this.items[value]) {\n        this.activeIndex = null;\n      }\n      this.updateActiveIndex(value);\n    },\n    defaultOpeneds: function defaultOpeneds(value) {\n      if (!this.collapse) {\n        this.openedMenus = value;\n      }\n    },\n    collapse: function collapse(value) {\n      if (value) this.openedMenus = [];\n      this.broadcast('ElSubmenu', 'toggle-collapse', value);\n    }\n  },\n  methods: {\n    updateActiveIndex: function updateActiveIndex(val) {\n      var item = this.items[val] || this.items[this.activeIndex] || this.items[this.defaultActive];\n      if (item) {\n        this.activeIndex = item.index;\n        this.initOpenedMenu();\n      } else {\n        this.activeIndex = null;\n      }\n    },\n    getMigratingConfig: function getMigratingConfig() {\n      return {\n        props: {\n          'theme': 'theme is removed.'\n        }\n      };\n    },\n    getColorChannels: function getColorChannels(color) {\n      color = color.replace('#', '');\n      if (/^[0-9a-fA-F]{3}$/.test(color)) {\n        color = color.split('');\n        for (var i = 2; i >= 0; i--) {\n          color.splice(i, 0, color[i]);\n        }\n        color = color.join('');\n      }\n      if (/^[0-9a-fA-F]{6}$/.test(color)) {\n        return {\n          red: parseInt(color.slice(0, 2), 16),\n          green: parseInt(color.slice(2, 4), 16),\n          blue: parseInt(color.slice(4, 6), 16)\n        };\n      } else {\n        return {\n          red: 255,\n          green: 255,\n          blue: 255\n        };\n      }\n    },\n    mixColor: function mixColor(color, percent) {\n      var _getColorChannels = this.getColorChannels(color),\n          red = _getColorChannels.red,\n          green = _getColorChannels.green,\n          blue = _getColorChannels.blue;\n\n      if (percent > 0) {\n        // shade given color\n        red *= 1 - percent;\n        green *= 1 - percent;\n        blue *= 1 - percent;\n      } else {\n        // tint given color\n        red += (255 - red) * percent;\n        green += (255 - green) * percent;\n        blue += (255 - blue) * percent;\n      }\n      return 'rgb(' + Math.round(red) + ', ' + Math.round(green) + ', ' + Math.round(blue) + ')';\n    },\n    addItem: function addItem(item) {\n      this.$set(this.items, item.index, item);\n    },\n    removeItem: function removeItem(item) {\n      delete this.items[item.index];\n    },\n    addSubmenu: function addSubmenu(item) {\n      this.$set(this.submenus, item.index, item);\n    },\n    removeSubmenu: function removeSubmenu(item) {\n      delete this.submenus[item.index];\n    },\n    openMenu: function openMenu(index, indexPath) {\n      var openedMenus = this.openedMenus;\n      if (openedMenus.indexOf(index) !== -1) return;\n      // 将不在该菜单路径下的其余菜单收起\n      // collapse all menu that are not under current menu item\n      if (this.uniqueOpened) {\n        this.openedMenus = openedMenus.filter(function (index) {\n          return indexPath.indexOf(index) !== -1;\n        });\n      }\n      this.openedMenus.push(index);\n    },\n    closeMenu: function closeMenu(index) {\n      var i = this.openedMenus.indexOf(index);\n      if (i !== -1) {\n        this.openedMenus.splice(i, 1);\n      }\n    },\n    handleSubmenuClick: function handleSubmenuClick(submenu) {\n      var index = submenu.index,\n          indexPath = submenu.indexPath;\n\n      var isOpened = this.openedMenus.indexOf(index) !== -1;\n\n      if (isOpened) {\n        this.closeMenu(index);\n        this.$emit('close', index, indexPath);\n      } else {\n        this.openMenu(index, indexPath);\n        this.$emit('open', index, indexPath);\n      }\n    },\n    handleItemClick: function handleItemClick(item) {\n      var _this = this;\n\n      var index = item.index,\n          indexPath = item.indexPath;\n\n      var oldActiveIndex = this.activeIndex;\n      var hasIndex = item.index !== null;\n\n      if (hasIndex) {\n        this.activeIndex = item.index;\n      }\n\n      this.$emit('select', index, indexPath, item);\n\n      if (this.mode === 'horizontal' || this.collapse) {\n        this.openedMenus = [];\n      }\n\n      if (this.router && hasIndex) {\n        this.routeToItem(item, function (error) {\n          _this.activeIndex = oldActiveIndex;\n          if (error) {\n            // vue-router 3.1.0+ push/replace cause NavigationDuplicated error \n            // https://github.com/ElemeFE/element/issues/17044\n            if (error.name === 'NavigationDuplicated') return;\n            console.error(error);\n          }\n        });\n      }\n    },\n\n    // 初始化展开菜单\n    // initialize opened menu\n    initOpenedMenu: function initOpenedMenu() {\n      var _this2 = this;\n\n      var index = this.activeIndex;\n      var activeItem = this.items[index];\n      if (!activeItem || this.mode === 'horizontal' || this.collapse) return;\n\n      var indexPath = activeItem.indexPath;\n\n      // 展开该菜单项的路径上所有子菜单\n      // expand all submenus of the menu item\n      indexPath.forEach(function (index) {\n        var submenu = _this2.submenus[index];\n        submenu && _this2.openMenu(index, submenu.indexPath);\n      });\n    },\n    routeToItem: function routeToItem(item, onError) {\n      var route = item.route || item.index;\n      try {\n        this.$router.push(route, function () {}, onError);\n      } catch (e) {\n        console.error(e);\n      }\n    },\n    open: function open(index) {\n      var _this3 = this;\n\n      var indexPath = this.submenus[index.toString()].indexPath;\n\n      indexPath.forEach(function (i) {\n        return _this3.openMenu(i, indexPath);\n      });\n    },\n    close: function close(index) {\n      this.closeMenu(index);\n    }\n  },\n  mounted: function mounted() {\n    this.initOpenedMenu();\n    this.$on('item-click', this.handleItemClick);\n    this.$on('submenu-click', this.handleSubmenuClick);\n    if (this.mode === 'horizontal') {\n      new aria_menubar(this.$el); // eslint-disable-line\n    }\n    this.$watch('items', this.updateActiveIndex);\n  }\n});\n// CONCATENATED MODULE: ./packages/menu/src/menu.vue?vue&type=script&lang=js&\n /* harmony default export */ var src_menuvue_type_script_lang_js_ = (menuvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/menu/src/menu.vue\nvar menu_render, menu_staticRenderFns\n\n\n\n\n/* normalize component */\n\nvar menu_component = normalizeComponent(\n  src_menuvue_type_script_lang_js_,\n  menu_render,\n  menu_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var menu_api; }\nmenu_component.options.__file = \"packages/menu/src/menu.vue\"\n/* harmony default export */ var src_menu = (menu_component.exports);\n// CONCATENATED MODULE: ./packages/menu/index.js\n\n\n/* istanbul ignore next */\nsrc_menu.install = function (Vue) {\n  Vue.component(src_menu.name, src_menu);\n};\n\n/* harmony default export */ var packages_menu = (src_menu);\n// EXTERNAL MODULE: external \"element-ui/lib/transitions/collapse-transition\"\nvar collapse_transition_ = __webpack_require__(21);\nvar collapse_transition_default = /*#__PURE__*/__webpack_require__.n(collapse_transition_);\n\n// CONCATENATED MODULE: ./packages/menu/src/menu-mixin.js\n/* harmony default export */ var menu_mixin = ({\n  inject: ['rootMenu'],\n  computed: {\n    indexPath: function indexPath() {\n      var path = [this.index];\n      var parent = this.$parent;\n      while (parent.$options.componentName !== 'ElMenu') {\n        if (parent.index) {\n          path.unshift(parent.index);\n        }\n        parent = parent.$parent;\n      }\n      return path;\n    },\n    parentMenu: function parentMenu() {\n      var parent = this.$parent;\n      while (parent && ['ElMenu', 'ElSubmenu'].indexOf(parent.$options.componentName) === -1) {\n        parent = parent.$parent;\n      }\n      return parent;\n    },\n    paddingStyle: function paddingStyle() {\n      if (this.rootMenu.mode !== 'vertical') return {};\n\n      var padding = 20;\n      var parent = this.$parent;\n\n      if (this.rootMenu.collapse) {\n        padding = 20;\n      } else {\n        while (parent && parent.$options.componentName !== 'ElMenu') {\n          if (parent.$options.componentName === 'ElSubmenu') {\n            padding += 20;\n          }\n          parent = parent.$parent;\n        }\n      }\n      return { paddingLeft: padding + 'px' };\n    }\n  }\n});\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/menu/src/submenu.vue?vue&type=script&lang=js&\n\n\n\n\n\n\nvar poperMixins = {\n  props: {\n    transformOrigin: {\n      type: [Boolean, String],\n      default: false\n    },\n    offset: vue_popper_default.a.props.offset,\n    boundariesPadding: vue_popper_default.a.props.boundariesPadding,\n    popperOptions: vue_popper_default.a.props.popperOptions\n  },\n  data: vue_popper_default.a.data,\n  methods: vue_popper_default.a.methods,\n  beforeDestroy: vue_popper_default.a.beforeDestroy,\n  deactivated: vue_popper_default.a.deactivated\n};\n\n/* harmony default export */ var submenuvue_type_script_lang_js_ = ({\n  name: 'ElSubmenu',\n\n  componentName: 'ElSubmenu',\n\n  mixins: [menu_mixin, emitter_default.a, poperMixins],\n\n  components: { ElCollapseTransition: collapse_transition_default.a },\n\n  props: {\n    index: {\n      type: String,\n      required: true\n    },\n    showTimeout: {\n      type: Number,\n      default: 300\n    },\n    hideTimeout: {\n      type: Number,\n      default: 300\n    },\n    popperClass: String,\n    disabled: Boolean,\n    popperAppendToBody: {\n      type: Boolean,\n      default: undefined\n    }\n  },\n\n  data: function data() {\n    return {\n      popperJS: null,\n      timeout: null,\n      items: {},\n      submenus: {},\n      mouseInChild: false\n    };\n  },\n\n  watch: {\n    opened: function opened(val) {\n      var _this = this;\n\n      if (this.isMenuPopup) {\n        this.$nextTick(function (_) {\n          _this.updatePopper();\n        });\n      }\n    }\n  },\n  computed: {\n    // popper option\n    appendToBody: function appendToBody() {\n      return this.popperAppendToBody === undefined ? this.isFirstLevel : this.popperAppendToBody;\n    },\n    menuTransitionName: function menuTransitionName() {\n      return this.rootMenu.collapse ? 'el-zoom-in-left' : 'el-zoom-in-top';\n    },\n    opened: function opened() {\n      return this.rootMenu.openedMenus.indexOf(this.index) > -1;\n    },\n    active: function active() {\n      var isActive = false;\n      var submenus = this.submenus;\n      var items = this.items;\n\n      Object.keys(items).forEach(function (index) {\n        if (items[index].active) {\n          isActive = true;\n        }\n      });\n\n      Object.keys(submenus).forEach(function (index) {\n        if (submenus[index].active) {\n          isActive = true;\n        }\n      });\n\n      return isActive;\n    },\n    hoverBackground: function hoverBackground() {\n      return this.rootMenu.hoverBackground;\n    },\n    backgroundColor: function backgroundColor() {\n      return this.rootMenu.backgroundColor || '';\n    },\n    activeTextColor: function activeTextColor() {\n      return this.rootMenu.activeTextColor || '';\n    },\n    textColor: function textColor() {\n      return this.rootMenu.textColor || '';\n    },\n    mode: function mode() {\n      return this.rootMenu.mode;\n    },\n    isMenuPopup: function isMenuPopup() {\n      return this.rootMenu.isMenuPopup;\n    },\n    titleStyle: function titleStyle() {\n      if (this.mode !== 'horizontal') {\n        return {\n          color: this.textColor\n        };\n      }\n      return {\n        borderBottomColor: this.active ? this.rootMenu.activeTextColor ? this.activeTextColor : '' : 'transparent',\n        color: this.active ? this.activeTextColor : this.textColor\n      };\n    },\n    isFirstLevel: function isFirstLevel() {\n      var isFirstLevel = true;\n      var parent = this.$parent;\n      while (parent && parent !== this.rootMenu) {\n        if (['ElSubmenu', 'ElMenuItemGroup'].indexOf(parent.$options.componentName) > -1) {\n          isFirstLevel = false;\n          break;\n        } else {\n          parent = parent.$parent;\n        }\n      }\n      return isFirstLevel;\n    }\n  },\n  methods: {\n    handleCollapseToggle: function handleCollapseToggle(value) {\n      if (value) {\n        this.initPopper();\n      } else {\n        this.doDestroy();\n      }\n    },\n    addItem: function addItem(item) {\n      this.$set(this.items, item.index, item);\n    },\n    removeItem: function removeItem(item) {\n      delete this.items[item.index];\n    },\n    addSubmenu: function addSubmenu(item) {\n      this.$set(this.submenus, item.index, item);\n    },\n    removeSubmenu: function removeSubmenu(item) {\n      delete this.submenus[item.index];\n    },\n    handleClick: function handleClick() {\n      var rootMenu = this.rootMenu,\n          disabled = this.disabled;\n\n      if (rootMenu.menuTrigger === 'hover' && rootMenu.mode === 'horizontal' || rootMenu.collapse && rootMenu.mode === 'vertical' || disabled) {\n        return;\n      }\n      this.dispatch('ElMenu', 'submenu-click', this);\n    },\n    handleMouseenter: function handleMouseenter(event) {\n      var _this2 = this;\n\n      var showTimeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.showTimeout;\n\n\n      if (!('ActiveXObject' in window) && event.type === 'focus' && !event.relatedTarget) {\n        return;\n      }\n      var rootMenu = this.rootMenu,\n          disabled = this.disabled;\n\n      if (rootMenu.menuTrigger === 'click' && rootMenu.mode === 'horizontal' || !rootMenu.collapse && rootMenu.mode === 'vertical' || disabled) {\n        return;\n      }\n      this.dispatch('ElSubmenu', 'mouse-enter-child');\n      clearTimeout(this.timeout);\n      this.timeout = setTimeout(function () {\n        _this2.rootMenu.openMenu(_this2.index, _this2.indexPath);\n      }, showTimeout);\n\n      if (this.appendToBody) {\n        this.$parent.$el.dispatchEvent(new MouseEvent('mouseenter'));\n      }\n    },\n    handleMouseleave: function handleMouseleave() {\n      var _this3 = this;\n\n      var deepDispatch = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var rootMenu = this.rootMenu;\n\n      if (rootMenu.menuTrigger === 'click' && rootMenu.mode === 'horizontal' || !rootMenu.collapse && rootMenu.mode === 'vertical') {\n        return;\n      }\n      this.dispatch('ElSubmenu', 'mouse-leave-child');\n      clearTimeout(this.timeout);\n      this.timeout = setTimeout(function () {\n        !_this3.mouseInChild && _this3.rootMenu.closeMenu(_this3.index);\n      }, this.hideTimeout);\n\n      if (this.appendToBody && deepDispatch) {\n        if (this.$parent.$options.name === 'ElSubmenu') {\n          this.$parent.handleMouseleave(true);\n        }\n      }\n    },\n    handleTitleMouseenter: function handleTitleMouseenter() {\n      if (this.mode === 'horizontal' && !this.rootMenu.backgroundColor) return;\n      var title = this.$refs['submenu-title'];\n      title && (title.style.backgroundColor = this.rootMenu.hoverBackground);\n    },\n    handleTitleMouseleave: function handleTitleMouseleave() {\n      if (this.mode === 'horizontal' && !this.rootMenu.backgroundColor) return;\n      var title = this.$refs['submenu-title'];\n      title && (title.style.backgroundColor = this.rootMenu.backgroundColor || '');\n    },\n    updatePlacement: function updatePlacement() {\n      this.currentPlacement = this.mode === 'horizontal' && this.isFirstLevel ? 'bottom-start' : 'right-start';\n    },\n    initPopper: function initPopper() {\n      this.referenceElm = this.$el;\n      this.popperElm = this.$refs.menu;\n      this.updatePlacement();\n    }\n  },\n  created: function created() {\n    var _this4 = this;\n\n    this.$on('toggle-collapse', this.handleCollapseToggle);\n    this.$on('mouse-enter-child', function () {\n      _this4.mouseInChild = true;\n      clearTimeout(_this4.timeout);\n    });\n    this.$on('mouse-leave-child', function () {\n      _this4.mouseInChild = false;\n      clearTimeout(_this4.timeout);\n    });\n  },\n  mounted: function mounted() {\n    this.parentMenu.addSubmenu(this);\n    this.rootMenu.addSubmenu(this);\n    this.initPopper();\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.parentMenu.removeSubmenu(this);\n    this.rootMenu.removeSubmenu(this);\n  },\n  render: function render(h) {\n    var _this5 = this;\n\n    var active = this.active,\n        opened = this.opened,\n        paddingStyle = this.paddingStyle,\n        titleStyle = this.titleStyle,\n        backgroundColor = this.backgroundColor,\n        rootMenu = this.rootMenu,\n        currentPlacement = this.currentPlacement,\n        menuTransitionName = this.menuTransitionName,\n        mode = this.mode,\n        disabled = this.disabled,\n        popperClass = this.popperClass,\n        $slots = this.$slots,\n        isFirstLevel = this.isFirstLevel;\n\n\n    var popupMenu = h(\n      'transition',\n      {\n        attrs: { name: menuTransitionName }\n      },\n      [h(\n        'div',\n        {\n          ref: 'menu',\n          directives: [{\n            name: 'show',\n            value: opened\n          }],\n\n          'class': ['el-menu--' + mode, popperClass],\n          on: {\n            'mouseenter': function mouseenter($event) {\n              return _this5.handleMouseenter($event, 100);\n            },\n            'mouseleave': function mouseleave() {\n              return _this5.handleMouseleave(true);\n            },\n            'focus': function focus($event) {\n              return _this5.handleMouseenter($event, 100);\n            }\n          }\n        },\n        [h(\n          'ul',\n          {\n            attrs: {\n              role: 'menu'\n            },\n            'class': ['el-menu el-menu--popup', 'el-menu--popup-' + currentPlacement],\n            style: { backgroundColor: rootMenu.backgroundColor || '' } },\n          [$slots.default]\n        )]\n      )]\n    );\n\n    var inlineMenu = h('el-collapse-transition', [h(\n      'ul',\n      {\n        attrs: {\n          role: 'menu'\n        },\n        'class': 'el-menu el-menu--inline',\n        directives: [{\n          name: 'show',\n          value: opened\n        }],\n\n        style: { backgroundColor: rootMenu.backgroundColor || '' } },\n      [$slots.default]\n    )]);\n\n    var submenuTitleIcon = rootMenu.mode === 'horizontal' && isFirstLevel || rootMenu.mode === 'vertical' && !rootMenu.collapse ? 'el-icon-arrow-down' : 'el-icon-arrow-right';\n\n    return h(\n      'li',\n      {\n        'class': {\n          'el-submenu': true,\n          'is-active': active,\n          'is-opened': opened,\n          'is-disabled': disabled\n        },\n        attrs: { role: 'menuitem',\n          'aria-haspopup': 'true',\n          'aria-expanded': opened\n        },\n        on: {\n          'mouseenter': this.handleMouseenter,\n          'mouseleave': function mouseleave() {\n            return _this5.handleMouseleave(false);\n          },\n          'focus': this.handleMouseenter\n        }\n      },\n      [h(\n        'div',\n        {\n          'class': 'el-submenu__title',\n          ref: 'submenu-title',\n          on: {\n            'click': this.handleClick,\n            'mouseenter': this.handleTitleMouseenter,\n            'mouseleave': this.handleTitleMouseleave\n          },\n\n          style: [paddingStyle, titleStyle, { backgroundColor: backgroundColor }]\n        },\n        [$slots.title, h('i', { 'class': ['el-submenu__icon-arrow', submenuTitleIcon] })]\n      ), this.isMenuPopup ? popupMenu : inlineMenu]\n    );\n  }\n});\n// CONCATENATED MODULE: ./packages/menu/src/submenu.vue?vue&type=script&lang=js&\n /* harmony default export */ var src_submenuvue_type_script_lang_js_ = (submenuvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/menu/src/submenu.vue\nvar submenu_render, submenu_staticRenderFns\n\n\n\n\n/* normalize component */\n\nvar submenu_component = normalizeComponent(\n  src_submenuvue_type_script_lang_js_,\n  submenu_render,\n  submenu_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var submenu_api; }\nsubmenu_component.options.__file = \"packages/menu/src/submenu.vue\"\n/* harmony default export */ var submenu = (submenu_component.exports);\n// CONCATENATED MODULE: ./packages/submenu/index.js\n\n\n/* istanbul ignore next */\nsubmenu.install = function (Vue) {\n  Vue.component(submenu.name, submenu);\n};\n\n/* harmony default export */ var packages_submenu = (submenu);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/menu/src/menu-item.vue?vue&type=template&id=2a5dbfea&\nvar menu_itemvue_type_template_id_2a5dbfea_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"li\",\n    {\n      staticClass: \"el-menu-item\",\n      class: {\n        \"is-active\": _vm.active,\n        \"is-disabled\": _vm.disabled\n      },\n      style: [\n        _vm.paddingStyle,\n        _vm.itemStyle,\n        { backgroundColor: _vm.backgroundColor }\n      ],\n      attrs: { role: \"menuitem\", tabindex: \"-1\" },\n      on: {\n        click: _vm.handleClick,\n        mouseenter: _vm.onMouseEnter,\n        focus: _vm.onMouseEnter,\n        blur: _vm.onMouseLeave,\n        mouseleave: _vm.onMouseLeave\n      }\n    },\n    [\n      _vm.parentMenu.$options.componentName === \"ElMenu\" &&\n      _vm.rootMenu.collapse &&\n      _vm.$slots.title\n        ? _c(\"el-tooltip\", { attrs: { effect: \"dark\", placement: \"right\" } }, [\n            _c(\n              \"div\",\n              { attrs: { slot: \"content\" }, slot: \"content\" },\n              [_vm._t(\"title\")],\n              2\n            ),\n            _c(\n              \"div\",\n              {\n                staticStyle: {\n                  position: \"absolute\",\n                  left: \"0\",\n                  top: \"0\",\n                  height: \"100%\",\n                  width: \"100%\",\n                  display: \"inline-block\",\n                  \"box-sizing\": \"border-box\",\n                  padding: \"0 20px\"\n                }\n              },\n              [_vm._t(\"default\")],\n              2\n            )\n          ])\n        : [_vm._t(\"default\"), _vm._t(\"title\")]\n    ],\n    2\n  )\n}\nvar menu_itemvue_type_template_id_2a5dbfea_staticRenderFns = []\nmenu_itemvue_type_template_id_2a5dbfea_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/menu/src/menu-item.vue?vue&type=template&id=2a5dbfea&\n\n// EXTERNAL MODULE: external \"element-ui/lib/tooltip\"\nvar tooltip_ = __webpack_require__(26);\nvar tooltip_default = /*#__PURE__*/__webpack_require__.n(tooltip_);\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/menu/src/menu-item.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n/* harmony default export */ var menu_itemvue_type_script_lang_js_ = ({\n  name: 'ElMenuItem',\n\n  componentName: 'ElMenuItem',\n\n  mixins: [menu_mixin, emitter_default.a],\n\n  components: { ElTooltip: tooltip_default.a },\n\n  props: {\n    index: {\n      default: null,\n      validator: function validator(val) {\n        return typeof val === 'string' || val === null;\n      }\n    },\n    route: [String, Object],\n    disabled: Boolean\n  },\n  computed: {\n    active: function active() {\n      return this.index === this.rootMenu.activeIndex;\n    },\n    hoverBackground: function hoverBackground() {\n      return this.rootMenu.hoverBackground;\n    },\n    backgroundColor: function backgroundColor() {\n      return this.rootMenu.backgroundColor || '';\n    },\n    activeTextColor: function activeTextColor() {\n      return this.rootMenu.activeTextColor || '';\n    },\n    textColor: function textColor() {\n      return this.rootMenu.textColor || '';\n    },\n    mode: function mode() {\n      return this.rootMenu.mode;\n    },\n    itemStyle: function itemStyle() {\n      var style = {\n        color: this.active ? this.activeTextColor : this.textColor\n      };\n      if (this.mode === 'horizontal' && !this.isNested) {\n        style.borderBottomColor = this.active ? this.rootMenu.activeTextColor ? this.activeTextColor : '' : 'transparent';\n      }\n      return style;\n    },\n    isNested: function isNested() {\n      return this.parentMenu !== this.rootMenu;\n    }\n  },\n  methods: {\n    onMouseEnter: function onMouseEnter() {\n      if (this.mode === 'horizontal' && !this.rootMenu.backgroundColor) return;\n      this.$el.style.backgroundColor = this.hoverBackground;\n    },\n    onMouseLeave: function onMouseLeave() {\n      if (this.mode === 'horizontal' && !this.rootMenu.backgroundColor) return;\n      this.$el.style.backgroundColor = this.backgroundColor;\n    },\n    handleClick: function handleClick() {\n      if (!this.disabled) {\n        this.dispatch('ElMenu', 'item-click', this);\n        this.$emit('click', this);\n      }\n    }\n  },\n  mounted: function mounted() {\n    this.parentMenu.addItem(this);\n    this.rootMenu.addItem(this);\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.parentMenu.removeItem(this);\n    this.rootMenu.removeItem(this);\n  }\n});\n// CONCATENATED MODULE: ./packages/menu/src/menu-item.vue?vue&type=script&lang=js&\n /* harmony default export */ var src_menu_itemvue_type_script_lang_js_ = (menu_itemvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/menu/src/menu-item.vue\n\n\n\n\n\n/* normalize component */\n\nvar menu_item_component = normalizeComponent(\n  src_menu_itemvue_type_script_lang_js_,\n  menu_itemvue_type_template_id_2a5dbfea_render,\n  menu_itemvue_type_template_id_2a5dbfea_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var menu_item_api; }\nmenu_item_component.options.__file = \"packages/menu/src/menu-item.vue\"\n/* harmony default export */ var menu_item = (menu_item_component.exports);\n// CONCATENATED MODULE: ./packages/menu-item/index.js\n\n\n/* istanbul ignore next */\nmenu_item.install = function (Vue) {\n  Vue.component(menu_item.name, menu_item);\n};\n\n/* harmony default export */ var packages_menu_item = (menu_item);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/menu/src/menu-item-group.vue?vue&type=template&id=543b7bdc&\nvar menu_item_groupvue_type_template_id_543b7bdc_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"li\", { staticClass: \"el-menu-item-group\" }, [\n    _c(\n      \"div\",\n      {\n        staticClass: \"el-menu-item-group__title\",\n        style: { paddingLeft: _vm.levelPadding + \"px\" }\n      },\n      [!_vm.$slots.title ? [_vm._v(_vm._s(_vm.title))] : _vm._t(\"title\")],\n      2\n    ),\n    _c(\"ul\", [_vm._t(\"default\")], 2)\n  ])\n}\nvar menu_item_groupvue_type_template_id_543b7bdc_staticRenderFns = []\nmenu_item_groupvue_type_template_id_543b7bdc_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/menu/src/menu-item-group.vue?vue&type=template&id=543b7bdc&\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/menu/src/menu-item-group.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* harmony default export */ var menu_item_groupvue_type_script_lang_js_ = ({\n  name: 'ElMenuItemGroup',\n\n  componentName: 'ElMenuItemGroup',\n\n  inject: ['rootMenu'],\n  props: {\n    title: {\n      type: String\n    }\n  },\n  data: function data() {\n    return {\n      paddingLeft: 20\n    };\n  },\n\n  computed: {\n    levelPadding: function levelPadding() {\n      var padding = 20;\n      var parent = this.$parent;\n      if (this.rootMenu.collapse) return 20;\n      while (parent && parent.$options.componentName !== 'ElMenu') {\n        if (parent.$options.componentName === 'ElSubmenu') {\n          padding += 20;\n        }\n        parent = parent.$parent;\n      }\n      return padding;\n    }\n  }\n});\n// CONCATENATED MODULE: ./packages/menu/src/menu-item-group.vue?vue&type=script&lang=js&\n /* harmony default export */ var src_menu_item_groupvue_type_script_lang_js_ = (menu_item_groupvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/menu/src/menu-item-group.vue\n\n\n\n\n\n/* normalize component */\n\nvar menu_item_group_component = normalizeComponent(\n  src_menu_item_groupvue_type_script_lang_js_,\n  menu_item_groupvue_type_template_id_543b7bdc_render,\n  menu_item_groupvue_type_template_id_543b7bdc_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var menu_item_group_api; }\nmenu_item_group_component.options.__file = \"packages/menu/src/menu-item-group.vue\"\n/* harmony default export */ var menu_item_group = (menu_item_group_component.exports);\n// CONCATENATED MODULE: ./packages/menu-item-group/index.js\n\n\n/* istanbul ignore next */\nmenu_item_group.install = function (Vue) {\n  Vue.component(menu_item_group.name, menu_item_group);\n};\n\n/* harmony default export */ var packages_menu_item_group = (menu_item_group);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/input/src/input.vue?vue&type=template&id=343dd774&\nvar inputvue_type_template_id_343dd774_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    {\n      class: [\n        _vm.type === \"textarea\" ? \"el-textarea\" : \"el-input\",\n        _vm.inputSize ? \"el-input--\" + _vm.inputSize : \"\",\n        {\n          \"is-disabled\": _vm.inputDisabled,\n          \"is-exceed\": _vm.inputExceed,\n          \"el-input-group\": _vm.$slots.prepend || _vm.$slots.append,\n          \"el-input-group--append\": _vm.$slots.append,\n          \"el-input-group--prepend\": _vm.$slots.prepend,\n          \"el-input--prefix\": _vm.$slots.prefix || _vm.prefixIcon,\n          \"el-input--suffix\":\n            _vm.$slots.suffix ||\n            _vm.suffixIcon ||\n            _vm.clearable ||\n            _vm.showPassword\n        }\n      ],\n      on: {\n        mouseenter: function($event) {\n          _vm.hovering = true\n        },\n        mouseleave: function($event) {\n          _vm.hovering = false\n        }\n      }\n    },\n    [\n      _vm.type !== \"textarea\"\n        ? [\n            _vm.$slots.prepend\n              ? _c(\n                  \"div\",\n                  { staticClass: \"el-input-group__prepend\" },\n                  [_vm._t(\"prepend\")],\n                  2\n                )\n              : _vm._e(),\n            _vm.type !== \"textarea\"\n              ? _c(\n                  \"input\",\n                  _vm._b(\n                    {\n                      ref: \"input\",\n                      staticClass: \"el-input__inner\",\n                      attrs: {\n                        tabindex: _vm.tabindex,\n                        type: _vm.showPassword\n                          ? _vm.passwordVisible\n                            ? \"text\"\n                            : \"password\"\n                          : _vm.type,\n                        disabled: _vm.inputDisabled,\n                        readonly: _vm.readonly,\n                        autocomplete: _vm.autoComplete || _vm.autocomplete,\n                        \"aria-label\": _vm.label\n                      },\n                      on: {\n                        compositionstart: _vm.handleCompositionStart,\n                        compositionupdate: _vm.handleCompositionUpdate,\n                        compositionend: _vm.handleCompositionEnd,\n                        input: _vm.handleInput,\n                        focus: _vm.handleFocus,\n                        blur: _vm.handleBlur,\n                        change: _vm.handleChange\n                      }\n                    },\n                    \"input\",\n                    _vm.$attrs,\n                    false\n                  )\n                )\n              : _vm._e(),\n            _vm.$slots.prefix || _vm.prefixIcon\n              ? _c(\n                  \"span\",\n                  { staticClass: \"el-input__prefix\" },\n                  [\n                    _vm._t(\"prefix\"),\n                    _vm.prefixIcon\n                      ? _c(\"i\", {\n                          staticClass: \"el-input__icon\",\n                          class: _vm.prefixIcon\n                        })\n                      : _vm._e()\n                  ],\n                  2\n                )\n              : _vm._e(),\n            _vm.getSuffixVisible()\n              ? _c(\"span\", { staticClass: \"el-input__suffix\" }, [\n                  _c(\n                    \"span\",\n                    { staticClass: \"el-input__suffix-inner\" },\n                    [\n                      !_vm.showClear ||\n                      !_vm.showPwdVisible ||\n                      !_vm.isWordLimitVisible\n                        ? [\n                            _vm._t(\"suffix\"),\n                            _vm.suffixIcon\n                              ? _c(\"i\", {\n                                  staticClass: \"el-input__icon\",\n                                  class: _vm.suffixIcon\n                                })\n                              : _vm._e()\n                          ]\n                        : _vm._e(),\n                      _vm.showClear\n                        ? _c(\"i\", {\n                            staticClass:\n                              \"el-input__icon el-icon-circle-close el-input__clear\",\n                            on: {\n                              mousedown: function($event) {\n                                $event.preventDefault()\n                              },\n                              click: _vm.clear\n                            }\n                          })\n                        : _vm._e(),\n                      _vm.showPwdVisible\n                        ? _c(\"i\", {\n                            staticClass:\n                              \"el-input__icon el-icon-view el-input__clear\",\n                            on: { click: _vm.handlePasswordVisible }\n                          })\n                        : _vm._e(),\n                      _vm.isWordLimitVisible\n                        ? _c(\"span\", { staticClass: \"el-input__count\" }, [\n                            _c(\n                              \"span\",\n                              { staticClass: \"el-input__count-inner\" },\n                              [\n                                _vm._v(\n                                  \"\\n            \" +\n                                    _vm._s(_vm.textLength) +\n                                    \"/\" +\n                                    _vm._s(_vm.upperLimit) +\n                                    \"\\n          \"\n                                )\n                              ]\n                            )\n                          ])\n                        : _vm._e()\n                    ],\n                    2\n                  ),\n                  _vm.validateState\n                    ? _c(\"i\", {\n                        staticClass: \"el-input__icon\",\n                        class: [\"el-input__validateIcon\", _vm.validateIcon]\n                      })\n                    : _vm._e()\n                ])\n              : _vm._e(),\n            _vm.$slots.append\n              ? _c(\n                  \"div\",\n                  { staticClass: \"el-input-group__append\" },\n                  [_vm._t(\"append\")],\n                  2\n                )\n              : _vm._e()\n          ]\n        : _c(\n            \"textarea\",\n            _vm._b(\n              {\n                ref: \"textarea\",\n                staticClass: \"el-textarea__inner\",\n                style: _vm.textareaStyle,\n                attrs: {\n                  tabindex: _vm.tabindex,\n                  disabled: _vm.inputDisabled,\n                  readonly: _vm.readonly,\n                  autocomplete: _vm.autoComplete || _vm.autocomplete,\n                  \"aria-label\": _vm.label\n                },\n                on: {\n                  compositionstart: _vm.handleCompositionStart,\n                  compositionupdate: _vm.handleCompositionUpdate,\n                  compositionend: _vm.handleCompositionEnd,\n                  input: _vm.handleInput,\n                  focus: _vm.handleFocus,\n                  blur: _vm.handleBlur,\n                  change: _vm.handleChange\n                }\n              },\n              \"textarea\",\n              _vm.$attrs,\n              false\n            )\n          ),\n      _vm.isWordLimitVisible && _vm.type === \"textarea\"\n        ? _c(\"span\", { staticClass: \"el-input__count\" }, [\n            _vm._v(_vm._s(_vm.textLength) + \"/\" + _vm._s(_vm.upperLimit))\n          ])\n        : _vm._e()\n    ],\n    2\n  )\n}\nvar inputvue_type_template_id_343dd774_staticRenderFns = []\ninputvue_type_template_id_343dd774_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/input/src/input.vue?vue&type=template&id=343dd774&\n\n// CONCATENATED MODULE: ./packages/input/src/calcTextareaHeight.js\nvar hiddenTextarea = void 0;\n\nvar HIDDEN_STYLE = '\\n  height:0 !important;\\n  visibility:hidden !important;\\n  overflow:hidden !important;\\n  position:absolute !important;\\n  z-index:-1000 !important;\\n  top:0 !important;\\n  right:0 !important\\n';\n\nvar CONTEXT_STYLE = ['letter-spacing', 'line-height', 'padding-top', 'padding-bottom', 'font-family', 'font-weight', 'font-size', 'text-rendering', 'text-transform', 'width', 'text-indent', 'padding-left', 'padding-right', 'border-width', 'box-sizing'];\n\nfunction calculateNodeStyling(targetElement) {\n  var style = window.getComputedStyle(targetElement);\n\n  var boxSizing = style.getPropertyValue('box-sizing');\n\n  var paddingSize = parseFloat(style.getPropertyValue('padding-bottom')) + parseFloat(style.getPropertyValue('padding-top'));\n\n  var borderSize = parseFloat(style.getPropertyValue('border-bottom-width')) + parseFloat(style.getPropertyValue('border-top-width'));\n\n  var contextStyle = CONTEXT_STYLE.map(function (name) {\n    return name + ':' + style.getPropertyValue(name);\n  }).join(';');\n\n  return { contextStyle: contextStyle, paddingSize: paddingSize, borderSize: borderSize, boxSizing: boxSizing };\n}\n\nfunction calcTextareaHeight(targetElement) {\n  var minRows = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  var maxRows = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n  if (!hiddenTextarea) {\n    hiddenTextarea = document.createElement('textarea');\n    document.body.appendChild(hiddenTextarea);\n  }\n\n  var _calculateNodeStyling = calculateNodeStyling(targetElement),\n      paddingSize = _calculateNodeStyling.paddingSize,\n      borderSize = _calculateNodeStyling.borderSize,\n      boxSizing = _calculateNodeStyling.boxSizing,\n      contextStyle = _calculateNodeStyling.contextStyle;\n\n  hiddenTextarea.setAttribute('style', contextStyle + ';' + HIDDEN_STYLE);\n  hiddenTextarea.value = targetElement.value || targetElement.placeholder || '';\n\n  var height = hiddenTextarea.scrollHeight;\n  var result = {};\n\n  if (boxSizing === 'border-box') {\n    height = height + borderSize;\n  } else if (boxSizing === 'content-box') {\n    height = height - paddingSize;\n  }\n\n  hiddenTextarea.value = '';\n  var singleRowHeight = hiddenTextarea.scrollHeight - paddingSize;\n\n  if (minRows !== null) {\n    var minHeight = singleRowHeight * minRows;\n    if (boxSizing === 'border-box') {\n      minHeight = minHeight + paddingSize + borderSize;\n    }\n    height = Math.max(minHeight, height);\n    result.minHeight = minHeight + 'px';\n  }\n  if (maxRows !== null) {\n    var maxHeight = singleRowHeight * maxRows;\n    if (boxSizing === 'border-box') {\n      maxHeight = maxHeight + paddingSize + borderSize;\n    }\n    height = Math.min(maxHeight, height);\n  }\n  result.height = height + 'px';\n  hiddenTextarea.parentNode && hiddenTextarea.parentNode.removeChild(hiddenTextarea);\n  hiddenTextarea = null;\n  return result;\n};\n// EXTERNAL MODULE: external \"element-ui/lib/utils/merge\"\nvar merge_ = __webpack_require__(7);\nvar merge_default = /*#__PURE__*/__webpack_require__.n(merge_);\n\n// EXTERNAL MODULE: external \"element-ui/lib/utils/shared\"\nvar shared_ = __webpack_require__(19);\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/input/src/input.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n\n\n/* harmony default export */ var inputvue_type_script_lang_js_ = ({\n  name: 'ElInput',\n\n  componentName: 'ElInput',\n\n  mixins: [emitter_default.a, migrating_default.a],\n\n  inheritAttrs: false,\n\n  inject: {\n    elForm: {\n      default: ''\n    },\n    elFormItem: {\n      default: ''\n    }\n  },\n\n  data: function data() {\n    return {\n      textareaCalcStyle: {},\n      hovering: false,\n      focused: false,\n      isComposing: false,\n      passwordVisible: false\n    };\n  },\n\n\n  props: {\n    value: [String, Number],\n    size: String,\n    resize: String,\n    form: String,\n    disabled: Boolean,\n    readonly: Boolean,\n    type: {\n      type: String,\n      default: 'text'\n    },\n    autosize: {\n      type: [Boolean, Object],\n      default: false\n    },\n    autocomplete: {\n      type: String,\n      default: 'off'\n    },\n    /** @Deprecated in next major version */\n    autoComplete: {\n      type: String,\n      validator: function validator(val) {\n          false && false;\n        return true;\n      }\n    },\n    validateEvent: {\n      type: Boolean,\n      default: true\n    },\n    suffixIcon: String,\n    prefixIcon: String,\n    label: String,\n    clearable: {\n      type: Boolean,\n      default: false\n    },\n    showPassword: {\n      type: Boolean,\n      default: false\n    },\n    showWordLimit: {\n      type: Boolean,\n      default: false\n    },\n    tabindex: String\n  },\n\n  computed: {\n    _elFormItemSize: function _elFormItemSize() {\n      return (this.elFormItem || {}).elFormItemSize;\n    },\n    validateState: function validateState() {\n      return this.elFormItem ? this.elFormItem.validateState : '';\n    },\n    needStatusIcon: function needStatusIcon() {\n      return this.elForm ? this.elForm.statusIcon : false;\n    },\n    validateIcon: function validateIcon() {\n      return {\n        validating: 'el-icon-loading',\n        success: 'el-icon-circle-check',\n        error: 'el-icon-circle-close'\n      }[this.validateState];\n    },\n    textareaStyle: function textareaStyle() {\n      return merge_default()({}, this.textareaCalcStyle, { resize: this.resize });\n    },\n    inputSize: function inputSize() {\n      return this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;\n    },\n    inputDisabled: function inputDisabled() {\n      return this.disabled || (this.elForm || {}).disabled;\n    },\n    nativeInputValue: function nativeInputValue() {\n      return this.value === null || this.value === undefined ? '' : String(this.value);\n    },\n    showClear: function showClear() {\n      return this.clearable && !this.inputDisabled && !this.readonly && this.nativeInputValue && (this.focused || this.hovering);\n    },\n    showPwdVisible: function showPwdVisible() {\n      return this.showPassword && !this.inputDisabled && !this.readonly && (!!this.nativeInputValue || this.focused);\n    },\n    isWordLimitVisible: function isWordLimitVisible() {\n      return this.showWordLimit && this.$attrs.maxlength && (this.type === 'text' || this.type === 'textarea') && !this.inputDisabled && !this.readonly && !this.showPassword;\n    },\n    upperLimit: function upperLimit() {\n      return this.$attrs.maxlength;\n    },\n    textLength: function textLength() {\n      if (typeof this.value === 'number') {\n        return String(this.value).length;\n      }\n\n      return (this.value || '').length;\n    },\n    inputExceed: function inputExceed() {\n      // show exceed style if length of initial value greater then maxlength\n      return this.isWordLimitVisible && this.textLength > this.upperLimit;\n    }\n  },\n\n  watch: {\n    value: function value(val) {\n      this.$nextTick(this.resizeTextarea);\n      if (this.validateEvent) {\n        this.dispatch('ElFormItem', 'el.form.change', [val]);\n      }\n    },\n\n    // native input value is set explicitly\n    // do not use v-model / :value in template\n    // see: https://github.com/ElemeFE/element/issues/14521\n    nativeInputValue: function nativeInputValue() {\n      this.setNativeInputValue();\n    },\n\n    // when change between <input> and <textarea>,\n    // update DOM dependent value and styles\n    // https://github.com/ElemeFE/element/issues/14857\n    type: function type() {\n      var _this = this;\n\n      this.$nextTick(function () {\n        _this.setNativeInputValue();\n        _this.resizeTextarea();\n        _this.updateIconOffset();\n      });\n    }\n  },\n\n  methods: {\n    focus: function focus() {\n      this.getInput().focus();\n    },\n    blur: function blur() {\n      this.getInput().blur();\n    },\n    getMigratingConfig: function getMigratingConfig() {\n      return {\n        props: {\n          'icon': 'icon is removed, use suffix-icon / prefix-icon instead.',\n          'on-icon-click': 'on-icon-click is removed.'\n        },\n        events: {\n          'click': 'click is removed.'\n        }\n      };\n    },\n    handleBlur: function handleBlur(event) {\n      this.focused = false;\n      this.$emit('blur', event);\n      if (this.validateEvent) {\n        this.dispatch('ElFormItem', 'el.form.blur', [this.value]);\n      }\n    },\n    select: function select() {\n      this.getInput().select();\n    },\n    resizeTextarea: function resizeTextarea() {\n      if (this.$isServer) return;\n      var autosize = this.autosize,\n          type = this.type;\n\n      if (type !== 'textarea') return;\n      if (!autosize) {\n        this.textareaCalcStyle = {\n          minHeight: calcTextareaHeight(this.$refs.textarea).minHeight\n        };\n        return;\n      }\n      var minRows = autosize.minRows;\n      var maxRows = autosize.maxRows;\n\n      this.textareaCalcStyle = calcTextareaHeight(this.$refs.textarea, minRows, maxRows);\n    },\n    setNativeInputValue: function setNativeInputValue() {\n      var input = this.getInput();\n      if (!input) return;\n      if (input.value === this.nativeInputValue) return;\n      input.value = this.nativeInputValue;\n    },\n    handleFocus: function handleFocus(event) {\n      this.focused = true;\n      this.$emit('focus', event);\n    },\n    handleCompositionStart: function handleCompositionStart() {\n      this.isComposing = true;\n    },\n    handleCompositionUpdate: function handleCompositionUpdate(event) {\n      var text = event.target.value;\n      var lastCharacter = text[text.length - 1] || '';\n      this.isComposing = !Object(shared_[\"isKorean\"])(lastCharacter);\n    },\n    handleCompositionEnd: function handleCompositionEnd(event) {\n      if (this.isComposing) {\n        this.isComposing = false;\n        this.handleInput(event);\n      }\n    },\n    handleInput: function handleInput(event) {\n      // should not emit input during composition\n      // see: https://github.com/ElemeFE/element/issues/10516\n      if (this.isComposing) return;\n\n      // hack for https://github.com/ElemeFE/element/issues/8548\n      // should remove the following line when we don't support IE\n      if (event.target.value === this.nativeInputValue) return;\n\n      this.$emit('input', event.target.value);\n\n      // ensure native input value is controlled\n      // see: https://github.com/ElemeFE/element/issues/12850\n      this.$nextTick(this.setNativeInputValue);\n    },\n    handleChange: function handleChange(event) {\n      this.$emit('change', event.target.value);\n    },\n    calcIconOffset: function calcIconOffset(place) {\n      var elList = [].slice.call(this.$el.querySelectorAll('.el-input__' + place) || []);\n      if (!elList.length) return;\n      var el = null;\n      for (var i = 0; i < elList.length; i++) {\n        if (elList[i].parentNode === this.$el) {\n          el = elList[i];\n          break;\n        }\n      }\n      if (!el) return;\n      var pendantMap = {\n        suffix: 'append',\n        prefix: 'prepend'\n      };\n\n      var pendant = pendantMap[place];\n      if (this.$slots[pendant]) {\n        el.style.transform = 'translateX(' + (place === 'suffix' ? '-' : '') + this.$el.querySelector('.el-input-group__' + pendant).offsetWidth + 'px)';\n      } else {\n        el.removeAttribute('style');\n      }\n    },\n    updateIconOffset: function updateIconOffset() {\n      this.calcIconOffset('prefix');\n      this.calcIconOffset('suffix');\n    },\n    clear: function clear() {\n      this.$emit('input', '');\n      this.$emit('change', '');\n      this.$emit('clear');\n    },\n    handlePasswordVisible: function handlePasswordVisible() {\n      var _this2 = this;\n\n      this.passwordVisible = !this.passwordVisible;\n      this.$nextTick(function () {\n        _this2.focus();\n      });\n    },\n    getInput: function getInput() {\n      return this.$refs.input || this.$refs.textarea;\n    },\n    getSuffixVisible: function getSuffixVisible() {\n      return this.$slots.suffix || this.suffixIcon || this.showClear || this.showPassword || this.isWordLimitVisible || this.validateState && this.needStatusIcon;\n    }\n  },\n\n  created: function created() {\n    this.$on('inputSelect', this.select);\n  },\n  mounted: function mounted() {\n    this.setNativeInputValue();\n    this.resizeTextarea();\n    this.updateIconOffset();\n  },\n  updated: function updated() {\n    this.$nextTick(this.updateIconOffset);\n  }\n});\n// CONCATENATED MODULE: ./packages/input/src/input.vue?vue&type=script&lang=js&\n /* harmony default export */ var src_inputvue_type_script_lang_js_ = (inputvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/input/src/input.vue\n\n\n\n\n\n/* normalize component */\n\nvar input_component = normalizeComponent(\n  src_inputvue_type_script_lang_js_,\n  inputvue_type_template_id_343dd774_render,\n  inputvue_type_template_id_343dd774_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var input_api; }\ninput_component.options.__file = \"packages/input/src/input.vue\"\n/* harmony default export */ var src_input = (input_component.exports);\n// CONCATENATED MODULE: ./packages/input/index.js\n\n\n/* istanbul ignore next */\nsrc_input.install = function (Vue) {\n  Vue.component(src_input.name, src_input);\n};\n\n/* harmony default export */ var packages_input = (src_input);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/input-number/src/input-number.vue?vue&type=template&id=42f8cf66&\nvar input_numbervue_type_template_id_42f8cf66_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    {\n      class: [\n        \"el-input-number\",\n        _vm.inputNumberSize ? \"el-input-number--\" + _vm.inputNumberSize : \"\",\n        { \"is-disabled\": _vm.inputNumberDisabled },\n        { \"is-without-controls\": !_vm.controls },\n        { \"is-controls-right\": _vm.controlsAtRight }\n      ],\n      on: {\n        dragstart: function($event) {\n          $event.preventDefault()\n        }\n      }\n    },\n    [\n      _vm.controls\n        ? _c(\n            \"span\",\n            {\n              directives: [\n                {\n                  name: \"repeat-click\",\n                  rawName: \"v-repeat-click\",\n                  value: _vm.decrease,\n                  expression: \"decrease\"\n                }\n              ],\n              staticClass: \"el-input-number__decrease\",\n              class: { \"is-disabled\": _vm.minDisabled },\n              attrs: { role: \"button\" },\n              on: {\n                keydown: function($event) {\n                  if (\n                    !(\"button\" in $event) &&\n                    _vm._k($event.keyCode, \"enter\", 13, $event.key, \"Enter\")\n                  ) {\n                    return null\n                  }\n                  return _vm.decrease($event)\n                }\n              }\n            },\n            [\n              _c(\"i\", {\n                class:\n                  \"el-icon-\" + (_vm.controlsAtRight ? \"arrow-down\" : \"minus\")\n              })\n            ]\n          )\n        : _vm._e(),\n      _vm.controls\n        ? _c(\n            \"span\",\n            {\n              directives: [\n                {\n                  name: \"repeat-click\",\n                  rawName: \"v-repeat-click\",\n                  value: _vm.increase,\n                  expression: \"increase\"\n                }\n              ],\n              staticClass: \"el-input-number__increase\",\n              class: { \"is-disabled\": _vm.maxDisabled },\n              attrs: { role: \"button\" },\n              on: {\n                keydown: function($event) {\n                  if (\n                    !(\"button\" in $event) &&\n                    _vm._k($event.keyCode, \"enter\", 13, $event.key, \"Enter\")\n                  ) {\n                    return null\n                  }\n                  return _vm.increase($event)\n                }\n              }\n            },\n            [\n              _c(\"i\", {\n                class: \"el-icon-\" + (_vm.controlsAtRight ? \"arrow-up\" : \"plus\")\n              })\n            ]\n          )\n        : _vm._e(),\n      _c(\"el-input\", {\n        ref: \"input\",\n        attrs: {\n          value: _vm.displayValue,\n          placeholder: _vm.placeholder,\n          disabled: _vm.inputNumberDisabled,\n          size: _vm.inputNumberSize,\n          max: _vm.max,\n          min: _vm.min,\n          name: _vm.name,\n          label: _vm.label\n        },\n        on: {\n          blur: _vm.handleBlur,\n          focus: _vm.handleFocus,\n          input: _vm.handleInput,\n          change: _vm.handleInputChange\n        },\n        nativeOn: {\n          keydown: [\n            function($event) {\n              if (\n                !(\"button\" in $event) &&\n                _vm._k($event.keyCode, \"up\", 38, $event.key, [\"Up\", \"ArrowUp\"])\n              ) {\n                return null\n              }\n              $event.preventDefault()\n              return _vm.increase($event)\n            },\n            function($event) {\n              if (\n                !(\"button\" in $event) &&\n                _vm._k($event.keyCode, \"down\", 40, $event.key, [\n                  \"Down\",\n                  \"ArrowDown\"\n                ])\n              ) {\n                return null\n              }\n              $event.preventDefault()\n              return _vm.decrease($event)\n            }\n          ]\n        }\n      })\n    ],\n    1\n  )\n}\nvar input_numbervue_type_template_id_42f8cf66_staticRenderFns = []\ninput_numbervue_type_template_id_42f8cf66_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/input-number/src/input-number.vue?vue&type=template&id=42f8cf66&\n\n// CONCATENATED MODULE: ./src/directives/repeat-click.js\n\n\n/* harmony default export */ var repeat_click = ({\n  bind: function bind(el, binding, vnode) {\n    var interval = null;\n    var startTime = void 0;\n    var handler = function handler() {\n      return vnode.context[binding.expression].apply();\n    };\n    var clear = function clear() {\n      if (Date.now() - startTime < 100) {\n        handler();\n      }\n      clearInterval(interval);\n      interval = null;\n    };\n\n    Object(dom_[\"on\"])(el, 'mousedown', function (e) {\n      if (e.button !== 0) return;\n      startTime = Date.now();\n      Object(dom_[\"once\"])(document, 'mouseup', clear);\n      clearInterval(interval);\n      interval = setInterval(handler, 100);\n    });\n  }\n});\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/input-number/src/input-number.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n/* harmony default export */ var input_numbervue_type_script_lang_js_ = ({\n  name: 'ElInputNumber',\n  mixins: [focus_default()('input')],\n  inject: {\n    elForm: {\n      default: ''\n    },\n    elFormItem: {\n      default: ''\n    }\n  },\n  directives: {\n    repeatClick: repeat_click\n  },\n  components: {\n    ElInput: input_default.a\n  },\n  props: {\n    step: {\n      type: Number,\n      default: 1\n    },\n    stepStrictly: {\n      type: Boolean,\n      default: false\n    },\n    max: {\n      type: Number,\n      default: Infinity\n    },\n    min: {\n      type: Number,\n      default: -Infinity\n    },\n    value: {},\n    disabled: Boolean,\n    size: String,\n    controls: {\n      type: Boolean,\n      default: true\n    },\n    controlsPosition: {\n      type: String,\n      default: ''\n    },\n    name: String,\n    label: String,\n    placeholder: String,\n    precision: {\n      type: Number,\n      validator: function validator(val) {\n        return val >= 0 && val === parseInt(val, 10);\n      }\n    }\n  },\n  data: function data() {\n    return {\n      currentValue: 0,\n      userInput: null\n    };\n  },\n\n  watch: {\n    value: {\n      immediate: true,\n      handler: function handler(value) {\n        var newVal = value === undefined ? value : Number(value);\n        if (newVal !== undefined) {\n          if (isNaN(newVal)) {\n            return;\n          }\n\n          if (this.stepStrictly) {\n            var stepPrecision = this.getPrecision(this.step);\n            var precisionFactor = Math.pow(10, stepPrecision);\n            newVal = Math.round(newVal / this.step) * precisionFactor * this.step / precisionFactor;\n          }\n\n          if (this.precision !== undefined) {\n            newVal = this.toPrecision(newVal, this.precision);\n          }\n        }\n        if (newVal >= this.max) newVal = this.max;\n        if (newVal <= this.min) newVal = this.min;\n        this.currentValue = newVal;\n        this.userInput = null;\n        this.$emit('input', newVal);\n      }\n    }\n  },\n  computed: {\n    minDisabled: function minDisabled() {\n      return this._decrease(this.value, this.step) < this.min;\n    },\n    maxDisabled: function maxDisabled() {\n      return this._increase(this.value, this.step) > this.max;\n    },\n    numPrecision: function numPrecision() {\n      var value = this.value,\n          step = this.step,\n          getPrecision = this.getPrecision,\n          precision = this.precision;\n\n      var stepPrecision = getPrecision(step);\n      if (precision !== undefined) {\n        if (stepPrecision > precision) {\n          console.warn('[Element Warn][InputNumber]precision should not be less than the decimal places of step');\n        }\n        return precision;\n      } else {\n        return Math.max(getPrecision(value), stepPrecision);\n      }\n    },\n    controlsAtRight: function controlsAtRight() {\n      return this.controls && this.controlsPosition === 'right';\n    },\n    _elFormItemSize: function _elFormItemSize() {\n      return (this.elFormItem || {}).elFormItemSize;\n    },\n    inputNumberSize: function inputNumberSize() {\n      return this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;\n    },\n    inputNumberDisabled: function inputNumberDisabled() {\n      return this.disabled || !!(this.elForm || {}).disabled;\n    },\n    displayValue: function displayValue() {\n      if (this.userInput !== null) {\n        return this.userInput;\n      }\n\n      var currentValue = this.currentValue;\n\n      if (typeof currentValue === 'number') {\n        if (this.stepStrictly) {\n          var stepPrecision = this.getPrecision(this.step);\n          var precisionFactor = Math.pow(10, stepPrecision);\n          currentValue = Math.round(currentValue / this.step) * precisionFactor * this.step / precisionFactor;\n        }\n\n        if (this.precision !== undefined) {\n          currentValue = currentValue.toFixed(this.precision);\n        }\n      }\n\n      return currentValue;\n    }\n  },\n  methods: {\n    toPrecision: function toPrecision(num, precision) {\n      if (precision === undefined) precision = this.numPrecision;\n      return parseFloat(Math.round(num * Math.pow(10, precision)) / Math.pow(10, precision));\n    },\n    getPrecision: function getPrecision(value) {\n      if (value === undefined) return 0;\n      var valueString = value.toString();\n      var dotPosition = valueString.indexOf('.');\n      var precision = 0;\n      if (dotPosition !== -1) {\n        precision = valueString.length - dotPosition - 1;\n      }\n      return precision;\n    },\n    _increase: function _increase(val, step) {\n      if (typeof val !== 'number' && val !== undefined) return this.currentValue;\n\n      var precisionFactor = Math.pow(10, this.numPrecision);\n      // Solve the accuracy problem of JS decimal calculation by converting the value to integer.\n      return this.toPrecision((precisionFactor * val + precisionFactor * step) / precisionFactor);\n    },\n    _decrease: function _decrease(val, step) {\n      if (typeof val !== 'number' && val !== undefined) return this.currentValue;\n\n      var precisionFactor = Math.pow(10, this.numPrecision);\n\n      return this.toPrecision((precisionFactor * val - precisionFactor * step) / precisionFactor);\n    },\n    increase: function increase() {\n      if (this.inputNumberDisabled || this.maxDisabled) return;\n      var value = this.value || 0;\n      var newVal = this._increase(value, this.step);\n      this.setCurrentValue(newVal);\n    },\n    decrease: function decrease() {\n      if (this.inputNumberDisabled || this.minDisabled) return;\n      var value = this.value || 0;\n      var newVal = this._decrease(value, this.step);\n      this.setCurrentValue(newVal);\n    },\n    handleBlur: function handleBlur(event) {\n      this.$emit('blur', event);\n    },\n    handleFocus: function handleFocus(event) {\n      this.$emit('focus', event);\n    },\n    setCurrentValue: function setCurrentValue(newVal) {\n      var oldVal = this.currentValue;\n      if (typeof newVal === 'number' && this.precision !== undefined) {\n        newVal = this.toPrecision(newVal, this.precision);\n      }\n      if (newVal >= this.max) newVal = this.max;\n      if (newVal <= this.min) newVal = this.min;\n      if (oldVal === newVal) return;\n      this.userInput = null;\n      this.$emit('input', newVal);\n      this.$emit('change', newVal, oldVal);\n      this.currentValue = newVal;\n    },\n    handleInput: function handleInput(value) {\n      this.userInput = value;\n    },\n    handleInputChange: function handleInputChange(value) {\n      var newVal = value === '' ? undefined : Number(value);\n      if (!isNaN(newVal) || value === '') {\n        this.setCurrentValue(newVal);\n      }\n      this.userInput = null;\n    },\n    select: function select() {\n      this.$refs.input.select();\n    }\n  },\n  mounted: function mounted() {\n    var innerInput = this.$refs.input.$refs.input;\n    innerInput.setAttribute('role', 'spinbutton');\n    innerInput.setAttribute('aria-valuemax', this.max);\n    innerInput.setAttribute('aria-valuemin', this.min);\n    innerInput.setAttribute('aria-valuenow', this.currentValue);\n    innerInput.setAttribute('aria-disabled', this.inputNumberDisabled);\n  },\n  updated: function updated() {\n    if (!this.$refs || !this.$refs.input) return;\n    var innerInput = this.$refs.input.$refs.input;\n    innerInput.setAttribute('aria-valuenow', this.currentValue);\n  }\n});\n// CONCATENATED MODULE: ./packages/input-number/src/input-number.vue?vue&type=script&lang=js&\n /* harmony default export */ var src_input_numbervue_type_script_lang_js_ = (input_numbervue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/input-number/src/input-number.vue\n\n\n\n\n\n/* normalize component */\n\nvar input_number_component = normalizeComponent(\n  src_input_numbervue_type_script_lang_js_,\n  input_numbervue_type_template_id_42f8cf66_render,\n  input_numbervue_type_template_id_42f8cf66_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var input_number_api; }\ninput_number_component.options.__file = \"packages/input-number/src/input-number.vue\"\n/* harmony default export */ var input_number = (input_number_component.exports);\n// CONCATENATED MODULE: ./packages/input-number/index.js\n\n\n/* istanbul ignore next */\ninput_number.install = function (Vue) {\n  Vue.component(input_number.name, input_number);\n};\n\n/* harmony default export */ var packages_input_number = (input_number);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/radio/src/radio.vue?vue&type=template&id=69cd6268&\nvar radiovue_type_template_id_69cd6268_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"label\",\n    {\n      staticClass: \"el-radio\",\n      class: [\n        _vm.border && _vm.radioSize ? \"el-radio--\" + _vm.radioSize : \"\",\n        { \"is-disabled\": _vm.isDisabled },\n        { \"is-focus\": _vm.focus },\n        { \"is-bordered\": _vm.border },\n        { \"is-checked\": _vm.model === _vm.label }\n      ],\n      attrs: {\n        role: \"radio\",\n        \"aria-checked\": _vm.model === _vm.label,\n        \"aria-disabled\": _vm.isDisabled,\n        tabindex: _vm.tabIndex\n      },\n      on: {\n        keydown: function($event) {\n          if (\n            !(\"button\" in $event) &&\n            _vm._k($event.keyCode, \"space\", 32, $event.key, [\" \", \"Spacebar\"])\n          ) {\n            return null\n          }\n          $event.stopPropagation()\n          $event.preventDefault()\n          _vm.model = _vm.isDisabled ? _vm.model : _vm.label\n        }\n      }\n    },\n    [\n      _c(\n        \"span\",\n        {\n          staticClass: \"el-radio__input\",\n          class: {\n            \"is-disabled\": _vm.isDisabled,\n            \"is-checked\": _vm.model === _vm.label\n          }\n        },\n        [\n          _c(\"span\", { staticClass: \"el-radio__inner\" }),\n          _c(\"input\", {\n            directives: [\n              {\n                name: \"model\",\n                rawName: \"v-model\",\n                value: _vm.model,\n                expression: \"model\"\n              }\n            ],\n            ref: \"radio\",\n            staticClass: \"el-radio__original\",\n            attrs: {\n              type: \"radio\",\n              \"aria-hidden\": \"true\",\n              name: _vm.name,\n              disabled: _vm.isDisabled,\n              tabindex: \"-1\",\n              autocomplete: \"off\"\n            },\n            domProps: {\n              value: _vm.label,\n              checked: _vm._q(_vm.model, _vm.label)\n            },\n            on: {\n              focus: function($event) {\n                _vm.focus = true\n              },\n              blur: function($event) {\n                _vm.focus = false\n              },\n              change: [\n                function($event) {\n                  _vm.model = _vm.label\n                },\n                _vm.handleChange\n              ]\n            }\n          })\n        ]\n      ),\n      _c(\n        \"span\",\n        {\n          staticClass: \"el-radio__label\",\n          on: {\n            keydown: function($event) {\n              $event.stopPropagation()\n            }\n          }\n        },\n        [\n          _vm._t(\"default\"),\n          !_vm.$slots.default ? [_vm._v(_vm._s(_vm.label))] : _vm._e()\n        ],\n        2\n      )\n    ]\n  )\n}\nvar radiovue_type_template_id_69cd6268_staticRenderFns = []\nradiovue_type_template_id_69cd6268_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/radio/src/radio.vue?vue&type=template&id=69cd6268&\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/radio/src/radio.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n/* harmony default export */ var radiovue_type_script_lang_js_ = ({\n  name: 'ElRadio',\n\n  mixins: [emitter_default.a],\n\n  inject: {\n    elForm: {\n      default: ''\n    },\n\n    elFormItem: {\n      default: ''\n    }\n  },\n\n  componentName: 'ElRadio',\n\n  props: {\n    value: {},\n    label: {},\n    disabled: Boolean,\n    name: String,\n    border: Boolean,\n    size: String\n  },\n\n  data: function data() {\n    return {\n      focus: false\n    };\n  },\n\n  computed: {\n    isGroup: function isGroup() {\n      var parent = this.$parent;\n      while (parent) {\n        if (parent.$options.componentName !== 'ElRadioGroup') {\n          parent = parent.$parent;\n        } else {\n          this._radioGroup = parent;\n          return true;\n        }\n      }\n      return false;\n    },\n\n    model: {\n      get: function get() {\n        return this.isGroup ? this._radioGroup.value : this.value;\n      },\n      set: function set(val) {\n        if (this.isGroup) {\n          this.dispatch('ElRadioGroup', 'input', [val]);\n        } else {\n          this.$emit('input', val);\n        }\n        this.$refs.radio && (this.$refs.radio.checked = this.model === th