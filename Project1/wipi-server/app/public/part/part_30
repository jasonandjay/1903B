is.label);\n      }\n    },\n    _elFormItemSize: function _elFormItemSize() {\n      return (this.elFormItem || {}).elFormItemSize;\n    },\n    radioSize: function radioSize() {\n      var temRadioSize = this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;\n      return this.isGroup ? this._radioGroup.radioGroupSize || temRadioSize : temRadioSize;\n    },\n    isDisabled: function isDisabled() {\n      return this.isGroup ? this._radioGroup.disabled || this.disabled || (this.elForm || {}).disabled : this.disabled || (this.elForm || {}).disabled;\n    },\n    tabIndex: function tabIndex() {\n      return this.isDisabled || this.isGroup && this.model !== this.label ? -1 : 0;\n    }\n  },\n\n  methods: {\n    handleChange: function handleChange() {\n      var _this = this;\n\n      this.$nextTick(function () {\n        _this.$emit('change', _this.model);\n        _this.isGroup && _this.dispatch('ElRadioGroup', 'handleChange', _this.model);\n      });\n    }\n  }\n});\n// CONCATENATED MODULE: ./packages/radio/src/radio.vue?vue&type=script&lang=js&\n /* harmony default export */ var src_radiovue_type_script_lang_js_ = (radiovue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/radio/src/radio.vue\n\n\n\n\n\n/* normalize component */\n\nvar radio_component = normalizeComponent(\n  src_radiovue_type_script_lang_js_,\n  radiovue_type_template_id_69cd6268_render,\n  radiovue_type_template_id_69cd6268_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var radio_api; }\nradio_component.options.__file = \"packages/radio/src/radio.vue\"\n/* harmony default export */ var src_radio = (radio_component.exports);\n// CONCATENATED MODULE: ./packages/radio/index.js\n\n\n/* istanbul ignore next */\nsrc_radio.install = function (Vue) {\n  Vue.component(src_radio.name, src_radio);\n};\n\n/* harmony default export */ var packages_radio = (src_radio);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/radio/src/radio-group.vue?vue&type=template&id=818a704c&\nvar radio_groupvue_type_template_id_818a704c_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    _vm._elTag,\n    {\n      tag: \"component\",\n      staticClass: \"el-radio-group\",\n      attrs: { role: \"radiogroup\" },\n      on: { keydown: _vm.handleKeydown }\n    },\n    [_vm._t(\"default\")],\n    2\n  )\n}\nvar radio_groupvue_type_template_id_818a704c_staticRenderFns = []\nradio_groupvue_type_template_id_818a704c_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/radio/src/radio-group.vue?vue&type=template&id=818a704c&\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/radio/src/radio-group.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\nvar keyCode = Object.freeze({\n  LEFT: 37,\n  UP: 38,\n  RIGHT: 39,\n  DOWN: 40\n});\n/* harmony default export */ var radio_groupvue_type_script_lang_js_ = ({\n  name: 'ElRadioGroup',\n\n  componentName: 'ElRadioGroup',\n\n  inject: {\n    elFormItem: {\n      default: ''\n    }\n  },\n\n  mixins: [emitter_default.a],\n\n  props: {\n    value: {},\n    size: String,\n    fill: String,\n    textColor: String,\n    disabled: Boolean\n  },\n\n  computed: {\n    _elFormItemSize: function _elFormItemSize() {\n      return (this.elFormItem || {}).elFormItemSize;\n    },\n    _elTag: function _elTag() {\n      var tag = (this.$vnode.data || {}).tag;\n      if (!tag || tag === 'component') tag = 'div';\n      return tag;\n    },\n    radioGroupSize: function radioGroupSize() {\n      return this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;\n    }\n  },\n\n  created: function created() {\n    var _this = this;\n\n    this.$on('handleChange', function (value) {\n      _this.$emit('change', value);\n    });\n  },\n  mounted: function mounted() {\n    // 当radioGroup没有默认选项时，第一个可以选中Tab导航\n    var radios = this.$el.querySelectorAll('[type=radio]');\n    var firstLabel = this.$el.querySelectorAll('[role=radio]')[0];\n    if (![].some.call(radios, function (radio) {\n      return radio.checked;\n    }) && firstLabel) {\n      firstLabel.tabIndex = 0;\n    }\n  },\n\n  methods: {\n    handleKeydown: function handleKeydown(e) {\n      // 左右上下按键 可以在radio组内切换不同选项\n      var target = e.target;\n      var className = target.nodeName === 'INPUT' ? '[type=radio]' : '[role=radio]';\n      var radios = this.$el.querySelectorAll(className);\n      var length = radios.length;\n      var index = [].indexOf.call(radios, target);\n      var roleRadios = this.$el.querySelectorAll('[role=radio]');\n      switch (e.keyCode) {\n        case keyCode.LEFT:\n        case keyCode.UP:\n          e.stopPropagation();\n          e.preventDefault();\n          if (index === 0) {\n            roleRadios[length - 1].click();\n            roleRadios[length - 1].focus();\n          } else {\n            roleRadios[index - 1].click();\n            roleRadios[index - 1].focus();\n          }\n          break;\n        case keyCode.RIGHT:\n        case keyCode.DOWN:\n          if (index === length - 1) {\n            e.stopPropagation();\n            e.preventDefault();\n            roleRadios[0].click();\n            roleRadios[0].focus();\n          } else {\n            roleRadios[index + 1].click();\n            roleRadios[index + 1].focus();\n          }\n          break;\n        default:\n          break;\n      }\n    }\n  },\n  watch: {\n    value: function value(_value) {\n      this.dispatch('ElFormItem', 'el.form.change', [this.value]);\n    }\n  }\n});\n// CONCATENATED MODULE: ./packages/radio/src/radio-group.vue?vue&type=script&lang=js&\n /* harmony default export */ var src_radio_groupvue_type_script_lang_js_ = (radio_groupvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/radio/src/radio-group.vue\n\n\n\n\n\n/* normalize component */\n\nvar radio_group_component = normalizeComponent(\n  src_radio_groupvue_type_script_lang_js_,\n  radio_groupvue_type_template_id_818a704c_render,\n  radio_groupvue_type_template_id_818a704c_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var radio_group_api; }\nradio_group_component.options.__file = \"packages/radio/src/radio-group.vue\"\n/* harmony default export */ var radio_group = (radio_group_component.exports);\n// CONCATENATED MODULE: ./packages/radio-group/index.js\n\n\n/* istanbul ignore next */\nradio_group.install = function (Vue) {\n  Vue.component(radio_group.name, radio_group);\n};\n\n/* harmony default export */ var packages_radio_group = (radio_group);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/radio/src/radio-button.vue?vue&type=template&id=18a77a32&\nvar radio_buttonvue_type_template_id_18a77a32_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"label\",\n    {\n      staticClass: \"el-radio-button\",\n      class: [\n        _vm.size ? \"el-radio-button--\" + _vm.size : \"\",\n        { \"is-active\": _vm.value === _vm.label },\n        { \"is-disabled\": _vm.isDisabled },\n        { \"is-focus\": _vm.focus }\n      ],\n      attrs: {\n        role: \"radio\",\n        \"aria-checked\": _vm.value === _vm.label,\n        \"aria-disabled\": _vm.isDisabled,\n        tabindex: _vm.tabIndex\n      },\n      on: {\n        keydown: function($event) {\n          if (\n            !(\"button\" in $event) &&\n            _vm._k($event.keyCode, \"space\", 32, $event.key, [\" \", \"Spacebar\"])\n          ) {\n            return null\n          }\n          $event.stopPropagation()\n          $event.preventDefault()\n          _vm.value = _vm.isDisabled ? _vm.value : _vm.label\n        }\n      }\n    },\n    [\n      _c(\"input\", {\n        directives: [\n          {\n            name: \"model\",\n            rawName: \"v-model\",\n            value: _vm.value,\n            expression: \"value\"\n          }\n        ],\n        staticClass: \"el-radio-button__orig-radio\",\n        attrs: {\n          type: \"radio\",\n          name: _vm.name,\n          disabled: _vm.isDisabled,\n          tabindex: \"-1\",\n          autocomplete: \"off\"\n        },\n        domProps: { value: _vm.label, checked: _vm._q(_vm.value, _vm.label) },\n        on: {\n          change: [\n            function($event) {\n              _vm.value = _vm.label\n            },\n            _vm.handleChange\n          ],\n          focus: function($event) {\n            _vm.focus = true\n          },\n          blur: function($event) {\n            _vm.focus = false\n          }\n        }\n      }),\n      _c(\n        \"span\",\n        {\n          staticClass: \"el-radio-button__inner\",\n          style: _vm.value === _vm.label ? _vm.activeStyle : null,\n          on: {\n            keydown: function($event) {\n              $event.stopPropagation()\n            }\n          }\n        },\n        [\n          _vm._t(\"default\"),\n          !_vm.$slots.default ? [_vm._v(_vm._s(_vm.label))] : _vm._e()\n        ],\n        2\n      )\n    ]\n  )\n}\nvar radio_buttonvue_type_template_id_18a77a32_staticRenderFns = []\nradio_buttonvue_type_template_id_18a77a32_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/radio/src/radio-button.vue?vue&type=template&id=18a77a32&\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/radio/src/radio-button.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n/* harmony default export */ var radio_buttonvue_type_script_lang_js_ = ({\n  name: 'ElRadioButton',\n\n  mixins: [emitter_default.a],\n\n  inject: {\n    elForm: {\n      default: ''\n    },\n    elFormItem: {\n      default: ''\n    }\n  },\n\n  props: {\n    label: {},\n    disabled: Boolean,\n    name: String\n  },\n  data: function data() {\n    return {\n      focus: false\n    };\n  },\n\n  computed: {\n    value: {\n      get: function get() {\n        return this._radioGroup.value;\n      },\n      set: function set(value) {\n        this._radioGroup.$emit('input', value);\n      }\n    },\n    _radioGroup: function _radioGroup() {\n      var parent = this.$parent;\n      while (parent) {\n        if (parent.$options.componentName !== 'ElRadioGroup') {\n          parent = parent.$parent;\n        } else {\n          return parent;\n        }\n      }\n      return false;\n    },\n    activeStyle: function activeStyle() {\n      return {\n        backgroundColor: this._radioGroup.fill || '',\n        borderColor: this._radioGroup.fill || '',\n        boxShadow: this._radioGroup.fill ? '-1px 0 0 0 ' + this._radioGroup.fill : '',\n        color: this._radioGroup.textColor || ''\n      };\n    },\n    _elFormItemSize: function _elFormItemSize() {\n      return (this.elFormItem || {}).elFormItemSize;\n    },\n    size: function size() {\n      return this._radioGroup.radioGroupSize || this._elFormItemSize || (this.$ELEMENT || {}).size;\n    },\n    isDisabled: function isDisabled() {\n      return this.disabled || this._radioGroup.disabled || (this.elForm || {}).disabled;\n    },\n    tabIndex: function tabIndex() {\n      return this.isDisabled || this._radioGroup && this.value !== this.label ? -1 : 0;\n    }\n  },\n\n  methods: {\n    handleChange: function handleChange() {\n      var _this = this;\n\n      this.$nextTick(function () {\n        _this.dispatch('ElRadioGroup', 'handleChange', _this.value);\n      });\n    }\n  }\n});\n// CONCATENATED MODULE: ./packages/radio/src/radio-button.vue?vue&type=script&lang=js&\n /* harmony default export */ var src_radio_buttonvue_type_script_lang_js_ = (radio_buttonvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/radio/src/radio-button.vue\n\n\n\n\n\n/* normalize component */\n\nvar radio_button_component = normalizeComponent(\n  src_radio_buttonvue_type_script_lang_js_,\n  radio_buttonvue_type_template_id_18a77a32_render,\n  radio_buttonvue_type_template_id_18a77a32_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var radio_button_api; }\nradio_button_component.options.__file = \"packages/radio/src/radio-button.vue\"\n/* harmony default export */ var radio_button = (radio_button_component.exports);\n// CONCATENATED MODULE: ./packages/radio-button/index.js\n\n\n/* istanbul ignore next */\nradio_button.install = function (Vue) {\n  Vue.component(radio_button.name, radio_button);\n};\n\n/* harmony default export */ var packages_radio_button = (radio_button);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/checkbox/src/checkbox.vue?vue&type=template&id=d0387074&\nvar checkboxvue_type_template_id_d0387074_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"label\",\n    {\n      staticClass: \"el-checkbox\",\n      class: [\n        _vm.border && _vm.checkboxSize\n          ? \"el-checkbox--\" + _vm.checkboxSize\n          : \"\",\n        { \"is-disabled\": _vm.isDisabled },\n        { \"is-bordered\": _vm.border },\n        { \"is-checked\": _vm.isChecked }\n      ],\n      attrs: { id: _vm.id }\n    },\n    [\n      _c(\n        \"span\",\n        {\n          staticClass: \"el-checkbox__input\",\n          class: {\n            \"is-disabled\": _vm.isDisabled,\n            \"is-checked\": _vm.isChecked,\n            \"is-indeterminate\": _vm.indeterminate,\n            \"is-focus\": _vm.focus\n          },\n          attrs: {\n            tabindex: _vm.indeterminate ? 0 : false,\n            role: _vm.indeterminate ? \"checkbox\" : false,\n            \"aria-checked\": _vm.indeterminate ? \"mixed\" : false\n          }\n        },\n        [\n          _c(\"span\", { staticClass: \"el-checkbox__inner\" }),\n          _vm.trueLabel || _vm.falseLabel\n            ? _c(\"input\", {\n                directives: [\n                  {\n                    name: \"model\",\n                    rawName: \"v-model\",\n                    value: _vm.model,\n                    expression: \"model\"\n                  }\n                ],\n                staticClass: \"el-checkbox__original\",\n                attrs: {\n                  type: \"checkbox\",\n                  \"aria-hidden\": _vm.indeterminate ? \"true\" : \"false\",\n                  name: _vm.name,\n                  disabled: _vm.isDisabled,\n                  \"true-value\": _vm.trueLabel,\n                  \"false-value\": _vm.falseLabel\n                },\n                domProps: {\n                  checked: Array.isArray(_vm.model)\n                    ? _vm._i(_vm.model, null) > -1\n                    : _vm._q(_vm.model, _vm.trueLabel)\n                },\n                on: {\n                  change: [\n                    function($event) {\n                      var $$a = _vm.model,\n                        $$el = $event.target,\n                        $$c = $$el.checked ? _vm.trueLabel : _vm.falseLabel\n                      if (Array.isArray($$a)) {\n                        var $$v = null,\n                          $$i = _vm._i($$a, $$v)\n                        if ($$el.checked) {\n                          $$i < 0 && (_vm.model = $$a.concat([$$v]))\n                        } else {\n                          $$i > -1 &&\n                            (_vm.model = $$a\n                              .slice(0, $$i)\n                              .concat($$a.slice($$i + 1)))\n                        }\n                      } else {\n                        _vm.model = $$c\n                      }\n                    },\n                    _vm.handleChange\n                  ],\n                  focus: function($event) {\n                    _vm.focus = true\n                  },\n                  blur: function($event) {\n                    _vm.focus = false\n                  }\n                }\n              })\n            : _c(\"input\", {\n                directives: [\n                  {\n                    name: \"model\",\n                    rawName: \"v-model\",\n                    value: _vm.model,\n                    expression: \"model\"\n                  }\n                ],\n                staticClass: \"el-checkbox__original\",\n                attrs: {\n                  type: \"checkbox\",\n                  \"aria-hidden\": _vm.indeterminate ? \"true\" : \"false\",\n                  disabled: _vm.isDisabled,\n                  name: _vm.name\n                },\n                domProps: {\n                  value: _vm.label,\n                  checked: Array.isArray(_vm.model)\n                    ? _vm._i(_vm.model, _vm.label) > -1\n                    : _vm.model\n                },\n                on: {\n                  change: [\n                    function($event) {\n                      var $$a = _vm.model,\n                        $$el = $event.target,\n                        $$c = $$el.checked ? true : false\n                      if (Array.isArray($$a)) {\n                        var $$v = _vm.label,\n                          $$i = _vm._i($$a, $$v)\n                        if ($$el.checked) {\n                          $$i < 0 && (_vm.model = $$a.concat([$$v]))\n                        } else {\n                          $$i > -1 &&\n                            (_vm.model = $$a\n                              .slice(0, $$i)\n                              .concat($$a.slice($$i + 1)))\n                        }\n                      } else {\n                        _vm.model = $$c\n                      }\n                    },\n                    _vm.handleChange\n                  ],\n                  focus: function($event) {\n                    _vm.focus = true\n                  },\n                  blur: function($event) {\n                    _vm.focus = false\n                  }\n                }\n              })\n        ]\n      ),\n      _vm.$slots.default || _vm.label\n        ? _c(\n            \"span\",\n            { staticClass: \"el-checkbox__label\" },\n            [\n              _vm._t(\"default\"),\n              !_vm.$slots.default ? [_vm._v(_vm._s(_vm.label))] : _vm._e()\n            ],\n            2\n          )\n        : _vm._e()\n    ]\n  )\n}\nvar checkboxvue_type_template_id_d0387074_staticRenderFns = []\ncheckboxvue_type_template_id_d0387074_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/checkbox/src/checkbox.vue?vue&type=template&id=d0387074&\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/checkbox/src/checkbox.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n/* harmony default export */ var checkboxvue_type_script_lang_js_ = ({\n  name: 'ElCheckbox',\n\n  mixins: [emitter_default.a],\n\n  inject: {\n    elForm: {\n      default: ''\n    },\n    elFormItem: {\n      default: ''\n    }\n  },\n\n  componentName: 'ElCheckbox',\n\n  data: function data() {\n    return {\n      selfModel: false,\n      focus: false,\n      isLimitExceeded: false\n    };\n  },\n\n\n  computed: {\n    model: {\n      get: function get() {\n        return this.isGroup ? this.store : this.value !== undefined ? this.value : this.selfModel;\n      },\n      set: function set(val) {\n        if (this.isGroup) {\n          this.isLimitExceeded = false;\n          this._checkboxGroup.min !== undefined && val.length < this._checkboxGroup.min && (this.isLimitExceeded = true);\n\n          this._checkboxGroup.max !== undefined && val.length > this._checkboxGroup.max && (this.isLimitExceeded = true);\n\n          this.isLimitExceeded === false && this.dispatch('ElCheckboxGroup', 'input', [val]);\n        } else {\n          this.$emit('input', val);\n          this.selfModel = val;\n        }\n      }\n    },\n\n    isChecked: function isChecked() {\n      if ({}.toString.call(this.model) === '[object Boolean]') {\n        return this.model;\n      } else if (Array.isArray(this.model)) {\n        return this.model.indexOf(this.label) > -1;\n      } else if (this.model !== null && this.model !== undefined) {\n        return this.model === this.trueLabel;\n      }\n    },\n    isGroup: function isGroup() {\n      var parent = this.$parent;\n      while (parent) {\n        if (parent.$options.componentName !== 'ElCheckboxGroup') {\n          parent = parent.$parent;\n        } else {\n          this._checkboxGroup = parent;\n          return true;\n        }\n      }\n      return false;\n    },\n    store: function store() {\n      return this._checkboxGroup ? this._checkboxGroup.value : this.value;\n    },\n\n\n    /* used to make the isDisabled judgment under max/min props */\n    isLimitDisabled: function isLimitDisabled() {\n      var _checkboxGroup = this._checkboxGroup,\n          max = _checkboxGroup.max,\n          min = _checkboxGroup.min;\n\n      return !!(max || min) && this.model.length >= max && !this.isChecked || this.model.length <= min && this.isChecked;\n    },\n    isDisabled: function isDisabled() {\n      return this.isGroup ? this._checkboxGroup.disabled || this.disabled || (this.elForm || {}).disabled || this.isLimitDisabled : this.disabled || (this.elForm || {}).disabled;\n    },\n    _elFormItemSize: function _elFormItemSize() {\n      return (this.elFormItem || {}).elFormItemSize;\n    },\n    checkboxSize: function checkboxSize() {\n      var temCheckboxSize = this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;\n      return this.isGroup ? this._checkboxGroup.checkboxGroupSize || temCheckboxSize : temCheckboxSize;\n    }\n  },\n\n  props: {\n    value: {},\n    label: {},\n    indeterminate: Boolean,\n    disabled: Boolean,\n    checked: Boolean,\n    name: String,\n    trueLabel: [String, Number],\n    falseLabel: [String, Number],\n    id: String, /* 当indeterminate为真时，为controls提供相关连的checkbox的id，表明元素间的控制关系*/\n    controls: String, /* 当indeterminate为真时，为controls提供相关连的checkbox的id，表明元素间的控制关系*/\n    border: Boolean,\n    size: String\n  },\n\n  methods: {\n    addToStore: function addToStore() {\n      if (Array.isArray(this.model) && this.model.indexOf(this.label) === -1) {\n        this.model.push(this.label);\n      } else {\n        this.model = this.trueLabel || true;\n      }\n    },\n    handleChange: function handleChange(ev) {\n      var _this = this;\n\n      if (this.isLimitExceeded) return;\n      var value = void 0;\n      if (ev.target.checked) {\n        value = this.trueLabel === undefined ? true : this.trueLabel;\n      } else {\n        value = this.falseLabel === undefined ? false : this.falseLabel;\n      }\n      this.$emit('change', value, ev);\n      this.$nextTick(function () {\n        if (_this.isGroup) {\n          _this.dispatch('ElCheckboxGroup', 'change', [_this._checkboxGroup.value]);\n        }\n      });\n    }\n  },\n\n  created: function created() {\n    this.checked && this.addToStore();\n  },\n  mounted: function mounted() {\n    // 为indeterminate元素 添加aria-controls 属性\n    if (this.indeterminate) {\n      this.$el.setAttribute('aria-controls', this.controls);\n    }\n  },\n\n\n  watch: {\n    value: function value(_value) {\n      this.dispatch('ElFormItem', 'el.form.change', _value);\n    }\n  }\n});\n// CONCATENATED MODULE: ./packages/checkbox/src/checkbox.vue?vue&type=script&lang=js&\n /* harmony default export */ var src_checkboxvue_type_script_lang_js_ = (checkboxvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/checkbox/src/checkbox.vue\n\n\n\n\n\n/* normalize component */\n\nvar checkbox_component = normalizeComponent(\n  src_checkboxvue_type_script_lang_js_,\n  checkboxvue_type_template_id_d0387074_render,\n  checkboxvue_type_template_id_d0387074_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var checkbox_api; }\ncheckbox_component.options.__file = \"packages/checkbox/src/checkbox.vue\"\n/* harmony default export */ var src_checkbox = (checkbox_component.exports);\n// CONCATENATED MODULE: ./packages/checkbox/index.js\n\n\n/* istanbul ignore next */\nsrc_checkbox.install = function (Vue) {\n  Vue.component(src_checkbox.name, src_checkbox);\n};\n\n/* harmony default export */ var packages_checkbox = (src_checkbox);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/checkbox/src/checkbox-button.vue?vue&type=template&id=478e906e&\nvar checkbox_buttonvue_type_template_id_478e906e_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"label\",\n    {\n      staticClass: \"el-checkbox-button\",\n      class: [\n        _vm.size ? \"el-checkbox-button--\" + _vm.size : \"\",\n        { \"is-disabled\": _vm.isDisabled },\n        { \"is-checked\": _vm.isChecked },\n        { \"is-focus\": _vm.focus }\n      ],\n      attrs: {\n        role: \"checkbox\",\n        \"aria-checked\": _vm.isChecked,\n        \"aria-disabled\": _vm.isDisabled\n      }\n    },\n    [\n      _vm.trueLabel || _vm.falseLabel\n        ? _c(\"input\", {\n            directives: [\n              {\n                name: \"model\",\n                rawName: \"v-model\",\n                value: _vm.model,\n                expression: \"model\"\n              }\n            ],\n            staticClass: \"el-checkbox-button__original\",\n            attrs: {\n              type: \"checkbox\",\n              name: _vm.name,\n              disabled: _vm.isDisabled,\n              \"true-value\": _vm.trueLabel,\n              \"false-value\": _vm.falseLabel\n            },\n            domProps: {\n              checked: Array.isArray(_vm.model)\n                ? _vm._i(_vm.model, null) > -1\n                : _vm._q(_vm.model, _vm.trueLabel)\n            },\n            on: {\n              change: [\n                function($event) {\n                  var $$a = _vm.model,\n                    $$el = $event.target,\n                    $$c = $$el.checked ? _vm.trueLabel : _vm.falseLabel\n                  if (Array.isArray($$a)) {\n                    var $$v = null,\n                      $$i = _vm._i($$a, $$v)\n                    if ($$el.checked) {\n                      $$i < 0 && (_vm.model = $$a.concat([$$v]))\n                    } else {\n                      $$i > -1 &&\n                        (_vm.model = $$a\n                          .slice(0, $$i)\n                          .concat($$a.slice($$i + 1)))\n                    }\n                  } else {\n                    _vm.model = $$c\n                  }\n                },\n                _vm.handleChange\n              ],\n              focus: function($event) {\n                _vm.focus = true\n              },\n              blur: function($event) {\n                _vm.focus = false\n              }\n            }\n          })\n        : _c(\"input\", {\n            directives: [\n              {\n                name: \"model\",\n                rawName: \"v-model\",\n                value: _vm.model,\n                expression: \"model\"\n              }\n            ],\n            staticClass: \"el-checkbox-button__original\",\n            attrs: {\n              type: \"checkbox\",\n              name: _vm.name,\n              disabled: _vm.isDisabled\n            },\n            domProps: {\n              value: _vm.label,\n              checked: Array.isArray(_vm.model)\n                ? _vm._i(_vm.model, _vm.label) > -1\n                : _vm.model\n            },\n            on: {\n              change: [\n                function($event) {\n                  var $$a = _vm.model,\n                    $$el = $event.target,\n                    $$c = $$el.checked ? true : false\n                  if (Array.isArray($$a)) {\n                    var $$v = _vm.label,\n                      $$i = _vm._i($$a, $$v)\n                    if ($$el.checked) {\n                      $$i < 0 && (_vm.model = $$a.concat([$$v]))\n                    } else {\n                      $$i > -1 &&\n                        (_vm.model = $$a\n                          .slice(0, $$i)\n                          .concat($$a.slice($$i + 1)))\n                    }\n                  } else {\n                    _vm.model = $$c\n                  }\n                },\n                _vm.handleChange\n              ],\n              focus: function($event) {\n                _vm.focus = true\n              },\n              blur: function($event) {\n                _vm.focus = false\n              }\n            }\n          }),\n      _vm.$slots.default || _vm.label\n        ? _c(\n            \"span\",\n            {\n              staticClass: \"el-checkbox-button__inner\",\n              style: _vm.isChecked ? _vm.activeStyle : null\n            },\n            [_vm._t(\"default\", [_vm._v(_vm._s(_vm.label))])],\n            2\n          )\n        : _vm._e()\n    ]\n  )\n}\nvar checkbox_buttonvue_type_template_id_478e906e_staticRenderFns = []\ncheckbox_buttonvue_type_template_id_478e906e_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/checkbox/src/checkbox-button.vue?vue&type=template&id=478e906e&\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/checkbox/src/checkbox-button.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n/* harmony default export */ var checkbox_buttonvue_type_script_lang_js_ = ({\n  name: 'ElCheckboxButton',\n\n  mixins: [emitter_default.a],\n\n  inject: {\n    elForm: {\n      default: ''\n    },\n    elFormItem: {\n      default: ''\n    }\n  },\n\n  data: function data() {\n    return {\n      selfModel: false,\n      focus: false,\n      isLimitExceeded: false\n    };\n  },\n\n\n  props: {\n    value: {},\n    label: {},\n    disabled: Boolean,\n    checked: Boolean,\n    name: String,\n    trueLabel: [String, Number],\n    falseLabel: [String, Number]\n  },\n  computed: {\n    model: {\n      get: function get() {\n        return this._checkboxGroup ? this.store : this.value !== undefined ? this.value : this.selfModel;\n      },\n      set: function set(val) {\n        if (this._checkboxGroup) {\n          this.isLimitExceeded = false;\n          this._checkboxGroup.min !== undefined && val.length < this._checkboxGroup.min && (this.isLimitExceeded = true);\n\n          this._checkboxGroup.max !== undefined && val.length > this._checkboxGroup.max && (this.isLimitExceeded = true);\n\n          this.isLimitExceeded === false && this.dispatch('ElCheckboxGroup', 'input', [val]);\n        } else if (this.value !== undefined) {\n          this.$emit('input', val);\n        } else {\n          this.selfModel = val;\n        }\n      }\n    },\n\n    isChecked: function isChecked() {\n      if ({}.toString.call(this.model) === '[object Boolean]') {\n        return this.model;\n      } else if (Array.isArray(this.model)) {\n        return this.model.indexOf(this.label) > -1;\n      } else if (this.model !== null && this.model !== undefined) {\n        return this.model === this.trueLabel;\n      }\n    },\n    _checkboxGroup: function _checkboxGroup() {\n      var parent = this.$parent;\n      while (parent) {\n        if (parent.$options.componentName !== 'ElCheckboxGroup') {\n          parent = parent.$parent;\n        } else {\n          return parent;\n        }\n      }\n      return false;\n    },\n    store: function store() {\n      return this._checkboxGroup ? this._checkboxGroup.value : this.value;\n    },\n    activeStyle: function activeStyle() {\n      return {\n        backgroundColor: this._checkboxGroup.fill || '',\n        borderColor: this._checkboxGroup.fill || '',\n        color: this._checkboxGroup.textColor || '',\n        'box-shadow': '-1px 0 0 0 ' + this._checkboxGroup.fill\n\n      };\n    },\n    _elFormItemSize: function _elFormItemSize() {\n      return (this.elFormItem || {}).elFormItemSize;\n    },\n    size: function size() {\n      return this._checkboxGroup.checkboxGroupSize || this._elFormItemSize || (this.$ELEMENT || {}).size;\n    },\n\n\n    /* used to make the isDisabled judgment under max/min props */\n    isLimitDisabled: function isLimitDisabled() {\n      var _checkboxGroup2 = this._checkboxGroup,\n          max = _checkboxGroup2.max,\n          min = _checkboxGroup2.min;\n\n      return !!(max || min) && this.model.length >= max && !this.isChecked || this.model.length <= min && this.isChecked;\n    },\n    isDisabled: function isDisabled() {\n      return this._checkboxGroup ? this._checkboxGroup.disabled || this.disabled || (this.elForm || {}).disabled || this.isLimitDisabled : this.disabled || (this.elForm || {}).disabled;\n    }\n  },\n  methods: {\n    addToStore: function addToStore() {\n      if (Array.isArray(this.model) && this.model.indexOf(this.label) === -1) {\n        this.model.push(this.label);\n      } else {\n        this.model = this.trueLabel || true;\n      }\n    },\n    handleChange: function handleChange(ev) {\n      var _this = this;\n\n      if (this.isLimitExceeded) return;\n      var value = void 0;\n      if (ev.target.checked) {\n        value = this.trueLabel === undefined ? true : this.trueLabel;\n      } else {\n        value = this.falseLabel === undefined ? false : this.falseLabel;\n      }\n      this.$emit('change', value, ev);\n      this.$nextTick(function () {\n        if (_this._checkboxGroup) {\n          _this.dispatch('ElCheckboxGroup', 'change', [_this._checkboxGroup.value]);\n        }\n      });\n    }\n  },\n\n  created: function created() {\n    this.checked && this.addToStore();\n  }\n});\n// CONCATENATED MODULE: ./packages/checkbox/src/checkbox-button.vue?vue&type=script&lang=js&\n /* harmony default export */ var src_checkbox_buttonvue_type_script_lang_js_ = (checkbox_buttonvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/checkbox/src/checkbox-button.vue\n\n\n\n\n\n/* normalize component */\n\nvar checkbox_button_component = normalizeComponent(\n  src_checkbox_buttonvue_type_script_lang_js_,\n  checkbox_buttonvue_type_template_id_478e906e_render,\n  checkbox_buttonvue_type_template_id_478e906e_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var checkbox_button_api; }\ncheckbox_button_component.options.__file = \"packages/checkbox/src/checkbox-button.vue\"\n/* harmony default export */ var checkbox_button = (checkbox_button_component.exports);\n// CONCATENATED MODULE: ./packages/checkbox-button/index.js\n\n\n/* istanbul ignore next */\ncheckbox_button.install = function (Vue) {\n  Vue.component(checkbox_button.name, checkbox_button);\n};\n\n/* harmony default export */ var packages_checkbox_button = (checkbox_button);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/checkbox/src/checkbox-group.vue?vue&type=template&id=7289a290&\nvar checkbox_groupvue_type_template_id_7289a290_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    {\n      staticClass: \"el-checkbox-group\",\n      attrs: { role: \"group\", \"aria-label\": \"checkbox-group\" }\n    },\n    [_vm._t(\"default\")],\n    2\n  )\n}\nvar checkbox_groupvue_type_template_id_7289a290_staticRenderFns = []\ncheckbox_groupvue_type_template_id_7289a290_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/checkbox/src/checkbox-group.vue?vue&type=template&id=7289a290&\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/checkbox/src/checkbox-group.vue?vue&type=script&lang=js&\n\n\n\n/* harmony default export */ var checkbox_groupvue_type_script_lang_js_ = ({\n  name: 'ElCheckboxGroup',\n\n  componentName: 'ElCheckboxGroup',\n\n  mixins: [emitter_default.a],\n\n  inject: {\n    elFormItem: {\n      default: ''\n    }\n  },\n\n  props: {\n    value: {},\n    disabled: Boolean,\n    min: Number,\n    max: Number,\n    size: String,\n    fill: String,\n    textColor: String\n  },\n\n  computed: {\n    _elFormItemSize: function _elFormItemSize() {\n      return (this.elFormItem || {}).elFormItemSize;\n    },\n    checkboxGroupSize: function checkboxGroupSize() {\n      return this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;\n    }\n  },\n\n  watch: {\n    value: function value(_value) {\n      this.dispatch('ElFormItem', 'el.form.change', [_value]);\n    }\n  }\n});\n// CONCATENATED MODULE: ./packages/checkbox/src/checkbox-group.vue?vue&type=script&lang=js&\n /* harmony default export */ var src_checkbox_groupvue_type_script_lang_js_ = (checkbox_groupvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/checkbox/src/checkbox-group.vue\n\n\n\n\n\n/* normalize component */\n\nvar checkbox_group_component = normalizeComponent(\n  src_checkbox_groupvue_type_script_lang_js_,\n  checkbox_groupvue_type_template_id_7289a290_render,\n  checkbox_groupvue_type_template_id_7289a290_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var checkbox_group_api; }\ncheckbox_group_component.options.__file = \"packages/checkbox/src/checkbox-group.vue\"\n/* harmony default export */ var checkbox_group = (checkbox_group_component.exports);\n// CONCATENATED MODULE: ./packages/checkbox-group/index.js\n\n\n/* istanbul ignore next */\ncheckbox_group.install = function (Vue) {\n  Vue.component(checkbox_group.name, checkbox_group);\n};\n\n/* harmony default export */ var packages_checkbox_group = (checkbox_group);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/switch/src/component.vue?vue&type=template&id=2dcd8fbb&\nvar componentvue_type_template_id_2dcd8fbb_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    {\n      staticClass: \"el-switch\",\n      class: { \"is-disabled\": _vm.switchDisabled, \"is-checked\": _vm.checked },\n      attrs: {\n        role: \"switch\",\n        \"aria-checked\": _vm.checked,\n        \"aria-disabled\": _vm.switchDisabled\n      },\n      on: {\n        click: function($event) {\n          $event.preventDefault()\n          return _vm.switchValue($event)\n        }\n      }\n    },\n    [\n      _c(\"input\", {\n        ref: \"input\",\n        staticClass: \"el-switch__input\",\n        attrs: {\n          type: \"checkbox\",\n          id: _vm.id,\n          name: _vm.name,\n          \"true-value\": _vm.activeValue,\n          \"false-value\": _vm.inactiveValue,\n          disabled: _vm.switchDisabled\n        },\n        on: {\n          change: _vm.handleChange,\n          keydown: function($event) {\n            if (\n              !(\"button\" in $event) &&\n              _vm._k($event.keyCode, \"enter\", 13, $event.key, \"Enter\")\n            ) {\n              return null\n            }\n            return _vm.switchValue($event)\n          }\n        }\n      }),\n      _vm.inactiveIconClass || _vm.inactiveText\n        ? _c(\n            \"span\",\n            {\n              class: [\n                \"el-switch__label\",\n                \"el-switch__label--left\",\n                !_vm.checked ? \"is-active\" : \"\"\n              ]\n            },\n            [\n              _vm.inactiveIconClass\n                ? _c(\"i\", { class: [_vm.inactiveIconClass] })\n                : _vm._e(),\n              !_vm.inactiveIconClass && _vm.inactiveText\n                ? _c(\"span\", { attrs: { \"aria-hidden\": _vm.checked } }, [\n                    _vm._v(_vm._s(_vm.inactiveText))\n                  ])\n                : _vm._e()\n            ]\n          )\n        : _vm._e(),\n      _c(\"span\", {\n        ref: \"core\",\n        staticClass: \"el-switch__core\",\n        style: { width: _vm.coreWidth + \"px\" }\n      }),\n      _vm.activeIconClass || _vm.activeText\n        ? _c(\n            \"span\",\n            {\n              class: [\n                \"el-switch__label\",\n                \"el-switch__label--right\",\n                _vm.checked ? \"is-active\" : \"\"\n              ]\n            },\n            [\n              _vm.activeIconClass\n                ? _c(\"i\", { class: [_vm.activeIconClass] })\n                : _vm._e(),\n              !_vm.activeIconClass && _vm.activeText\n                ? _c(\"span\", { attrs: { \"aria-hidden\": !_vm.checked } }, [\n                    _vm._v(_vm._s(_vm.activeText))\n                  ])\n                : _vm._e()\n            ]\n          )\n        : _vm._e()\n    ]\n  )\n}\nvar componentvue_type_template_id_2dcd8fbb_staticRenderFns = []\ncomponentvue_type_template_id_2dcd8fbb_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/switch/src/component.vue?vue&type=template&id=2dcd8fbb&\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/switch/src/component.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n/* harmony default export */ var switch_src_componentvue_type_script_lang_js_ = ({\n  name: 'ElSwitch',\n  mixins: [focus_default()('input'), migrating_default.a, emitter_default.a],\n  inject: {\n    elForm: {\n      default: ''\n    }\n  },\n  props: {\n    value: {\n      type: [Boolean, String, Number],\n      default: false\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    width: {\n      type: Number,\n      default: 40\n    },\n    activeIconClass: {\n      type: String,\n      default: ''\n    },\n    inactiveIconClass: {\n      type: String,\n      default: ''\n    },\n    activeText: String,\n    inactiveText: String,\n    activeColor: {\n      type: String,\n      default: ''\n    },\n    inactiveColor: {\n      type: String,\n      default: ''\n    },\n    activeValue: {\n      type: [Boolean, String, Number],\n      default: true\n    },\n    inactiveValue: {\n      type: [Boolean, String, Number],\n      default: false\n    },\n    name: {\n      type: String,\n      default: ''\n    },\n    validateEvent: {\n      type: Boolean,\n      default: true\n    },\n    id: String\n  },\n  data: function data() {\n    return {\n      coreWidth: this.width\n    };\n  },\n  created: function created() {\n    if (!~[this.activeValue, this.inactiveValue].indexOf(this.value)) {\n      this.$emit('input', this.inactiveValue);\n    }\n  },\n\n  computed: {\n    checked: function checked() {\n      return this.value === this.activeValue;\n    },\n    switchDisabled: function switchDisabled() {\n      return this.disabled || (this.elForm || {}).disabled;\n    }\n  },\n  watch: {\n    checked: function checked() {\n      this.$refs.input.checked = this.checked;\n      if (this.activeColor || this.inactiveColor) {\n        this.setBackgroundColor();\n      }\n      if (this.validateEvent) {\n        this.dispatch('ElFormItem', 'el.form.change', [this.value]);\n      }\n    }\n  },\n  methods: {\n    handleChange: function handleChange(event) {\n      var _this = this;\n\n      var val = this.checked ? this.inactiveValue : this.activeValue;\n      this.$emit('input', val);\n      this.$emit('change', val);\n      this.$nextTick(function () {\n        // set input's checked property\n        // in case parent refuses to change component's value\n        _this.$refs.input.checked = _this.checked;\n      });\n    },\n    setBackgroundColor: function setBackgroundColor() {\n      var newColor = this.checked ? this.activeColor : this.inactiveColor;\n      this.$refs.core.style.borderColor = newColor;\n      this.$refs.core.style.backgroundColor = newColor;\n    },\n    switchValue: function switchValue() {\n      !this.switchDisabled && this.handleChange();\n    },\n    getMigratingConfig: function getMigratingConfig() {\n      return {\n        props: {\n          'on-color': 'on-color is renamed to active-color.',\n          'off-color': 'off-color is renamed to inactive-color.',\n          'on-text': 'on-text is renamed to active-text.',\n          'off-text': 'off-text is renamed to inactive-text.',\n          'on-value': 'on-value is renamed to active-value.',\n          'off-value': 'off-value is renamed to inactive-value.',\n          'on-icon-class': 'on-icon-class is renamed to active-icon-class.',\n          'off-icon-class': 'off-icon-class is renamed to inactive-icon-class.'\n        }\n      };\n    }\n  },\n  mounted: function mounted() {\n    /* istanbul ignore if */\n    this.coreWidth = this.width || 40;\n    if (this.activeColor || this.inactiveColor) {\n      this.setBackgroundColor();\n    }\n    this.$refs.input.checked = this.checked;\n  }\n});\n// CONCATENATED MODULE: ./packages/switch/src/component.vue?vue&type=script&lang=js&\n /* harmony default export */ var packages_switch_src_componentvue_type_script_lang_js_ = (switch_src_componentvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/switch/src/component.vue\n\n\n\n\n\n/* normalize component */\n\nvar src_component_component = normalizeComponent(\n  packages_switch_src_componentvue_type_script_lang_js_,\n  componentvue_type_template_id_2dcd8fbb_render,\n  componentvue_type_template_id_2dcd8fbb_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var src_component_api; }\nsrc_component_component.options.__file = \"packages/switch/src/component.vue\"\n/* harmony default export */ var switch_src_component = (src_component_component.exports);\n// CONCATENATED MODULE: ./packages/switch/index.js\n\n\n/* istanbul ignore next */\nswitch_src_component.install = function (Vue) {\n  Vue.component(switch_src_component.name, switch_src_component);\n};\n\n/* harmony default export */ var packages_switch = (switch_src_component);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/select/src/select.vue?vue&type=template&id=0e4aade6&\nvar selectvue_type_template_id_0e4aade6_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    {\n      directives: [\n        {\n          name: \"clickoutside\",\n          rawName: \"v-clickoutside\",\n          value: _vm.handleClose,\n          expression: \"handleClose\"\n        }\n      ],\n      staticClass: \"el-select\",\n      class: [_vm.selectSize ? \"el-select--\" + _vm.selectSize : \"\"],\n      on: {\n        click: function($event) {\n          $event.stopPropagation()\n          return _vm.toggleMenu($event)\n        }\n      }\n    },\n    [\n      _vm.multiple\n        ? _c(\n            \"div\",\n            {\n              ref: \"tags\",\n              staticClass: \"el-select__tags\",\n              style: { \"max-width\": _vm.inputWidth - 32 + \"px\", width: \"100%\" }\n            },\n            [\n              _vm.collapseTags && _vm.selected.length\n                ? _c(\n                    \"span\",\n                    [\n                      _c(\n                        \"el-tag\",\n                        {\n                          attrs: {\n                            closable: !_vm.selectDisabled,\n                            size: _vm.collapseTagSize,\n                            hit: _vm.selected[0].hitState,\n                            type: \"info\",\n                            \"disable-transitions\": \"\"\n                          },\n                          on: {\n                            close: function($event) {\n                              _vm.deleteTag($event, _vm.selected[0])\n                            }\n                          }\n                        },\n                        [\n                          _c(\"span\", { staticClass: \"el-select__tags-text\" }, [\n                            _vm._v(_vm._s(_vm.selected[0].currentLabel))\n                          ])\n                        ]\n                      ),\n                      _vm.selected.length > 1\n                        ? _c(\n                            \"el-tag\",\n                            {\n                              attrs: {\n                                closable: false,\n                                size: _vm.collapseTagSize,\n                                type: \"info\",\n                                \"disable-transitions\": \"\"\n                              }\n                            },\n                            [\n                              _c(\n                                \"span\",\n                                { staticClass: \"el-select__tags-text\" },\n                                [_vm._v(\"+ \" + _vm._s(_vm.selected.length - 1))]\n                              )\n                            ]\n                          )\n                        : _vm._e()\n                    ],\n                    1\n                  )\n                : _vm._e(),\n              !_vm.collapseTags\n                ? _c(\n                    \"transition-group\",\n                    { on: { \"after-leave\": _vm.resetInputHeight } },\n                    _vm._l(_vm.selected, function(item) {\n                      return _c(\n                        \"el-tag\",\n                        {\n                          key: _vm.getValueKey(item),\n                          attrs: {\n                            closable: !_vm.selectDisabled,\n                            size: _vm.collapseTagSize,\n                            hit: item.hitState,\n                            type: \"info\",\n                            \"disable-transitions\": \"\"\n                          },\n                          on: {\n                            close: function($event) {\n                              _vm.deleteTag($event, item)\n                            }\n                          }\n                        },\n                        [\n                          _c(\"span\", { staticClass: \"el-select__tags-text\" }, [\n                            _vm._v(_vm._s(item.currentLabel))\n                          ])\n                        ]\n                      )\n                    }),\n                    1\n                  )\n                : _vm._e(),\n              _vm.filterable\n                ? _c(\"input\", {\n                    directives: [\n                      {\n                        name: \"model\",\n                        rawName: \"v-model\",\n                        value: _vm.query,\n                        expression: \"query\"\n                      }\n                    ],\n                    ref: \"input\",\n                    staticClass: \"el-select__input\",\n                    class: [_vm.selectSize ? \"is-\" + _vm.selectSize : \"\"],\n                    style: {\n                      \"flex-grow\": \"1\",\n                      width: _vm.inputLength / (_vm.inputWidth - 32) + \"%\",\n                      \"max-width\": _vm.inputWidth - 42 + \"px\"\n                    },\n                    attrs: {\n                      type: \"text\",\n                      disabled: _vm.selectDisabled,\n                      autocomplete: _vm.autoComplete || _vm.autocomplete\n                    },\n                    domProps: { value: _vm.query },\n                    on: {\n                      focus: _vm.handleFocus,\n                      blur: function($event) {\n                        _vm.softFocus = false\n                      },\n                      keyup: _vm.managePlaceholder,\n                      keydown: [\n                        _vm.resetInputState,\n                        function($event) {\n                          if (\n                            !(\"button\" in $event) &&\n                            _vm._k($event.keyCode, \"down\", 40, $event.key, [\n                              \"Down\",\n                              \"ArrowDown\"\n                            ])\n                          ) {\n                            return null\n                          }\n                          $event.preventDefault()\n                          _vm.navigateOptions(\"next\")\n                        },\n                        function($event) {\n                          if (\n                            !(\"button\" in $event) &&\n                            _vm._k($event.keyCode, \"up\", 38, $event.key, [\n                              \"Up\",\n                              \"ArrowUp\"\n                            ])\n                          ) {\n                            return null\n                          }\n                          $event.preventDefault()\n                          _vm.navigateOptions(\"prev\")\n                        },\n                        function($event) {\n                          if (\n                            !(\"button\" in $event) &&\n                            _vm._k(\n                              $event.keyCode,\n                              \"enter\",\n                              13,\n                              $event.key,\n                              \"Enter\"\n                            )\n                          ) {\n                            return null\n                          }\n                          $event.preventDefault()\n                          return _vm.selectOption($event)\n                        },\n                        function($event) {\n                          if (\n                            !(\"button\" in $event) &&\n                            _vm._k($event.keyCode, \"esc\", 27, $event.key, [\n                              \"Esc\",\n                              \"Escape\"\n                            ])\n                          ) {\n                            return null\n                          }\n                          $event.stopPropagation()\n                          $event.preventDefault()\n                          _vm.visible = false\n                        },\n                        function($event) {\n                          if (\n                            !(\"button\" in $event) &&\n                            _vm._k(\n                              $event.keyCode,\n                              \"delete\",\n                              [8, 46],\n                              $event.key,\n                              [\"Backspace\", \"Delete\", \"Del\"]\n                            )\n                          ) {\n                            return null\n                          }\n                          return _vm.deletePrevTag($event)\n                        },\n                        function($event) {\n                          if (\n                            !(\"button\" in $event) &&\n                            _vm._k($event.keyCode, \"tab\", 9, $event.key, \"Tab\")\n                          ) {\n                            return null\n                          }\n                          _vm.visible = false\n                        }\n                      ],\n                      compositionstart: _vm.handleComposition,\n                      compositionupdate: _vm.handleComposition,\n                      compositionend: _vm.handleComposition,\n                      input: [\n                        function($event) {\n                          if ($event.target.composing) {\n                            return\n                          }\n                          _vm.query = $event.target.value\n                        },\n                        _vm.debouncedQueryChange\n                      ]\n                    }\n                  })\n                : _vm._e()\n            ],\n            1\n          )\n        : _vm._e(),\n      _c(\n        \"el-input\",\n        {\n          ref: \"reference\",\n          class: { \"is-focus\": _vm.visible },\n          attrs: {\n            type: \"text\",\n            placeholder: _vm.currentPlaceholder,\n            name: _vm.name,\n            id: _vm.id,\n            autocomplete: _vm.autoComplete || _vm.autocomplete,\n            size: _vm.selectSize,\n            disabled: _vm.selectDisabled,\n            readonly: _vm.readonly,\n            \"validate-event\": false,\n            tabindex: _vm.multiple && _vm.filterable ? \"-1\" : null\n          },\n          on: {\n            focus: _vm.handleFocus,\n            blur: _vm.handleBlur,\n            input: _vm.debouncedOnInputChange\n          },\n          nativeOn: {\n            keydown: [\n              function($event) {\n                if (\n                  !(\"button\" in $event) &&\n                  _vm._k($event.keyCode, \"down\", 40, $event.key, [\n                    \"Down\",\n                    \"ArrowDown\"\n                  ])\n                ) {\n                  return null\n                }\n                $event.stopPropagation()\n                $event.preventDefault()\n                _vm.navigateOptions(\"next\")\n              },\n              function($event) {\n                if (\n                  !(\"button\" in $event) &&\n                  _vm._k($event.keyCode, \"up\", 38, $event.key, [\n                    \"Up\",\n                    \"ArrowUp\"\n                  ])\n                ) {\n                  return null\n                }\n                $event.stopPropagation()\n                $event.preventDefault()\n                _vm.navigateOptions(\"prev\")\n              },\n              function($event) {\n                if (\n                  !(\"button\" in $event) &&\n                  _vm._k($event.keyCode, \"enter\", 13, $event.key, \"Enter\")\n                ) {\n                  return null\n                }\n                $event.preventDefault()\n                return _vm.selectOption($event)\n              },\n              function($event) {\n                if (\n                  !(\"button\" in $event) &&\n                  _vm._k($event.keyCode, \"esc\", 27, $event.key, [\n                    \"Esc\",\n                    \"Escape\"\n                  ])\n                ) {\n                  return null\n                }\n                $event.stopPropagation()\n                $event.preventDefault()\n                _vm.visible = false\n              },\n              function($event) {\n                if (\n                  !(\"button\" in $event) &&\n                  _vm._k($event.keyCode, \"tab\", 9, $event.key, \"Tab\")\n                ) {\n                  return null\n                }\n                _vm.visible = false\n              }\n            ],\n            mouseenter: function($event) {\n              _vm.inputHovering = true\n            },\n            mouseleave: function($event) {\n              _vm.inputHovering = false\n            }\n          },\n          model: {\n            value: _vm.selectedLabel,\n            callback: function($$v) {\n              _vm.selectedLabel = $$v\n            },\n            expression: \"selectedLabel\"\n          }\n        },\n        [\n          _vm.$slots.prefix\n            ? _c(\"template\", { slot: \"prefix\" }, [_vm._t(\"prefix\")], 2)\n            : _vm._e(),\n          _c(\"template\", { slot: \"suffix\" }, [\n            _c(\"i\", {\n              directives: [\n                {\n                  name: \"show\",\n                  rawName: \"v-show\",\n                  value: !_vm.showClose,\n                  expression: \"!showClose\"\n                }\n              ],\n              class: [\n                \"el-select__caret\",\n                \"el-input__icon\",\n                \"el-icon-\" + _vm.iconClass\n              ]\n            }),\n            _vm.showClose\n              ? _c(\"i\", {\n                  staticClass:\n                    \"el-select__caret el-input__icon el-icon-circle-close\",\n                  on: { click: _vm.handleClearClick }\n                })\n              : _vm._e()\n          ])\n        ],\n        2\n      ),\n      _c(\n        \"transition\",\n        {\n          attrs: { name: \"el-zoom-in-top\" },\n          on: {\n            \"before-enter\": _vm.handleMenuEnter,\n            \"after-leave\": _vm.doDestroy\n          }\n        },\n        [\n          _c(\n            \"el-select-menu\",\n            {\n              directives: [\n                {\n                  name: \"show\",\n                  rawName: \"v-show\",\n                  value: _vm.visible && _vm.emptyText !== false,\n                  expression: \"visible && emptyText !== false\"\n                }\n              ],\n              ref: \"popper\",\n              attrs: { \"append-to-body\": _vm.popperAppendToBody }\n            },\n            [\n              _c(\n                \"el-scrollbar\",\n                {\n                  directives: [\n                    {\n                      name: \"show\",\n                      rawName: \"v-show\",\n                      value: _vm.options.length > 0 && !_vm.loading,\n                      expression: \"options.length > 0 && !loading\"\n                    }\n                  ],\n                  ref: \"scrollbar\",\n                  class: {\n                    \"is-empty\":\n                      !_vm.allowCreate &&\n                      _vm.query &&\n                      _vm.filteredOptionsCount === 0\n                  },\n                  attrs: {\n                    tag: \"ul\",\n                    \"wrap-class\": \"el-select-dropdown__wrap\",\n                    \"view-class\": \"el-select-dropdown__list\"\n                  }\n                },\n                [\n                  _vm.showNewOption\n                    ? _c(\"el-option\", {\n                        attrs: { value: _vm.query, created: \"\" }\n                      })\n                    : _vm._e(),\n                  _vm._t(\"default\")\n                ],\n                2\n              ),\n              _vm.emptyText &&\n              (!_vm.allowCreate ||\n                _vm.loading ||\n                (_vm.allowCreate && _vm.options.length === 0))\n                ? [\n                    _vm.$slots.empty\n                      ? _vm._t(\"empty\")\n                      : _c(\"p\", { staticClass: \"el-select-dropdown__empty\" }, [\n                          _vm._v(\n                            \"\\n          \" +\n                              _vm._s(_vm.emptyText) +\n                              \"\\n        \"\n                          )\n                        ])\n                  ]\n                : _vm._e()\n            ],\n            2\n          )\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar selectvue_type_template_id_0e4aade6_staticRenderFns = []\nselectvue_type_template_id_0e4aade6_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/select/src/select.vue?vue&type=template&id=0e4aade6&\n\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/select/src/select-dropdown.vue?vue&type=template&id=06828748&\nvar select_dropdownvue_type_template_id_06828748_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    {\n      staticClass: \"el-select-dropdown el-popper\",\n      class: [{ \"is-multiple\": _vm.$parent.multiple }, _vm.popperClass],\n      style: { minWidth: _vm.minWidth }\n    },\n    [_vm._t(\"default\")],\n    2\n  )\n}\nvar select_dropdownvue_type_template_id_06828748_staticRenderFns = []\nselect_dropdownvue_type_template_id_06828748_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/select/src/select-dropdown.vue?vue&type=template&id=06828748&\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/select/src/select-dropdown.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n/* harmony default export */ var select_dropdownvue_type_script_lang_js_ = ({\n  name: 'ElSelectDropdown',\n\n  componentName: 'ElSelectDropdown',\n\n  mixins: [vue_popper_default.a],\n\n  props: {\n    placement: {\n      default: 'bottom-start'\n    },\n\n    boundariesPadding: {\n      default: 0\n    },\n\n    popperOptions: {\n      default: function _default() {\n        return {\n          gpuAcceleration: false\n        };\n      }\n    },\n\n    visibleArrow: {\n      default: true\n    },\n\n    appendToBody: {\n      type: Boolean,\n      default: true\n    }\n  },\n\n  data: function data() {\n    return {\n      minWidth: ''\n    };\n  },\n\n\n  computed: {\n    popperClass: function popperClass() {\n      return this.$parent.popperClass;\n    }\n  },\n\n  watch: {\n    '$parent.inputWidth': function $parentInputWidth() {\n      this.minWidth = this.$parent.$el.getBoundingClientRect().width + 'px';\n    }\n  },\n\n  mounted: function mounted() {\n    var _this = this;\n\n    this.referenceElm = this.$parent.$refs.reference.$el;\n    this.$parent.popperElm = this.popperElm = this.$el;\n    this.$on('updatePopper', function () {\n      if (_this.$parent.visible) _this.updatePopper();\n    });\n    this.$on('destroyPopper', this.destroyPopper);\n  }\n});\n// CONCATENATED MODULE: ./packages/select/src/select-dropdown.vue?vue&type=script&lang=js&\n /* harmony default export */ var src_select_dropdownvue_type_script_lang_js_ = (select_dropdownvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/select/src/select-dropdown.vue\n\n\n\n\n\n/* normalize component */\n\nvar select_dropdown_component = normalizeComponent(\n  src_select_dropdownvue_type_script_lang_js_,\n  select_dropdownvue_type_template_id_06828748_render,\n  select_dropdownvue_type_template_id_06828748_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var select_dropdown_api; }\nselect_dropdown_component.options.__file = \"packages/select/src/select-dropdown.vue\"\n/* harmony default export */ var select_dropdown = (select_dropdown_component.exports);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/select/src/option.vue?vue&type=template&id=7a44c642&\nvar optionvue_type_template_id_7a44c642_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"li\",\n    {\n      directives: [\n        {\n          name: \"show\",\n          rawName: \"v-show\",\n          value: _vm.visible,\n          expression: \"visible\"\n        }\n      ],\n      staticClass: \"el-select-dropdown__item\",\n      class: {\n        selected: _vm.itemSelected,\n        \"is-disabled\": _vm.disabled || _vm.groupDisabled || _vm.limitReached,\n        hover: _vm.hover\n      },\n      on: {\n        mouseenter: _vm.hoverItem,\n        click: function($event) {\n          $event.stopPropagation()\n          return _vm.selectOptionClick($event)\n        }\n      }\n    },\n    [_vm._t(\"default\", [_c(\"span\", [_vm._v(_vm._s(_vm.currentLabel))])])],\n    2\n  )\n}\nvar optionvue_type_template_id_7a44c642_staticRenderFns = []\noptionvue_type_template_id_7a44c642_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/select/src/option.vue?vue&type=template&id=7a44c642&\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/select/src/option.vue?vue&type=script&lang=js&\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n/* harmony default export */ var optionvue_type_script_lang_js_ = ({\n  mixins: [emitter_default.a],\n\n  name: 'ElOption',\n\n  componentName: 'ElOption',\n\n  inject: ['select'],\n\n  props: {\n    value: {\n      required: true\n    },\n    label: [String, Number],\n    created: Boolean,\n    disabled: {\n      type: Boolean,\n      default: false\n    }\n  },\n\n  data: function data() {\n    return {\n      index: -1,\n      groupDisabled: false,\n      visible: true,\n      hitState: false,\n      hover: false\n    };\n  },\n\n\n  computed: {\n    isObject: function isObject() {\n      return Object.prototype.toString.call(this.value).toLowerCase() === '[object object]';\n    },\n    currentLabel: function currentLabel() {\n      return this.label || (this.isObject ? '' : this.value);\n    },\n    currentValue: function currentValue() {\n      return this.value || this.label || '';\n    },\n    itemSelected: function itemSelected() {\n      if (!this.select.multiple) {\n        return this.isEqual(this.value, this.select.value);\n      } else {\n        return this.contains(this.select.value, this.value);\n      }\n    },\n    limitReached: function limitReached() {\n      if (this.select.multiple) {\n        return !this.itemSelected && (this.select.value || []).length >= this.select.multipleLimit && this.select.multipleLimit > 0;\n      } else {\n        return false;\n      }\n    }\n  },\n\n  watch: {\n    currentLabel: function currentLabel() {\n      if (!this.created && !this.select.remote) this.dispatch('ElSelect', 'setSelected');\n    },\n    value: function value(val, oldVal) {\n      var _select = this.select,\n          remote = _select.remote,\n          valueKey = _select.valueKey;\n\n      if (!this.created && !remote) {\n        if (valueKey && (typeof val === 'undefined' ? 'undefined' : _typeof(val)) === 'object' && (typeof oldVal === 'undefined' ? 'undefined' : _typeof(oldVal)) === 'object' && val[valueKey] === oldVal[valueKey]) {\n          return;\n        }\n        this.dispatch('ElSelect', 'setSelected');\n      }\n    }\n  },\n\n  methods: {\n    isEqual: function isEqual(a, b) {\n      if (!this.isObject) {\n        return a === b;\n      } else {\n        var valueKey = this.select.valueKey;\n        return Object(util_[\"getValueByPath\"])(a, valueKey) === Object(util_[\"getValueByPath\"])(b, valueKey);\n      }\n    },\n    contains: function contains() {\n      var arr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var target = arguments[1];\n\n      if (!this.isObject) {\n        return arr && arr.indexOf(target) > -1;\n      } else {\n        var valueKey = this.select.valueKey;\n        return arr && arr.some(function (item) {\n          return Object(util_[\"getValueByPath\"])(item, valueKey) === Object(util_[\"getValueByPath\"])(target, valueKey);\n        });\n      }\n    },\n    handleGroupDisabled: function handleGroupDisabled(val) {\n      this.groupDisabled = val;\n    },\n    hoverItem: function hoverItem() {\n      if (!this.disabled && !this.groupDisabled) {\n        this.select.hoverIndex = this.select.options.indexOf(this);\n      }\n    },\n    selectOptionClick: function selectOptionClick() {\n      if (this.disabled !== true && this.groupDisabled !== true) {\n        this.dispatch('ElSelect', 'handleOptionClick', [this, true]);\n      }\n    },\n    queryChange: function queryChange(query) {\n      this.visible = new RegExp(Object(util_[\"escapeRegexpString\"])(query), 'i').test(this.currentLabel) || this.created;\n      if (!this.visible) {\n        this.select.filteredOptionsCount--;\n      }\n    }\n  },\n\n  created: function created() {\n    this.select.options.push(this);\n    this.select.cachedOptions.push(this);\n    this.select.optionsCount++;\n    this.select.filteredOptionsCount++;\n\n    this.$on('queryChange', this.queryChange);\n    this.$on('handleGroupDisabled', this.handleGroupDisabled);\n  },\n  beforeDestroy: function beforeDestroy() {\n    var _select2 = this.select,\n        selected = _select2.selected,\n        multiple = _select2.multiple;\n\n    var selectedOptions = multiple ? selected : [selected];\n    var index = this.select.cachedOptions.indexOf(this);\n    var selectedIndex = selectedOptions.indexOf(this);\n\n    // if option is not selected, remove it from cache\n    if (index > -1 && selectedIndex < 0) {\n      this.select.cachedOptions.splice(index, 1);\n    }\n    this.select.onOptionDestroy(this.select.options.indexOf(this));\n  }\n});\n// CONCATENATED MODULE: ./packages/select/src/option.vue?vue&type=script&lang=js&\n /* harmony default export */ var src_optionvue_type_script_lang_js_ = (optionvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/select/src/option.vue\n\n\n\n\n\n/* normalize component */\n\nvar option_component = normalizeComponent(\n  src_optionvue_type_script_lang_js_,\n  optionvue_type_template_id_7a44c642_render,\n  optionvue_type_template_id_7a44c642_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var option_api; }\noption_component.options.__file = \"packages/select/src/option.vue\"\n/* harmony default export */ var src_option = (option_component.exports);\n// EXTERNAL MODULE: external \"element-ui/lib/tag\"\nvar tag_ = __webpack_require__(29);\nvar tag_default = /*#__PURE__*/__webpack_require__.n(tag_);\n\n// EXTERNAL MODULE: external \"element-ui/lib/utils/resize-event\"\nvar resize_event_ = __webpack_require__(14);\n\n// EXTERNAL MODULE: external \"element-ui/lib/utils/scroll-into-view\"\nvar scroll_into_view_ = __webpack_require__(27);\nvar scroll_into_view_default = /*#__PURE__*/__webpack_require__.n(scroll_into_view_);\n\n// CONCATENATED MODULE: ./packages/select/src/navigation-mixin.js\n/* harmony default export */ var navigation_mixin = ({\n  data: function data() {\n    return {\n      hoverOption: -1\n    };\n  },\n\n\n  computed: {\n    optionsAllDisabled: function optionsAllDisabled() {\n      return this.options.filter(function (option) {\n        return option.visible;\n      }).every(function (option) {\n        return option.disabled;\n      });\n    }\n  },\n\n  watch: {\n    hoverIndex: function hoverIndex(val) {\n      var _this = this;\n\n      if (typeof val === 'number' && val > -1) {\n        this.hoverOption = this.options[val] || {};\n      }\n      this.options.forEach(function (option) {\n        option.hover = _this.hoverOption === option;\n      });\n    }\n  },\n\n  methods: {\n    navigateOptions: function navigateOptions(direction) {\n      var _this2 = this;\n\n      if (!this.visible) {\n        this.visible = true;\n        return;\n      }\n      if (this.options.length === 0 || this.filteredOptionsCount === 0) return;\n      if (!this.optionsAllDisabled) {\n        if (direction === 'next') {\n          this.hoverIndex++;\n          if (this.hoverIndex === this.options.length) {\n            this.hoverIndex = 0;\n          }\n        } else if (direction === 'prev') {\n          this.hoverIndex--;\n          if (this.hoverIndex < 0) {\n            this.hoverIndex = this.options.length - 1;\n          }\n        }\n        var option = this.options[this.hoverIndex];\n        if (option.disabled === true || option.groupDisabled === true 