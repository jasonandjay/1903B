e || \"\"),\n              \"el-timeline-item__node--\" + (_vm.type || \"\")\n            ],\n            style: {\n              backgroundColor: _vm.color\n            }\n          },\n          [\n            _vm.icon\n              ? _c(\"i\", {\n                  staticClass: \"el-timeline-item__icon\",\n                  class: _vm.icon\n                })\n              : _vm._e()\n          ]\n        )\n      : _vm._e(),\n    _vm.$slots.dot\n      ? _c(\"div\", { staticClass: \"el-timeline-item__dot\" }, [_vm._t(\"dot\")], 2)\n      : _vm._e(),\n    _c(\"div\", { staticClass: \"el-timeline-item__wrapper\" }, [\n      !_vm.hideTimestamp && _vm.placement === \"top\"\n        ? _c(\"div\", { staticClass: \"el-timeline-item__timestamp is-top\" }, [\n            _vm._v(\"\\n      \" + _vm._s(_vm.timestamp) + \"\\n    \")\n          ])\n        : _vm._e(),\n      _c(\n        \"div\",\n        { staticClass: \"el-timeline-item__content\" },\n        [_vm._t(\"default\")],\n        2\n      ),\n      !_vm.hideTimestamp && _vm.placement === \"bottom\"\n        ? _c(\"div\", { staticClass: \"el-timeline-item__timestamp is-bottom\" }, [\n            _vm._v(\"\\n      \" + _vm._s(_vm.timestamp) + \"\\n    \")\n          ])\n        : _vm._e()\n    ])\n  ])\n}\nvar itemvue_type_template_id_61a69e50_staticRenderFns = []\nitemvue_type_template_id_61a69e50_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/timeline/src/item.vue?vue&type=template&id=61a69e50&\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/timeline/src/item.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* harmony default export */ var timeline_src_itemvue_type_script_lang_js_ = ({\n  name: 'ElTimelineItem',\n\n  inject: ['timeline'],\n\n  props: {\n    timestamp: String,\n\n    hideTimestamp: {\n      type: Boolean,\n      default: false\n    },\n\n    placement: {\n      type: String,\n      default: 'bottom'\n    },\n\n    type: String,\n\n    color: String,\n\n    size: {\n      type: String,\n      default: 'normal'\n    },\n\n    icon: String\n  }\n});\n// CONCATENATED MODULE: ./packages/timeline/src/item.vue?vue&type=script&lang=js&\n /* harmony default export */ var packages_timeline_src_itemvue_type_script_lang_js_ = (timeline_src_itemvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/timeline/src/item.vue\n\n\n\n\n\n/* normalize component */\n\nvar src_item_component = normalizeComponent(\n  packages_timeline_src_itemvue_type_script_lang_js_,\n  itemvue_type_template_id_61a69e50_render,\n  itemvue_type_template_id_61a69e50_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var src_item_api; }\nsrc_item_component.options.__file = \"packages/timeline/src/item.vue\"\n/* harmony default export */ var timeline_src_item = (src_item_component.exports);\n// CONCATENATED MODULE: ./packages/timeline-item/index.js\n\n\n/* istanbul ignore next */\ntimeline_src_item.install = function (Vue) {\n  Vue.component(timeline_src_item.name, timeline_src_item);\n};\n\n/* harmony default export */ var timeline_item = (timeline_src_item);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/link/src/main.vue?vue&type=template&id=01cf3b65&\nvar mainvue_type_template_id_01cf3b65_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"a\",\n    _vm._b(\n      {\n        class: [\n          \"el-link\",\n          _vm.type ? \"el-link--\" + _vm.type : \"\",\n          _vm.disabled && \"is-disabled\",\n          _vm.underline && !_vm.disabled && \"is-underline\"\n        ],\n        attrs: { href: _vm.disabled ? null : _vm.href },\n        on: { click: _vm.handleClick }\n      },\n      \"a\",\n      _vm.$attrs,\n      false\n    ),\n    [\n      _vm.icon ? _c(\"i\", { class: _vm.icon }) : _vm._e(),\n      _vm.$slots.default\n        ? _c(\"span\", { staticClass: \"el-link--inner\" }, [_vm._t(\"default\")], 2)\n        : _vm._e(),\n      _vm.$slots.icon ? [_vm.$slots.icon ? _vm._t(\"icon\") : _vm._e()] : _vm._e()\n    ],\n    2\n  )\n}\nvar mainvue_type_template_id_01cf3b65_staticRenderFns = []\nmainvue_type_template_id_01cf3b65_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/link/src/main.vue?vue&type=template&id=01cf3b65&\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/link/src/main.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n/* harmony default export */ var link_src_mainvue_type_script_lang_js_ = ({\n  name: 'ElLink',\n\n  props: {\n    type: {\n      type: String,\n      default: 'default'\n    },\n    underline: {\n      type: Boolean,\n      default: true\n    },\n    disabled: Boolean,\n    href: String,\n    icon: String\n  },\n\n  methods: {\n    handleClick: function handleClick(event) {\n      if (!this.disabled) {\n        if (!this.href) {\n          this.$emit('click', event);\n        }\n      }\n    }\n  }\n});\n// CONCATENATED MODULE: ./packages/link/src/main.vue?vue&type=script&lang=js&\n /* harmony default export */ var packages_link_src_mainvue_type_script_lang_js_ = (link_src_mainvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/link/src/main.vue\n\n\n\n\n\n/* normalize component */\n\nvar link_src_main_component = normalizeComponent(\n  packages_link_src_mainvue_type_script_lang_js_,\n  mainvue_type_template_id_01cf3b65_render,\n  mainvue_type_template_id_01cf3b65_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var link_src_main_api; }\nlink_src_main_component.options.__file = \"packages/link/src/main.vue\"\n/* harmony default export */ var link_src_main = (link_src_main_component.exports);\n// CONCATENATED MODULE: ./packages/link/index.js\n\n\n/* istanbul ignore next */\nlink_src_main.install = function (Vue) {\n  Vue.component(link_src_main.name, link_src_main);\n};\n\n/* harmony default export */ var packages_link = (link_src_main);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/divider/src/main.vue?vue&type=template&id=7fa02a7e&functional=true&\nvar mainvue_type_template_id_7fa02a7e_functional_true_render = function(_h, _vm) {\n  var _c = _vm._c\n  return _c(\n    \"div\",\n    _vm._g(\n      _vm._b(\n        {\n          class: [\n            _vm.data.staticClass,\n            \"el-divider\",\n            \"el-divider--\" + _vm.props.direction\n          ]\n        },\n        \"div\",\n        _vm.data.attrs,\n        false\n      ),\n      _vm.listeners\n    ),\n    [\n      _vm.slots().default && _vm.props.direction !== \"vertical\"\n        ? _c(\n            \"div\",\n            { class: [\"el-divider__text\", \"is-\" + _vm.props.contentPosition] },\n            [_vm._t(\"default\")],\n            2\n          )\n        : _vm._e()\n    ]\n  )\n}\nvar mainvue_type_template_id_7fa02a7e_functional_true_staticRenderFns = []\nmainvue_type_template_id_7fa02a7e_functional_true_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/divider/src/main.vue?vue&type=template&id=7fa02a7e&functional=true&\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/divider/src/main.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* harmony default export */ var divider_src_mainvue_type_script_lang_js_ = ({\n  name: 'ElDivider',\n  props: {\n    direction: {\n      type: String,\n      default: 'horizontal',\n      validator: function validator(val) {\n        return ['horizontal', 'vertical'].indexOf(val) !== -1;\n      }\n    },\n    contentPosition: {\n      type: String,\n      default: 'center',\n      validator: function validator(val) {\n        return ['left', 'center', 'right'].indexOf(val) !== -1;\n      }\n    }\n  }\n});\n// CONCATENATED MODULE: ./packages/divider/src/main.vue?vue&type=script&lang=js&\n /* harmony default export */ var packages_divider_src_mainvue_type_script_lang_js_ = (divider_src_mainvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/divider/src/main.vue\n\n\n\n\n\n/* normalize component */\n\nvar divider_src_main_component = normalizeComponent(\n  packages_divider_src_mainvue_type_script_lang_js_,\n  mainvue_type_template_id_7fa02a7e_functional_true_render,\n  mainvue_type_template_id_7fa02a7e_functional_true_staticRenderFns,\n  true,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var divider_src_main_api; }\ndivider_src_main_component.options.__file = \"packages/divider/src/main.vue\"\n/* harmony default export */ var divider_src_main = (divider_src_main_component.exports);\n// CONCATENATED MODULE: ./packages/divider/index.js\n\n\n/* istanbul ignore next */\ndivider_src_main.install = function (Vue) {\n  Vue.component(divider_src_main.name, divider_src_main);\n};\n\n/* harmony default export */ var divider = (divider_src_main);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/image/src/main.vue?vue&type=template&id=44d84a7c&\nvar mainvue_type_template_id_44d84a7c_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    { staticClass: \"el-image\" },\n    [\n      _vm.loading\n        ? _vm._t(\"placeholder\", [\n            _c(\"div\", { staticClass: \"el-image__placeholder\" })\n          ])\n        : _vm.error\n        ? _vm._t(\"error\", [\n            _c(\"div\", { staticClass: \"el-image__error\" }, [\n              _vm._v(_vm._s(_vm.t(\"el.image.error\")))\n            ])\n          ])\n        : _c(\n            \"img\",\n            _vm._g(\n              _vm._b(\n                {\n                  staticClass: \"el-image__inner\",\n                  class: {\n                    \"el-image__inner--center\": _vm.alignCenter,\n                    \"el-image__preview\": _vm.preview\n                  },\n                  style: _vm.imageStyle,\n                  attrs: { src: _vm.src },\n                  on: { click: _vm.clickHandler }\n                },\n                \"img\",\n                _vm.$attrs,\n                false\n              ),\n              _vm.$listeners\n            )\n          ),\n      _vm.preview\n        ? [\n            _vm.showViewer\n              ? _c(\"image-viewer\", {\n                  attrs: {\n                    \"z-index\": _vm.zIndex,\n                    \"initial-index\": _vm.imageIndex,\n                    \"on-close\": _vm.closeViewer,\n                    \"url-list\": _vm.previewSrcList\n                  }\n                })\n              : _vm._e()\n          ]\n        : _vm._e()\n    ],\n    2\n  )\n}\nvar mainvue_type_template_id_44d84a7c_staticRenderFns = []\nmainvue_type_template_id_44d84a7c_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/image/src/main.vue?vue&type=template&id=44d84a7c&\n\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/image/src/image-viewer.vue?vue&type=template&id=5e73b307&\nvar image_viewervue_type_template_id_5e73b307_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"transition\", { attrs: { name: \"viewer-fade\" } }, [\n    _c(\n      \"div\",\n      {\n        ref: \"el-image-viewer__wrapper\",\n        staticClass: \"el-image-viewer__wrapper\",\n        style: { \"z-index\": _vm.viewerZIndex },\n        attrs: { tabindex: \"-1\" }\n      },\n      [\n        _c(\"div\", {\n          staticClass: \"el-image-viewer__mask\",\n          on: {\n            click: function($event) {\n              if ($event.target !== $event.currentTarget) {\n                return null\n              }\n              return _vm.handleMaskClick($event)\n            }\n          }\n        }),\n        _c(\n          \"span\",\n          {\n            staticClass: \"el-image-viewer__btn el-image-viewer__close\",\n            on: { click: _vm.hide }\n          },\n          [_c(\"i\", { staticClass: \"el-icon-close\" })]\n        ),\n        !_vm.isSingle\n          ? [\n              _c(\n                \"span\",\n                {\n                  staticClass: \"el-image-viewer__btn el-image-viewer__prev\",\n                  class: { \"is-disabled\": !_vm.infinite && _vm.isFirst },\n                  on: { click: _vm.prev }\n                },\n                [_c(\"i\", { staticClass: \"el-icon-arrow-left\" })]\n              ),\n              _c(\n                \"span\",\n                {\n                  staticClass: \"el-image-viewer__btn el-image-viewer__next\",\n                  class: { \"is-disabled\": !_vm.infinite && _vm.isLast },\n                  on: { click: _vm.next }\n                },\n                [_c(\"i\", { staticClass: \"el-icon-arrow-right\" })]\n              )\n            ]\n          : _vm._e(),\n        _c(\n          \"div\",\n          { staticClass: \"el-image-viewer__btn el-image-viewer__actions\" },\n          [\n            _c(\"div\", { staticClass: \"el-image-viewer__actions__inner\" }, [\n              _c(\"i\", {\n                staticClass: \"el-icon-zoom-out\",\n                on: {\n                  click: function($event) {\n                    _vm.handleActions(\"zoomOut\")\n                  }\n                }\n              }),\n              _c(\"i\", {\n                staticClass: \"el-icon-zoom-in\",\n                on: {\n                  click: function($event) {\n                    _vm.handleActions(\"zoomIn\")\n                  }\n                }\n              }),\n              _c(\"i\", { staticClass: \"el-image-viewer__actions__divider\" }),\n              _c(\"i\", { class: _vm.mode.icon, on: { click: _vm.toggleMode } }),\n              _c(\"i\", { staticClass: \"el-image-viewer__actions__divider\" }),\n              _c(\"i\", {\n                staticClass: \"el-icon-refresh-left\",\n                on: {\n                  click: function($event) {\n                    _vm.handleActions(\"anticlocelise\")\n                  }\n                }\n              }),\n              _c(\"i\", {\n                staticClass: \"el-icon-refresh-right\",\n                on: {\n                  click: function($event) {\n                    _vm.handleActions(\"clocelise\")\n                  }\n                }\n              })\n            ])\n          ]\n        ),\n        _c(\n          \"div\",\n          { staticClass: \"el-image-viewer__canvas\" },\n          _vm._l(_vm.urlList, function(url, i) {\n            return i === _vm.index\n              ? _c(\"img\", {\n                  key: url,\n                  ref: \"img\",\n                  refInFor: true,\n                  staticClass: \"el-image-viewer__img\",\n                  style: _vm.imgStyle,\n                  attrs: { src: _vm.currentImg },\n                  on: {\n                    load: _vm.handleImgLoad,\n                    error: _vm.handleImgError,\n                    mousedown: _vm.handleMouseDown\n                  }\n                })\n              : _vm._e()\n          }),\n          0\n        )\n      ],\n      2\n    )\n  ])\n}\nvar image_viewervue_type_template_id_5e73b307_staticRenderFns = []\nimage_viewervue_type_template_id_5e73b307_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/image/src/image-viewer.vue?vue&type=template&id=5e73b307&\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/image/src/image-viewer.vue?vue&type=script&lang=js&\nvar image_viewervue_type_script_lang_js_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\nvar Mode = {\n  CONTAIN: {\n    name: 'contain',\n    icon: 'el-icon-full-screen'\n  },\n  ORIGINAL: {\n    name: 'original',\n    icon: 'el-icon-c-scale-to-original'\n  }\n};\n\nvar mousewheelEventName = Object(util_[\"isFirefox\"])() ? 'DOMMouseScroll' : 'mousewheel';\n\n/* harmony default export */ var image_viewervue_type_script_lang_js_ = ({\n  name: 'elImageViewer',\n\n  props: {\n    urlList: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    zIndex: {\n      type: Number,\n      default: 2000\n    },\n    onSwitch: {\n      type: Function,\n      default: function _default() {}\n    },\n    onClose: {\n      type: Function,\n      default: function _default() {}\n    },\n    initialIndex: {\n      type: Number,\n      default: 0\n    },\n    appendToBody: {\n      type: Boolean,\n      default: true\n    },\n    maskClosable: {\n      type: Boolean,\n      default: true\n    }\n  },\n\n  data: function data() {\n    return {\n      index: this.initialIndex,\n      isShow: false,\n      infinite: true,\n      loading: false,\n      mode: Mode.CONTAIN,\n      transform: {\n        scale: 1,\n        deg: 0,\n        offsetX: 0,\n        offsetY: 0,\n        enableTransition: false\n      }\n    };\n  },\n\n  computed: {\n    isSingle: function isSingle() {\n      return this.urlList.length <= 1;\n    },\n    isFirst: function isFirst() {\n      return this.index === 0;\n    },\n    isLast: function isLast() {\n      return this.index === this.urlList.length - 1;\n    },\n    currentImg: function currentImg() {\n      return this.urlList[this.index];\n    },\n    imgStyle: function imgStyle() {\n      var _transform = this.transform,\n          scale = _transform.scale,\n          deg = _transform.deg,\n          offsetX = _transform.offsetX,\n          offsetY = _transform.offsetY,\n          enableTransition = _transform.enableTransition;\n\n      var style = {\n        transform: 'scale(' + scale + ') rotate(' + deg + 'deg)',\n        transition: enableTransition ? 'transform .3s' : '',\n        'margin-left': offsetX + 'px',\n        'margin-top': offsetY + 'px'\n      };\n      if (this.mode === Mode.CONTAIN) {\n        style.maxWidth = style.maxHeight = '100%';\n      }\n      return style;\n    },\n    viewerZIndex: function viewerZIndex() {\n      var nextZIndex = popup_[\"PopupManager\"].nextZIndex();\n      return this.zIndex > nextZIndex ? this.zIndex : nextZIndex;\n    }\n  },\n  watch: {\n    index: {\n      handler: function handler(val) {\n        this.reset();\n        this.onSwitch(val);\n      }\n    },\n    currentImg: function currentImg(val) {\n      var _this = this;\n\n      this.$nextTick(function (_) {\n        var $img = _this.$refs.img[0];\n        if (!$img.complete) {\n          _this.loading = true;\n        }\n      });\n    }\n  },\n  methods: {\n    hide: function hide() {\n      this.deviceSupportUninstall();\n      this.onClose();\n    },\n    deviceSupportInstall: function deviceSupportInstall() {\n      var _this2 = this;\n\n      this._keyDownHandler = function (e) {\n        e.stopPropagation();\n        var keyCode = e.keyCode;\n        switch (keyCode) {\n          // ESC\n          case 27:\n            _this2.hide();\n            break;\n          // SPACE\n          case 32:\n            _this2.toggleMode();\n            break;\n          // LEFT_ARROW\n          case 37:\n            _this2.prev();\n            break;\n          // UP_ARROW\n          case 38:\n            _this2.handleActions('zoomIn');\n            break;\n          // RIGHT_ARROW\n          case 39:\n            _this2.next();\n            break;\n          // DOWN_ARROW\n          case 40:\n            _this2.handleActions('zoomOut');\n            break;\n        }\n      };\n      this._mouseWheelHandler = Object(util_[\"rafThrottle\"])(function (e) {\n        var delta = e.wheelDelta ? e.wheelDelta : -e.detail;\n        if (delta > 0) {\n          _this2.handleActions('zoomIn', {\n            zoomRate: 0.015,\n            enableTransition: false\n          });\n        } else {\n          _this2.handleActions('zoomOut', {\n            zoomRate: 0.015,\n            enableTransition: false\n          });\n        }\n      });\n      Object(dom_[\"on\"])(document, 'keydown', this._keyDownHandler);\n      Object(dom_[\"on\"])(document, mousewheelEventName, this._mouseWheelHandler);\n    },\n    deviceSupportUninstall: function deviceSupportUninstall() {\n      Object(dom_[\"off\"])(document, 'keydown', this._keyDownHandler);\n      Object(dom_[\"off\"])(document, mousewheelEventName, this._mouseWheelHandler);\n      this._keyDownHandler = null;\n      this._mouseWheelHandler = null;\n    },\n    handleImgLoad: function handleImgLoad(e) {\n      this.loading = false;\n    },\n    handleImgError: function handleImgError(e) {\n      this.loading = false;\n      e.target.alt = '加载失败';\n    },\n    handleMouseDown: function handleMouseDown(e) {\n      var _this3 = this;\n\n      if (this.loading || e.button !== 0) return;\n\n      var _transform2 = this.transform,\n          offsetX = _transform2.offsetX,\n          offsetY = _transform2.offsetY;\n\n      var startX = e.pageX;\n      var startY = e.pageY;\n      this._dragHandler = Object(util_[\"rafThrottle\"])(function (ev) {\n        _this3.transform.offsetX = offsetX + ev.pageX - startX;\n        _this3.transform.offsetY = offsetY + ev.pageY - startY;\n      });\n      Object(dom_[\"on\"])(document, 'mousemove', this._dragHandler);\n      Object(dom_[\"on\"])(document, 'mouseup', function (ev) {\n        Object(dom_[\"off\"])(document, 'mousemove', _this3._dragHandler);\n      });\n\n      e.preventDefault();\n    },\n    handleMaskClick: function handleMaskClick() {\n      if (this.maskClosable) {\n        this.hide();\n      }\n    },\n    reset: function reset() {\n      this.transform = {\n        scale: 1,\n        deg: 0,\n        offsetX: 0,\n        offsetY: 0,\n        enableTransition: false\n      };\n    },\n    toggleMode: function toggleMode() {\n      if (this.loading) return;\n\n      var modeNames = Object.keys(Mode);\n      var modeValues = Object.values(Mode);\n      var index = modeValues.indexOf(this.mode);\n      var nextIndex = (index + 1) % modeNames.length;\n      this.mode = Mode[modeNames[nextIndex]];\n      this.reset();\n    },\n    prev: function prev() {\n      if (this.isFirst && !this.infinite) return;\n      var len = this.urlList.length;\n      this.index = (this.index - 1 + len) % len;\n    },\n    next: function next() {\n      if (this.isLast && !this.infinite) return;\n      var len = this.urlList.length;\n      this.index = (this.index + 1) % len;\n    },\n    handleActions: function handleActions(action) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (this.loading) return;\n\n      var _zoomRate$rotateDeg$e = image_viewervue_type_script_lang_js_extends({\n        zoomRate: 0.2,\n        rotateDeg: 90,\n        enableTransition: true\n      }, options),\n          zoomRate = _zoomRate$rotateDeg$e.zoomRate,\n          rotateDeg = _zoomRate$rotateDeg$e.rotateDeg,\n          enableTransition = _zoomRate$rotateDeg$e.enableTransition;\n\n      var transform = this.transform;\n\n      switch (action) {\n        case 'zoomOut':\n          if (transform.scale > 0.2) {\n            transform.scale = parseFloat((transform.scale - zoomRate).toFixed(3));\n          }\n          break;\n        case 'zoomIn':\n          transform.scale = parseFloat((transform.scale + zoomRate).toFixed(3));\n          break;\n        case 'clocelise':\n          transform.deg += rotateDeg;\n          break;\n        case 'anticlocelise':\n          transform.deg -= rotateDeg;\n          break;\n      }\n      transform.enableTransition = enableTransition;\n    }\n  },\n  mounted: function mounted() {\n    this.deviceSupportInstall();\n    if (this.appendToBody) {\n      document.body.appendChild(this.$el);\n    }\n    // add tabindex then wrapper can be focusable via Javascript\n    // focus wrapper so arrow key can't cause inner scroll behavior underneath\n    this.$refs['el-image-viewer__wrapper'].focus();\n  },\n  destroyed: function destroyed() {\n    // if appendToBody is true, remove DOM node after destroy\n    if (this.appendToBody && this.$el && this.$el.parentNode) {\n      this.$el.parentNode.removeChild(this.$el);\n    }\n  }\n});\n// CONCATENATED MODULE: ./packages/image/src/image-viewer.vue?vue&type=script&lang=js&\n /* harmony default export */ var src_image_viewervue_type_script_lang_js_ = (image_viewervue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/image/src/image-viewer.vue\n\n\n\n\n\n/* normalize component */\n\nvar image_viewer_component = normalizeComponent(\n  src_image_viewervue_type_script_lang_js_,\n  image_viewervue_type_template_id_5e73b307_render,\n  image_viewervue_type_template_id_5e73b307_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var image_viewer_api; }\nimage_viewer_component.options.__file = \"packages/image/src/image-viewer.vue\"\n/* harmony default export */ var image_viewer = (image_viewer_component.exports);\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/image/src/main.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n\n\nvar isSupportObjectFit = function isSupportObjectFit() {\n  return document.documentElement.style.objectFit !== undefined;\n};\n\nvar ObjectFit = {\n  NONE: 'none',\n  CONTAIN: 'contain',\n  COVER: 'cover',\n  FILL: 'fill',\n  SCALE_DOWN: 'scale-down'\n};\n\nvar prevOverflow = '';\n\n/* harmony default export */ var image_src_mainvue_type_script_lang_js_ = ({\n  name: 'ElImage',\n\n  mixins: [locale_default.a],\n  inheritAttrs: false,\n\n  components: {\n    ImageViewer: image_viewer\n  },\n\n  props: {\n    src: String,\n    fit: String,\n    lazy: Boolean,\n    scrollContainer: {},\n    previewSrcList: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    zIndex: {\n      type: Number,\n      default: 2000\n    }\n  },\n\n  data: function data() {\n    return {\n      loading: true,\n      error: false,\n      show: !this.lazy,\n      imageWidth: 0,\n      imageHeight: 0,\n      showViewer: false\n    };\n  },\n\n\n  computed: {\n    imageStyle: function imageStyle() {\n      var fit = this.fit;\n\n      if (!this.$isServer && fit) {\n        return isSupportObjectFit() ? { 'object-fit': fit } : this.getImageStyle(fit);\n      }\n      return {};\n    },\n    alignCenter: function alignCenter() {\n      return !this.$isServer && !isSupportObjectFit() && this.fit !== ObjectFit.FILL;\n    },\n    preview: function preview() {\n      var previewSrcList = this.previewSrcList;\n\n      return Array.isArray(previewSrcList) && previewSrcList.length > 0;\n    },\n    imageIndex: function imageIndex() {\n      var previewIndex = 0;\n      var srcIndex = this.previewSrcList.indexOf(this.src);\n      if (srcIndex >= 0) {\n        previewIndex = srcIndex;\n      }\n      return previewIndex;\n    }\n  },\n\n  watch: {\n    src: function src(val) {\n      this.show && this.loadImage();\n    },\n    show: function show(val) {\n      val && this.loadImage();\n    }\n  },\n\n  mounted: function mounted() {\n    if (this.lazy) {\n      this.addLazyLoadListener();\n    } else {\n      this.loadImage();\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.lazy && this.removeLazyLoadListener();\n  },\n\n\n  methods: {\n    loadImage: function loadImage() {\n      var _this = this;\n\n      if (this.$isServer) return;\n\n      // reset status\n      this.loading = true;\n      this.error = false;\n\n      var img = new Image();\n      img.onload = function (e) {\n        return _this.handleLoad(e, img);\n      };\n      img.onerror = this.handleError.bind(this);\n\n      // bind html attrs\n      // so it can behave consistently\n      Object.keys(this.$attrs).forEach(function (key) {\n        var value = _this.$attrs[key];\n        img.setAttribute(key, value);\n      });\n      img.src = this.src;\n    },\n    handleLoad: function handleLoad(e, img) {\n      this.imageWidth = img.width;\n      this.imageHeight = img.height;\n      this.loading = false;\n      this.error = false;\n    },\n    handleError: function handleError(e) {\n      this.loading = false;\n      this.error = true;\n      this.$emit('error', e);\n    },\n    handleLazyLoad: function handleLazyLoad() {\n      if (Object(dom_[\"isInContainer\"])(this.$el, this._scrollContainer)) {\n        this.show = true;\n        this.removeLazyLoadListener();\n      }\n    },\n    addLazyLoadListener: function addLazyLoadListener() {\n      if (this.$isServer) return;\n\n      var scrollContainer = this.scrollContainer;\n\n      var _scrollContainer = null;\n\n      if (Object(types_[\"isHtmlElement\"])(scrollContainer)) {\n        _scrollContainer = scrollContainer;\n      } else if (Object(types_[\"isString\"])(scrollContainer)) {\n        _scrollContainer = document.querySelector(scrollContainer);\n      } else {\n        _scrollContainer = Object(dom_[\"getScrollContainer\"])(this.$el);\n      }\n\n      if (_scrollContainer) {\n        this._scrollContainer = _scrollContainer;\n        this._lazyLoadHandler = throttle_default()(200, this.handleLazyLoad);\n        Object(dom_[\"on\"])(_scrollContainer, 'scroll', this._lazyLoadHandler);\n        this.handleLazyLoad();\n      }\n    },\n    removeLazyLoadListener: function removeLazyLoadListener() {\n      var _scrollContainer = this._scrollContainer,\n          _lazyLoadHandler = this._lazyLoadHandler;\n\n\n      if (this.$isServer || !_scrollContainer || !_lazyLoadHandler) return;\n\n      Object(dom_[\"off\"])(_scrollContainer, 'scroll', _lazyLoadHandler);\n      this._scrollContainer = null;\n      this._lazyLoadHandler = null;\n    },\n\n    /**\n     * simulate object-fit behavior to compatible with IE11 and other browsers which not support object-fit\n     */\n    getImageStyle: function getImageStyle(fit) {\n      var imageWidth = this.imageWidth,\n          imageHeight = this.imageHeight;\n      var _$el = this.$el,\n          containerWidth = _$el.clientWidth,\n          containerHeight = _$el.clientHeight;\n\n\n      if (!imageWidth || !imageHeight || !containerWidth || !containerHeight) return {};\n\n      var imageAspectRatio = imageWidth / imageHeight;\n      var containerAspectRatio = containerWidth / containerHeight;\n\n      if (fit === ObjectFit.SCALE_DOWN) {\n        var isSmaller = imageWidth < containerWidth && imageHeight < containerHeight;\n        fit = isSmaller ? ObjectFit.NONE : ObjectFit.CONTAIN;\n      }\n\n      switch (fit) {\n        case ObjectFit.NONE:\n          return { width: 'auto', height: 'auto' };\n        case ObjectFit.CONTAIN:\n          return imageAspectRatio < containerAspectRatio ? { width: 'auto' } : { height: 'auto' };\n        case ObjectFit.COVER:\n          return imageAspectRatio < containerAspectRatio ? { height: 'auto' } : { width: 'auto' };\n        default:\n          return {};\n      }\n    },\n    clickHandler: function clickHandler() {\n      // don't show viewer when preview is false\n      if (!this.preview) {\n        return;\n      }\n      // prevent body scroll\n      prevOverflow = document.body.style.overflow;\n      document.body.style.overflow = 'hidden';\n      this.showViewer = true;\n    },\n    closeViewer: function closeViewer() {\n      document.body.style.overflow = prevOverflow;\n      this.showViewer = false;\n    }\n  }\n});\n// CONCATENATED MODULE: ./packages/image/src/main.vue?vue&type=script&lang=js&\n /* harmony default export */ var packages_image_src_mainvue_type_script_lang_js_ = (image_src_mainvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/image/src/main.vue\n\n\n\n\n\n/* normalize component */\n\nvar image_src_main_component = normalizeComponent(\n  packages_image_src_mainvue_type_script_lang_js_,\n  mainvue_type_template_id_44d84a7c_render,\n  mainvue_type_template_id_44d84a7c_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var image_src_main_api; }\nimage_src_main_component.options.__file = \"packages/image/src/main.vue\"\n/* harmony default export */ var image_src_main = (image_src_main_component.exports);\n// CONCATENATED MODULE: ./packages/image/index.js\n\n\n/* istanbul ignore next */\nimage_src_main.install = function (Vue) {\n  Vue.component(image_src_main.name, image_src_main);\n};\n\n/* harmony default export */ var packages_image = (image_src_main);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/calendar/src/main.vue?vue&type=template&id=6d9756be&\nvar mainvue_type_template_id_6d9756be_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"div\", { staticClass: \"el-calendar\" }, [\n    _c(\"div\", { staticClass: \"el-calendar__header\" }, [\n      _c(\"div\", { staticClass: \"el-calendar__title\" }, [\n        _vm._v(\"\\n      \" + _vm._s(_vm.i18nDate) + \"\\n    \")\n      ]),\n      _vm.validatedRange.length === 0\n        ? _c(\n            \"div\",\n            { staticClass: \"el-calendar__button-group\" },\n            [\n              _c(\n                \"el-button-group\",\n                [\n                  _c(\n                    \"el-button\",\n                    {\n                      attrs: { type: \"plain\", size: \"mini\" },\n                      on: {\n                        click: function($event) {\n                          _vm.selectDate(\"prev-month\")\n                        }\n                      }\n                    },\n                    [\n                      _vm._v(\n                        \"\\n          \" +\n                          _vm._s(_vm.t(\"el.datepicker.prevMonth\")) +\n                          \"\\n        \"\n                      )\n                    ]\n                  ),\n                  _c(\n                    \"el-button\",\n                    {\n                      attrs: { type: \"plain\", size: \"mini\" },\n                      on: {\n                        click: function($event) {\n                          _vm.selectDate(\"today\")\n                        }\n                      }\n                    },\n                    [\n                      _vm._v(\n                        \"\\n          \" +\n                          _vm._s(_vm.t(\"el.datepicker.today\")) +\n                          \"\\n        \"\n                      )\n                    ]\n                  ),\n                  _c(\n                    \"el-button\",\n                    {\n                      attrs: { type: \"plain\", size: \"mini\" },\n                      on: {\n                        click: function($event) {\n                          _vm.selectDate(\"next-month\")\n                        }\n                      }\n                    },\n                    [\n                      _vm._v(\n                        \"\\n          \" +\n                          _vm._s(_vm.t(\"el.datepicker.nextMonth\")) +\n                          \"\\n        \"\n                      )\n                    ]\n                  )\n                ],\n                1\n              )\n            ],\n            1\n          )\n        : _vm._e()\n    ]),\n    _vm.validatedRange.length === 0\n      ? _c(\n          \"div\",\n          { key: \"no-range\", staticClass: \"el-calendar__body\" },\n          [\n            _c(\"date-table\", {\n              attrs: {\n                date: _vm.date,\n                \"selected-day\": _vm.realSelectedDay,\n                \"first-day-of-week\": _vm.realFirstDayOfWeek\n              },\n              on: { pick: _vm.pickDay }\n            })\n          ],\n          1\n        )\n      : _c(\n          \"div\",\n          { key: \"has-range\", staticClass: \"el-calendar__body\" },\n          _vm._l(_vm.validatedRange, function(range, index) {\n            return _c(\"date-table\", {\n              key: index,\n              attrs: {\n                date: range[0],\n                \"selected-day\": _vm.realSelectedDay,\n                range: range,\n                \"hide-header\": index !== 0,\n                \"first-day-of-week\": _vm.realFirstDayOfWeek\n              },\n              on: { pick: _vm.pickDay }\n            })\n          }),\n          1\n        )\n  ])\n}\nvar mainvue_type_template_id_6d9756be_staticRenderFns = []\nmainvue_type_template_id_6d9756be_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/calendar/src/main.vue?vue&type=template&id=6d9756be&\n\n// EXTERNAL MODULE: external \"element-ui/lib/utils/date\"\nvar date_ = __webpack_require__(20);\nvar date_default = /*#__PURE__*/__webpack_require__.n(date_);\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/calendar/src/date-table.vue?vue&type=script&lang=js&\n\n\n\n\n/* harmony default export */ var src_date_tablevue_type_script_lang_js_ = ({\n  props: {\n    selectedDay: String, // formated date yyyy-MM-dd\n    range: {\n      type: Array,\n      validator: function validator(val) {\n        if (!(val && val.length)) return true;\n        var start = val[0],\n            end = val[1];\n\n        return Object(date_util_[\"validateRangeInOneMonth\"])(start, end);\n      }\n    },\n    date: Date,\n    hideHeader: Boolean,\n    firstDayOfWeek: Number\n  },\n\n  inject: ['elCalendar'],\n\n  methods: {\n    toNestedArr: function toNestedArr(days) {\n      return Object(date_util_[\"range\"])(days.length / 7).map(function (_, index) {\n        var start = index * 7;\n        return days.slice(start, start + 7);\n      });\n    },\n    getFormateDate: function getFormateDate(day, type) {\n      if (!day || ['prev', 'current', 'next'].indexOf(type) === -1) {\n        throw new Error('invalid day or type');\n      }\n      var prefix = this.curMonthDatePrefix;\n      if (type === 'prev') {\n        prefix = this.prevMonthDatePrefix;\n      } else if (type === 'next') {\n        prefix = this.nextMonthDatePrefix;\n      }\n      day = ('00' + day).slice(-2);\n      return prefix + '-' + day;\n    },\n    getCellClass: function getCellClass(_ref) {\n      var text = _ref.text,\n          type = _ref.type;\n\n      var classes = [type];\n      if (type === 'current') {\n        var date = this.getFormateDate(text, type);\n        if (date === this.selectedDay) {\n          classes.push('is-selected');\n        }\n        if (date === this.formatedToday) {\n          classes.push('is-today');\n        }\n      }\n      return classes;\n    },\n    pickDay: function pickDay(_ref2) {\n      var text = _ref2.text,\n          type = _ref2.type;\n\n      var date = this.getFormateDate(text, type);\n      this.$emit('pick', date);\n    },\n    cellRenderProxy: function cellRenderProxy(_ref3) {\n      var text = _ref3.text,\n          type = _ref3.type;\n      var h = this.$createElement;\n\n      var render = this.elCalendar.$scopedSlots.dateCell;\n      if (!render) return h('span', [text]);\n\n      var day = this.getFormateDate(text, type);\n      var date = new Date(day);\n      var data = {\n        isSelected: this.selectedDay === day,\n        type: type + '-month',\n        day: day\n      };\n      return render({ date: date, data: data });\n    }\n  },\n\n  computed: {\n    WEEK_DAYS: function WEEK_DAYS() {\n      return Object(date_util_[\"getI18nSettings\"])().dayNames;\n    },\n    prevMonthDatePrefix: function prevMonthDatePrefix() {\n      var temp = new Date(this.date.getTime());\n      temp.setDate(0);\n      return date_default.a.format(temp, 'yyyy-MM');\n    },\n    curMonthDatePrefix: function curMonthDatePrefix() {\n      return date_default.a.format(this.date, 'yyyy-MM');\n    },\n    nextMonthDatePrefix: function nextMonthDatePrefix() {\n      var temp = new Date(this.date.getFullYear(), this.date.getMonth() + 1, 1);\n      return date_default.a.format(temp, 'yyyy-MM');\n    },\n    formatedToday: function formatedToday() {\n      return this.elCalendar.formatedToday;\n    },\n    isInRange: function isInRange() {\n      return this.range && this.range.length;\n    },\n    rows: function rows() {\n      var days = [];\n      // if range exists, should render days in range.\n      if (this.isInRange) {\n        var _range = this.range,\n            start = _range[0],\n            end = _range[1];\n\n        var currentMonthRange = Object(date_util_[\"range\"])(end.getDate() - start.getDate() + 1).map(function (_, index) {\n          return {\n            text: start.getDate() + index,\n            type: 'current'\n          };\n        });\n        var remaining = currentMonthRange.length % 7;\n        remaining = remaining === 0 ? 0 : 7 - remaining;\n        var nextMonthRange = Object(date_util_[\"range\"])(remaining).map(function (_, index) {\n          return {\n            text: index + 1,\n            type: 'next'\n          };\n        });\n        days = currentMonthRange.concat(nextMonthRange);\n      } else {\n        var date = this.date;\n        var firstDay = Object(date_util_[\"getFirstDayOfMonth\"])(date);\n        firstDay = firstDay === 0 ? 7 : firstDay;\n        var firstDayOfWeek = typeof this.firstDayOfWeek === 'number' ? this.firstDayOfWeek : 1;\n        var offset = (7 + firstDay - firstDayOfWeek) % 7;\n        var prevMonthDays = Object(date_util_[\"getPrevMonthLastDays\"])(date, offset).map(function (day) {\n          return {\n            text: day,\n            type: 'prev'\n          };\n        });\n        var currentMonthDays = Object(date_util_[\"getMonthDays\"])(date).map(function (day) {\n          return {\n            text: day,\n            type: 'current'\n          };\n        });\n        days = [].concat(prevMonthDays, currentMonthDays);\n        var nextMonthDays = Object(date_util_[\"range\"])(42 - days.length).map(function (_, index) {\n          return {\n            text: index + 1,\n            type: 'next'\n          };\n        });\n        days = days.concat(nextMonthDays);\n      }\n      return this.toNestedArr(days);\n    },\n    weekDays: function weekDays() {\n      var start = this.firstDayOfWeek;\n      var WEEK_DAYS = this.WEEK_DAYS;\n\n\n      if (typeof start !== 'number' || start === 0) {\n        return WEEK_DAYS.slice();\n      } else {\n        return WEEK_DAYS.slice(start).concat(WEEK_DAYS.slice(0, start));\n      }\n    }\n  },\n\n  render: function render() {\n    var _this = this;\n\n    var h = arguments[0];\n\n    var thead = this.hideHeader ? null : h('thead', [this.weekDays.map(function (day) {\n      return h(\n        'th',\n        { key: day },\n        [day]\n      );\n    })]);\n    return h(\n      'table',\n      {\n        'class': {\n          'el-calendar-table': true,\n          'is-range': this.isInRange\n        },\n        attrs: { cellspacing: '0',\n          cellpadding: '0' }\n      },\n      [thead, h('tbody', [this.rows.map(function (row, index) {\n        return h(\n          'tr',\n          {\n            'class': {\n              'el-calendar-table__row': true,\n              'el-calendar-table__row--hide-border': index === 0 && _this.hideHeader\n            },\n            key: index },\n          [row.map(function (cell, key) {\n            return h(\n              'td',\n              { key: key,\n                'class': _this.getCellClass(cell),\n                on: {\n                  'click': _this.pickDay.bind(_this, cell)\n                }\n              },\n              [h(\n                'div',\n                { 'class': 'el-calendar-day' },\n                [_this.cellRenderProxy(cell)]\n              )]\n            );\n          })]\n        );\n      })])]\n    );\n  }\n});\n// CONCATENATED MODULE: ./packages/calendar/src/date-table.vue?vue&type=script&lang=js&\n /* harmony default export */ var calendar_src_date_tablevue_type_script_lang_js_ = (src_date_tablevue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/calendar/src/date-table.vue\nvar date_table_render, date_table_staticRenderFns\n\n\n\n\n/* normalize component */\n\nvar src_date_table_component = normalizeComponent(\n  calendar_src_date_tablevue_type_script_lang_js_,\n  date_table_render,\n  date_table_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var src_date_table_api; }\nsrc_date_table_component.options.__file = \"packages/calendar/src/date-table.vue\"\n/* harmony default export */ var src_date_table = (src_date_table_component.exports);\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/calendar/src/main.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n\n\n\nvar validTypes = ['prev-month', 'today', 'next-month'];\nvar weekDays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\nvar oneDay = 86400000;\n\n/* harmony default export */ var calendar_src_mainvue_type_script_lang_js_ = ({\n  name: 'ElCalendar',\n\n  mixins: [locale_default.a],\n\n  components: {\n    DateTable: src_date_table,\n    ElButton: button_default.a,\n    ElButtonGroup: button_group_default.a\n  },\n\n  props: {\n    value: [Date, String, Number],\n    range: {\n      type: Array,\n      validator: function validator(range) {\n        if (Array.isArray(range)) {\n          return range.length === 2 && range.every(function (item) {\n            return typeof item === 'string' || typeof item === 'number' || item instanceof Date;\n          });\n        } else {\n          return true;\n        }\n      }\n    },\n    firstDayOfWeek: {\n      type: Number,\n      default: 1\n    }\n  },\n\n  provide: function provide() {\n    return {\n      elCalendar: this\n    };\n  },\n\n\n  methods: {\n    pickDay: function pickDay(day) {\n      this.realSelectedDay = day;\n    },\n    selectDate: function selectDate(type) {\n      if (validTypes.indexOf(type) === -1) {\n        throw new Error('invalid type ' + type);\n      }\n      var day = '';\n      if (type === 'prev-month') {\n        day = this.prevMonthDatePrefix + '-01';\n      } else if (type === 'next-month') {\n        day = this.nextMonthDatePrefix + '-01';\n      } else {\n        day = this.formatedToday;\n      }\n\n      if (day === this.formatedDate) return;\n      this.pickDay(day);\n    },\n    toDate: function toDate(val) {\n      if (!val) {\n        throw new Error('invalid val');\n      }\n      return val instanceof Date ? val : new Date(val);\n    },\n    rangeValidator: function rangeValidator(date, isStart) {\n      var firstDayOfWeek = this.realFirstDayOfWeek;\n      var expected = isStart ? firstDayOfWeek : firstDayOfWeek === 0 ? 6 : firstDayOfWeek - 1;\n      var message = (isStart ? 'start' : 'end') + ' of range should be ' + weekDays[expected] + '.';\n      if (date.getDay() !== expected) {\n        console.warn('[ElementCalendar]', message, 'Invalid range will be ignored.');\n        return false;\n      }\n      return true;\n    }\n  },\n\n  computed: {\n    prevMonthDatePrefix: function prevMonthDatePrefix() {\n      var temp = new Date(this.date.getTime());\n      temp.setDate(0);\n      return date_default.a.format(temp, 'yyyy-MM');\n    },\n    curMonthDatePrefix: function curMonthDatePrefix() {\n      return date_default.a.format(this.date, 'yyyy-MM');\n    },\n    nextMonthDatePrefix: function nextMonthDatePrefix() {\n      var temp = new Date(this.date.getFullYear(), this.date.getMonth() + 1, 1);\n      return date_default.a.format(temp, 'yyyy-MM');\n    },\n    formatedDate: function formatedDate() {\n      return date_default.a.format(this.date, 'yyyy-MM-dd');\n    },\n    i18nDate: function i18nDate() {\n      var year = this.date.getFullYear();\n      var month = this.date.getMonth() + 1;\n      return year + ' ' + this.t('el.datepicker.year') + ' ' + this.t('el.datepicker.month' + month);\n    },\n    formatedToday: function formatedToday() {\n      return date_default.a.format(this.now, 'yyyy-MM-dd');\n    },\n\n\n    realSelectedDay: {\n      get: function get() {\n        if (!this.value) return this.selectedDay;\n        return this.formatedDate;\n      },\n      set: function set(val) {\n        this.selectedDay = val;\n        var date = new Date(val);\n        this.$emit('input', date);\n      }\n    },\n\n    date: function date() {\n      if (!this.value) {\n        if (this.realSelectedDay) {\n          var d = this.selectedDay.split('-');\n          return new Date(d[0], d[1] - 1, d[2]);\n        } else if (this.validatedRange.length) {\n          return this.validatedRange[0][0];\n        }\n        return this.now;\n      } else {\n        return this.toDate(this.value);\n      }\n    },\n\n\n    // if range is valid, we get a two-digit array\n    validatedRange: function validatedRange() {\n      var _this = this;\n\n      var range = this.range;\n      if (!range) return [];\n      range = range.reduce(function (prev, val, index) {\n        var date = _this.toDate(val);\n        if (_this.rangeValidator(date, index === 0)) {\n          prev = prev.concat(date);\n        }\n        return prev;\n      }, []);\n      if (range.length === 2) {\n        var _range = range,\n            start = _range[0],\n            end = _range[1];\n\n        if (start > end) {\n          console.warn('[ElementCalendar]end time should be greater than start time');\n          return [];\n        }\n        // start time and end time in one month\n        if (Object(date_util_[\"validateRangeInOneMonth\"])(start, end)) {\n          return [[start, end]];\n        }\n        var data = [];\n        var startDay = new Date(start.getFullYear(), start.getMonth() + 1, 1);\n        var lastDay = this.toDate(startDay.getTime() - oneDay);\n        if (!Object(date_util_[\"validateRangeInOneMonth\"])(startDay, end)) {\n          console.warn('[ElementCalendar]start time and end time interval must not exceed two months');\n          return [];\n        }\n        // 第一个月的时间范围\n        data.push([start, lastDay]);\n        // 下一月的时间范围，需要计算一下该月的第一个周起始日\n        var firstDayOfWeek = this.realFirstDayOfWeek;\n        var nextMontFirstDay = startDay.getDay();\n        var interval = 0;\n        if (nextMontFirstDay !== firstDayOfWeek) {\n          if (firstDayOfWeek === 0) {\n            interval = 7 - nextMontFirstDay;\n          } else {\n            interval = firstDayOfWeek - nextMontFirstDay;\n            interval = interval > 0 ? interval : 7 + interval;\n          }\n        }\n        startDay = this.toDate(startDay.getTime() + interval * oneDay);\n        if (startDay.getDate() < end.getDate()) {\n          data.push([startDay, end]);\n        }\n        return data;\n      }\n      return [];\n    },\n    realFirstDayOfWeek: function realFirstDayOfWeek() {\n      if (this.firstDayOfWeek < 1 || this.firstDayOfWeek > 6) {\n        return 0;\n      }\n      return Math.floor(this.firstDayOfWeek);\n    }\n  },\n\n  data: function data() {\n    return {\n      selectedDay: '',\n      now: new Date()\n    };\n  }\n});\n// CONCATENATED MODULE: ./packages/calendar/src/main.vue?vue&type=script&lang=js&\n /* harmony default export */ var packages_calendar_src_mainvue_type_script_lang_js_ = (calendar_src_mainvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/calendar/src/main.vue\n\n\n\n\n\n/* normalize component */\n\nvar calendar_src_main_component = normalizeComponent(\n  packages_calendar_src_mainvue_type_script_lang_js_,\n  mainvue_type_template_id_6d9756be_render,\n  mainvue_type_template_id_6d9756be_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var calendar_src_main_api; }\ncalendar_src_main_component.options.__file = \"packages/calendar/src/main.vue\"\n/* harmony default export */ var calendar_src_main = (calendar_src_main_component.exports);\n// CONCATENATED MODULE: ./packages/calendar/index.js\n\n\n/* istanbul ignore next */\ncalendar_src_main.install = function (Vue) {\n  Vue.component(calendar_src_main.name, calendar_src_main);\n};\n\n/* harmony default export */ var calendar = (calendar_src_main);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/backtop/src/main.vue?vue&type=template&id=257dd4a9&\nvar mainvue_type_template_id_257dd4a9_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"transition\", { attrs: { name: \"el-fade-in\" } }, [\n    _vm.visible\n      ? _c(\n          \"div\",\n          {\n            staticClass: \"el-backtop\",\n            style: {\n              right: _vm.styleRight,\n              bottom: _vm.styleBottom\n            },\n            on: {\n              click: function($event) {\n                $event.stopPropagation()\n                return _vm.handleClick($event)\n              }\n            }\n          },\n          [\n            _vm._t(\"default\", [_c(\"el-icon\", { attrs: { name: \"caret-top\" } })])\n          ],\n          2\n        )\n      : _vm._e()\n  ])\n}\nvar mainvue_type_template_id_257dd4a9_staticRenderFns = []\nmainvue_type_template_id_257dd4a9_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/backtop/src/main.vue?vue&type=template&id=257dd4a9&\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/backtop/src/main.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\nvar cubic = function cubic(value) {\n  return Math.pow(value, 3);\n};\nvar easeInOutCubic = function easeInOutCubic(value) {\n  return value < 0.5 ? cubic(value * 2) / 2 : 1 - cubic((1 - value) * 2) / 2;\n};\n\n/* harmony default export */ var backtop_src_mainvue_type_script_lang_js_ = ({\n  name: 'ElBacktop',\n\n  props: {\n    visibilityHeight: {\n      type: Number,\n      default: 200\n    },\n    target: [String],\n    right: {\n      type: Number,\n      default: 40\n    },\n    bottom: {\n      type: Number,\n      default: 40\n    }\n  },\n\n  data: function data() {\n    return {\n      el: null,\n      container: null,\n      visible: false\n    };\n  },\n\n\n  computed: {\n    styleBottom: function styleBottom() {\n      return this.bottom + 'px';\n    },\n    styleRight: function styleRight() {\n      return this.right + 'px';\n    }\n  },\n\n  mounted: function mounted() {\n    this.init();\n    this.throttledScrollHandler = throttle_default()(300, this.onScroll);\n    this.container.addEventListener('scroll', this.throttledScrollHandler);\n  },\n\n\n  methods: {\n    init: function init() {\n      this.container = document;\n      this.el = document.documentElement;\n      if (this.target) {\n        this.el = document.querySelector(this.target);\n        if (!this.el) {\n          throw new Error('target is not existed: ' + this.target);\n        }\n        this.container = this.el;\n      }\n    },\n    onScroll: function onScroll() {\n      var scrollTop = this.el.scrollTop;\n      this.visible = scrollTop >= this.visibilityHeight;\n    },\n    handleClick: function handleClick(e) {\n      this.scrollToTop();\n      this.$emit('click', e);\n    },\n    scrollToTop: function scrollToTop() {\n      var el = this.el;\n      var beginTime = Date.now();\n      var beginValue = el.scrollTop;\n      var rAF = window.requestAnimationFrame || function (func) {\n        return setTimeout(func, 16);\n      };\n      var frameFunc = function frameFunc() {\n        var progress = (Date.now() - beginTime) / 500;\n        if (progress < 1) {\n          el.scrollTop = beginValue * (1 - easeInOutCubic(progress));\n          rAF(frameFunc);\n        } else {\n          el.scrollTop = 0;\n        }\n      };\n      rAF(frameFunc);\n    }\n  },\n\n  beforeDestroy: function beforeDestroy() {\n    this.container.removeEventListener('scroll', this.throttledScrollHandler);\n  }\n});\n// CONCATENATED MODULE: ./packages/backtop/src/main.vue?vue&type=script&lang=js&\n /* harmony default export */ var packages_backtop_src_mainvue_type_script_lang_js_ = (backtop_src_mainvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/backtop/src/main.vue\n\n\n\n\n\n/* normalize component */\n\nvar backtop_src_main_component = normalizeComponent(\n  packages_backtop_src_mainvue_type_script_lang_js_,\n  mainvue_type_template_id_257dd4a9_render,\n  mainvue_type_template_id_257dd4a9_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var backtop_src_main_api; }\nbacktop_src_main_component.options.__file = \"packages/backtop/src/main.vue\"\n/* harmony default export */ var backtop_src_main = (backtop_src_main_component.exports);\n// CONCATENATED MODULE: ./packages/backtop/index.js\n\n\n/* istanbul ignore next */\nbacktop_src_main.install = function (Vue) {\n  Vue.component(backtop_src_main.name, backtop_src_main);\n};\n\n/* harmony default export */ var backtop = (backtop_src_main);\n// CONCATENATED MODULE: ./packages/infinite-scroll/src/main.js\n\n\n\n\nvar getStyleComputedProperty = function getStyleComputedProperty(element, property) {\n  if (element === window) {\n    element = document.documentElement;\n  }\n\n  if (element.nodeType !== 1) {\n    return [];\n  }\n  // NOTE: 1 DOM access here\n  var css = window.getComputedStyle(element, null);\n  return property ? css[property] : css;\n};\n\nvar entries = function entries(obj) {\n  return Object.keys(obj || {}).map(function (key) {\n    return [key, obj[key]];\n  });\n};\n\nvar getPositionSize = function getPositionSize(el, prop) {\n  return el === window || el === document ? document.documentElement[prop] : el[prop];\n};\n\nvar getOffsetHeight = function getOffsetHeight(el) {\n  return getPositionSize(el, 'offsetHeight');\n};\n\nvar getClientHeight = function getClientHeight(el) {\n  return getPositionSize(el, 'clientHeight');\n};\n\nvar scope = 'ElInfiniteScroll';\nvar attributes = {\n  delay: {\n    type: Number,\n    default: 200\n  },\n  distance: {\n    type: Number,\n    default: 0\n  },\n  disabled: {\n    type: Boolean,\n    default: false\n  },\n  immediate: {\n    type: Boolean,\n    default: true\n  }\n};\n\nvar main_getScrollOptions = function getScrollOptions(el, vm) {\n  if (!Object(types_[\"isHtmlElement\"])(el)) return {};\n\n  return entries(attributes).reduce(function (map, _ref) {\n    var key = _ref[0],\n        option = _ref[1];\n    var type = option.type,\n        defaultValue = option.default;\n\n    var value = el.getAttribute('infinite-scroll-' + key);\n    value = Object(types_[\"isUndefined\"])(vm[value]) ? value : vm[value];\n    switch (type) {\n      case Number:\n        value = Number(value);\n        value = Number.isNaN(value) ? defaultValue : value;\n        break;\n      case Boolean:\n        value = Object(types_[\"isDefined\"])(value) ? value === 'false' ? false : Boolean(value) : defaultValue;\n        break;\n      default:\n        value = type(value);\n    }\n    map[key] = value;\n    return map;\n  }, {});\n};\n\nvar getElementTop = function getElementTop(el) {\n  return el.getBoundingClientRect().top;\n};\n\nvar main_handleScroll = function handleScroll(cb) {\n  var _scope = this[scope],\n      el = _scope.el,\n      vm = _scope.vm,\n      container = _scope.container,\n      observer = _scope.observer;\n\n  var _getScrollOptions = main_getScrollOptions(el, vm),\n      distance = _getScrollOptions.distance,\n      disabled = _getScrollOptions.disabled;\n\n  if (disabled) return;\n\n  var containerInfo = container.getBoundingClientRect();\n  if (!containerInfo.width && !containerInfo.height) return;\n\n  var shouldTrigger = false;\n\n  if (container === el) {\n    // be aware of difference between clientHeight & offsetHeight & window.getComputedStyle().height\n    var scrollBottom = container.scrollTop + getClientHeight(container);\n    shouldTrigger = container.scrollHeight - scrollBottom <= distance;\n  } else {\n    var heightBelowTop = getOffsetHeight(el) + getElementTop(el) - getElementTop(container);\n    var offsetHeight = getOffsetHeight(container);\n    var borderBottom = Number.parseFloat(getStyleComputedProperty(container, 'borderBottomWidth'));\n    shouldTrigger = heightBelowTop - offsetHeight + borderBottom <= distance;\n  }\n\n  if (shouldTrigger && Object(types_[\"isFunction\"])(cb)) {\n    cb.call(vm);\n  } else if (observer) {\n    observer.disconnect();\n    this[scope].observer = null;\n  }\n};\n\n/* harmony default export */ var infinite_scroll_src_main = ({\n  name: 'InfiniteScroll',\n  inserted: function inserted(el, binding, vnode) {\n    var cb = binding.value;\n\n    var vm = vnode.context;\n    // only include vertical scroll\n    var container = Object(dom_[\"getScrollContainer\"])(el, true);\n\n    var _getScrollOptions2 = main_getScrollOptions(el, vm),\n        delay = _getScrollOptions2.delay,\n        immediate = _getScrollOptions2.immediate;\n\n    var onScroll = debounce_default()(delay, main_handleScroll.bind(el, cb));\n\n    el[scope] = { el: el, vm: vm, container: container, onScroll: onScroll };\n\n    if (container) {\n      container.addEventListener('scroll', onScroll);\n\n      if (immediate) {\n        var observer = el[scope].observer = new MutationObserver(onScroll);\n        observer.observe(container, { childList: true, subtree: true });\n        onScroll();\n      }\n    }\n  },\n  unbind: function unbind(el) {\n    var _el$scope = el[scope],\n        container = _el$scope.container,\n        onScroll = _el$scope.onScroll;\n\n    if (container) {\n      container.removeEventListener('scroll', onScroll);\n    }\n  }\n});\n// CONCATENATED MODULE: ./packages/infinite-scroll/index.js\n\n\n/* istanbul ignore next */\ninfinite_scroll_src_main.install = function (Vue) {\n  Vue.directive(infinite_scroll_src_main.name, infinite_scroll_src_main);\n};\n\n/* harmony default export */ var infinite_scroll = (infinite_scroll_src_main);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/page-header/src/main.vue?vue&type=template&id=5070954c&\nvar mainvue_type_template_id_5070954c_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"div\", { staticClass: \"el-page-header\" }, [\n    _c(\n      \"div\",\n      {\n        staticClass: \"el-page-header__left\",\n        on: {\n          click: function($event) {\n            _vm.$emit(\"back\")\n          }\n        }\n      },\n      [\n        _c(\"i\", { staticClass: \"el-icon-back\" }),\n        _c(\n          \"div\",\n          { staticClass: \"el-page-header__title\" },\n          [_vm._t(\"title\", [_vm._v(_vm._s(_vm.title))])],\n          2\n        )\n      ]\n    ),\n    _c(\n      \"div\",\n      { staticClass: \"el-page-header__content\" },\n      [_vm._t(\"content\", [_vm._v(_vm._s(_vm.content))])],\n      2\n    )\n  ])\n}\nvar mainvue_type_template_id_5070954c_staticRenderFns = []\nmainvue_type_template_id_5070954c_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/page-header/src/main.vue?vue&type=template&id=5070954c&\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/page-header/src/main.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n/* harmony default export */ var page_header_src_mainvue_type_script_lang_js_ = ({\n  name: 'ElPageHeader',\n\n  props: {\n    title: {\n      type: String,\n      default: function _default() {\n        return Object(lib_locale_[\"t\"])('el.pageHeader.title');\n      }\n    },\n    content: String\n  }\n});\n// CONCATENATED MODULE: ./packages/page-header/src/main.vue?vue&type=script&lang=js&\n /* harmony default export */ var packages_page_header_src_mainvue_type_script_lang_js_ = (page_header_src_mainvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/page-header/src/main.vue\n\n\n\n\n\n/* normalize component */\n\nvar page_header_src_main_component = normalizeComponent(\n  packages_page_header_src_mainvue_type_script_lang_js_,\n  mainvue_type_template_id_5070954c_render,\n  mainvue_type_template_id_5070954c_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var page_header_src_main_api; }\npage_header_src_main_component.options.__file = \"packages/page-header/src/main.vue\"\n/* harmony default export */ var page_header_src_main = (page_header_src_main_component.exports);\n// CONCATENATED MODULE: ./packages/page-header/index.js\n\n\n/* istanbul ignore next */\npage_header_src_main.install = function (Vue) {\n  Vue.component(page_header_src_main.name, page_header_src_main);\n};\n\n/* harmony default export */ var page_header = (page_header_src_main);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/cascader-panel/src/cascader-panel.vue?vue&type=template&id=34932346&\nvar cascader_panelvue_type_template_id_34932346_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    {\n      class: [\"el-cascader-panel\", _vm.border && \"is-bordered\"],\n      on: { keydown: _vm.handleKeyDown }\n    },\n    _vm._l(_vm.menus, function(menu, index) {\n      return _c(\"cascader-menu\", {\n        key: index,\n        ref: \"menu\",\n        refInFor: true,\n        attrs: { index: index, nodes: menu }\n      })\n    }),\n    1\n  )\n}\nvar cascader_panelvue_type_template_id_34932346_staticRenderFns = []\ncascader_panelvue_type_template_id_34932346_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/cascader-panel/src/cascader-panel.vue?vue&type=template&id=34932346&\n\n// EXTERNAL MODULE: external \"element-ui/lib/radio\"\nvar radio_ = __webpack_require__(43);\nvar radio_default = /*#__PURE__*/__webpack_require__.n(radio_);\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/cascader-panel/src/cascader-node.vue?vue&type=script&lang=js&\n\n\n\n\n\n\nvar stopPropagation = function stopPropagation(e) {\n  return e.stopPropagation();\n};\n\n/* harmony default export */ var cascader_nodevue_type_script_lang_js_ = ({\n  inject: ['panel'],\n\n  components: {\n    ElCheckbox: checkbox_default.a,\n    ElRadio: radio_default.a\n  },\n\n  props: {\n    node: {\n      required: true\n    },\n    nodeId: String\n  },\n\n  computed: {\n    config: function config() {\n      return this.panel.config;\n    },\n    isLeaf: function isLeaf() {\n      return this.node.isLeaf;\n    },\n    isDisabled: function isDisabled() {\n      return this.node.isDisabled;\n    },\n    checkedValue: function checkedValue() {\n      return this.panel.checkedValue;\n    },\n    isChecked: function isChecked() {\n      return this.node.isSameNode(this.checkedValue);\n    },\n    inActivePath: function inActivePath() {\n      return this.isInPath(this.panel.activePath);\n    },\n    inCheckedPath: function inCheckedPath() {\n      var _this = this;\n\n      if (!this.config.checkStrictly) return false;\n\n      return this.panel.checkedNodePaths.some(function (checkedPath) {\n        return _this.isInPath(checkedPath);\n      });\n    },\n    value: function value() {\n      return this.node.getValueByOption();\n    }\n  },\n\n  methods: {\n    handleExpand: function handleExpand() {\n      var _this2 = this;\n\n      var panel = this.panel,\n          node = this.node,\n          isDisabled = this.isDisabled,\n          config = this.config;\n      var multiple = config.multiple,\n          checkStrictly = config.checkStrictly;\n\n\n      if (!checkStrictly && isDisabled || node.loading) return;\n\n      if (config.lazy && !node.loaded) {\n        panel.lazyLoad(node, function () {\n          // do not use cached leaf value here, invoke this.isLeaf to get new value.\n          var isLeaf = _this2.isLeaf;\n\n\n          if (!isLeaf) _this2.handleExpand();\n          if (multiple) {\n            // if leaf sync checked state, else clear checked state\n            var checked = isLeaf ? node.checked : false;\n            _this2.handleMultiCheckChange(checked);\n          }\n        });\n      } else {\n        panel.handleExpand(node);\n      }\n    },\n    handleCheckChange: function handleCheckChange() {\n      var panel = this.panel,\n          value = this.value,\n          node = this.node;\n\n      panel.handleCheckChange(value);\n      panel.handleExpand(node);\n    },\n    handleMultiCheckChange: function handleMultiCheckChange(checked) {\n      this.node.doCheck(checked);\n      this.panel.calculateMultiCheckedValue();\n    },\n    isInPath: function isInPath(pathNodes) {\n      var node = this.node;\n\n      var selectedPathNode = pathNodes[node.level - 1] || {};\n      return selectedPathNode.uid === node.uid;\n    },\n    renderPrefix: function renderPrefix(h) {\n      var isLeaf = this.isLeaf,\n          isChecked = this.isChecked,\n          config = this.config;\n      var checkStrictly = config.checkStrictly,\n          multiple = config.multiple;\n\n\n      if (multiple) {\n        return this.renderCheckbox(h);\n      } else if (checkStrictly) {\n        return this.renderRadio(h);\n      } else if (isLeaf && isChecked) {\n        return this.renderCheckIcon(h);\n      }\n\n      return null;\n    },\n    renderPostfix: function renderPostfix(h) {\n      var node = this.node,\n          isLeaf = this.isLeaf;\n\n\n      if (node.loading) {\n        return this.renderLoadingIcon(h);\n      } else if (!isLeaf) {\n        return this.renderExpandIcon(h);\n      }\n\n      return null;\n    },\n    renderCheckbox: function renderCheckbox(h) {\n      var node = this.node,\n          config = this.config,\n          isDisabled = this.isDisabled;\n\n      var events = {\n        on: { change: this.handleMultiCheckChange },\n        nativeOn: {}\n      };\n\n      if (config.checkStrictly) {\n        // when every node is selectable, click event should not trigger expand event.\n        events.nativeOn.click = stopPropagation;\n      }\n\n      return h('el-checkbox', external_babel_helper_vue_jsx_merge_props_default()([{\n        attrs: {\n          value: node.checked,\n          indeterminate: node.indeterminate,\n          disabled: isDisabled\n        }\n      }, events]));\n    },\n    renderRadio: function renderRadio(h) {\n      var checkedValue = this.checkedValue,\n          value = this.value,\n          isDisabled = this.isDisabled;\n\n      // to keep same reference if value cause radio's checked state is calculated by reference comparision;\n\n      if (Object(util_[\"isEqual\"])(value, checkedValue)) {\n        value = checkedValue;\n      }\n\n      return h(\n        'el-radio',\n        {\n          attrs: {\n            value: checkedValue,\n            label: value,\n            disabled: isDisabled\n          },\n          on: {\n            'change': this.handleCheckChange\n          },\n          nativeOn: {\n            'click': stopPropagation\n          }\n        },\n        [h('span')]\n      );\n    },\n    renderCheckIcon: function renderCheckIcon(h) {\n      return h('i', { 'class': 'el-icon-check el-cascader-node__prefix' });\n    },\n    renderLoadingIcon: function renderLoadingIcon(h) {\n      return h('i', { 'class': 'el-icon-loading el-cascader-node__postfix' });\n    },\n    renderExpandIcon: function renderExpandIcon(h) {\n      return h('i', { 'class': 'el-icon-arrow-right el-cascader-node__postfix' });\n    },\n    renderContent: function renderContent(h) {\n      var panel = this.panel,\n          node = this.node;\n\n      var render = panel.renderLabelFn;\n      var vnode = render ? render({ node: node, data: node.data }) : null;\n\n      return h(\n        'span',\n        { 'class': 'el-cascader-node__label' },\n        [vnode || node.label]\n      );\n    }\n  },\n\n  render: function render(h) {\n    var _this3 = this;\n\n    var inActivePath = this.inActivePath,\n        inCheckedPath = this.inCheckedPath,\n        isChecked = this.isChecked,\n        isLeaf = this.isLeaf,\n        isDisabled = this.isDisabled,\n        config = this.config,\n        nodeId = this.nodeId;\n    var expandTrigger = config.expandTrigger,\n        checkStrictly = config.checkStrictly,\n        multiple = config.multiple;\n\n    var disabled = !checkStrictly && isDisabled;\n    var events = { on: {} };\n\n    if (expandTrigger === 'click') {\n      events.on.click = this.handleExpand;\n    } else {\n      events.on.mouseenter = function (e) {\n        _this3.handleExpand();\n        _this3.$emit('expand', e);\n      };\n      events.on.focus = function (e) {\n        _this3.handleExpand();\n        _this3.$emit('expand', e);\n      };\n    }\n    if (isLeaf && !isDisabled && !checkStrictly && !multiple) {\n      events.on.click = this.handleCheckChange;\n    }\n\n    return h(\n      'li',\n      external_babel_helper_vue_jsx_merge_props_default()([{\n        attrs: {\n          role: 'menuitem',\n          id: nodeId,\n          'aria-expanded': inActivePath,\n          tabindex: disabled ? null : -1\n        },\n        'class': {\n          'el-cascader-node': true,\n          'is-selectable': checkStrictly,\n          'in-active-path': inActivePath,\n          'in-checked-path': inCheckedPath,\n          'is-active': isChecked,\n          'is-disabled': disabled\n        }\n      }, events]),\n      [this.renderPrefix(h), this.renderContent(h), this.renderPostfix(h)]\n    );\n  }\n});\n// CONCATENATED MODULE: ./packages/cascader-panel/src/cascader-node.vue?vue&type=script&lang=js&\n /* harmony default export */ var src_cascader_nodevue_type_script_lang_js_ = (cascader_nodevue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/cascader-panel/src/cascader-node.vue\nvar cascader_node_render, cascader_node_staticRenderFns\n\n\n\n\n/* normalize component */\n\nvar cascader_node_component = normalizeComponent(\n  src_cascader_nodevue_type_script_lang_js_,\n  cascader_node_render,\n  cascader_node_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var cascader_node_api; }\ncascader_node_component.options.__file = \"packages/cascader-panel/src/cascader-node.vue\"\n/* harmony default export */ var cascader_node = (cascader_node_component.exports);\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/cascader-panel/src/cascader-menu.vue?vue&type=script&lang=js&\n\n\n\n\n\n\n\n/* harmony default export */ var cascader_menuvue_type_script_lang_js_ = ({\n  name: 'ElCascaderMenu',\n\n  mixins: [locale_default.a],\n\n  inject: ['panel'],\n\n  components: {\n    ElScrollbar: scrollbar_default.a,\n    CascaderNode: cascader_node\n  },\n\n  props: {\n    nodes: {\n      t