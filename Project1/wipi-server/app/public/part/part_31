|| !option.visible) {\n          this.navigateOptions(direction);\n        }\n        this.$nextTick(function () {\n          return _this2.scrollToOption(_this2.hoverOption);\n        });\n      }\n    }\n  }\n});\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/select/src/select.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/* harmony default export */ var selectvue_type_script_lang_js_ = ({\n  mixins: [emitter_default.a, locale_default.a, focus_default()('reference'), navigation_mixin],\n\n  name: 'ElSelect',\n\n  componentName: 'ElSelect',\n\n  inject: {\n    elForm: {\n      default: ''\n    },\n\n    elFormItem: {\n      default: ''\n    }\n  },\n\n  provide: function provide() {\n    return {\n      'select': this\n    };\n  },\n\n\n  computed: {\n    _elFormItemSize: function _elFormItemSize() {\n      return (this.elFormItem || {}).elFormItemSize;\n    },\n    readonly: function readonly() {\n      return !this.filterable || this.multiple || !Object(util_[\"isIE\"])() && !Object(util_[\"isEdge\"])() && !this.visible;\n    },\n    showClose: function showClose() {\n      var hasValue = this.multiple ? Array.isArray(this.value) && this.value.length > 0 : this.value !== undefined && this.value !== null && this.value !== '';\n      var criteria = this.clearable && !this.selectDisabled && this.inputHovering && hasValue;\n      return criteria;\n    },\n    iconClass: function iconClass() {\n      return this.remote && this.filterable ? '' : this.visible ? 'arrow-up is-reverse' : 'arrow-up';\n    },\n    debounce: function debounce() {\n      return this.remote ? 300 : 0;\n    },\n    emptyText: function emptyText() {\n      if (this.loading) {\n        return this.loadingText || this.t('el.select.loading');\n      } else {\n        if (this.remote && this.query === '' && this.options.length === 0) return false;\n        if (this.filterable && this.query && this.options.length > 0 && this.filteredOptionsCount === 0) {\n          return this.noMatchText || this.t('el.select.noMatch');\n        }\n        if (this.options.length === 0) {\n          return this.noDataText || this.t('el.select.noData');\n        }\n      }\n      return null;\n    },\n    showNewOption: function showNewOption() {\n      var _this = this;\n\n      var hasExistingOption = this.options.filter(function (option) {\n        return !option.created;\n      }).some(function (option) {\n        return option.currentLabel === _this.query;\n      });\n      return this.filterable && this.allowCreate && this.query !== '' && !hasExistingOption;\n    },\n    selectSize: function selectSize() {\n      return this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;\n    },\n    selectDisabled: function selectDisabled() {\n      return this.disabled || (this.elForm || {}).disabled;\n    },\n    collapseTagSize: function collapseTagSize() {\n      return ['small', 'mini'].indexOf(this.selectSize) > -1 ? 'mini' : 'small';\n    },\n    propPlaceholder: function propPlaceholder() {\n      return typeof this.placeholder !== 'undefined' ? this.placeholder : this.t('el.select.placeholder');\n    }\n  },\n\n  components: {\n    ElInput: input_default.a,\n    ElSelectMenu: select_dropdown,\n    ElOption: src_option,\n    ElTag: tag_default.a,\n    ElScrollbar: scrollbar_default.a\n  },\n\n  directives: { Clickoutside: clickoutside_default.a },\n\n  props: {\n    name: String,\n    id: String,\n    value: {\n      required: true\n    },\n    autocomplete: {\n      type: String,\n      default: 'off'\n    },\n    /** @Deprecated in next major version */\n    autoComplete: {\n      type: String,\n      validator: function validator(val) {\n          false && false;\n        return true;\n      }\n    },\n    automaticDropdown: Boolean,\n    size: String,\n    disabled: Boolean,\n    clearable: Boolean,\n    filterable: Boolean,\n    allowCreate: Boolean,\n    loading: Boolean,\n    popperClass: String,\n    remote: Boolean,\n    loadingText: String,\n    noMatchText: String,\n    noDataText: String,\n    remoteMethod: Function,\n    filterMethod: Function,\n    multiple: Boolean,\n    multipleLimit: {\n      type: Number,\n      default: 0\n    },\n    placeholder: {\n      type: String,\n      required: false\n    },\n    defaultFirstOption: Boolean,\n    reserveKeyword: Boolean,\n    valueKey: {\n      type: String,\n      default: 'value'\n    },\n    collapseTags: Boolean,\n    popperAppendToBody: {\n      type: Boolean,\n      default: true\n    }\n  },\n\n  data: function data() {\n    return {\n      options: [],\n      cachedOptions: [],\n      createdLabel: null,\n      createdSelected: false,\n      selected: this.multiple ? [] : {},\n      inputLength: 20,\n      inputWidth: 0,\n      initialInputHeight: 0,\n      cachedPlaceHolder: '',\n      optionsCount: 0,\n      filteredOptionsCount: 0,\n      visible: false,\n      softFocus: false,\n      selectedLabel: '',\n      hoverIndex: -1,\n      query: '',\n      previousQuery: null,\n      inputHovering: false,\n      currentPlaceholder: '',\n      menuVisibleOnFocus: false,\n      isOnComposition: false,\n      isSilentBlur: false\n    };\n  },\n\n\n  watch: {\n    selectDisabled: function selectDisabled() {\n      var _this2 = this;\n\n      this.$nextTick(function () {\n        _this2.resetInputHeight();\n      });\n    },\n    propPlaceholder: function propPlaceholder(val) {\n      this.cachedPlaceHolder = this.currentPlaceholder = val;\n    },\n    value: function value(val, oldVal) {\n      if (this.multiple) {\n        this.resetInputHeight();\n        if (val && val.length > 0 || this.$refs.input && this.query !== '') {\n          this.currentPlaceholder = '';\n        } else {\n          this.currentPlaceholder = this.cachedPlaceHolder;\n        }\n        if (this.filterable && !this.reserveKeyword) {\n          this.query = '';\n          this.handleQueryChange(this.query);\n        }\n      }\n      this.setSelected();\n      if (this.filterable && !this.multiple) {\n        this.inputLength = 20;\n      }\n      if (!Object(util_[\"valueEquals\"])(val, oldVal)) {\n        this.dispatch('ElFormItem', 'el.form.change', val);\n      }\n    },\n    visible: function visible(val) {\n      var _this3 = this;\n\n      if (!val) {\n        this.broadcast('ElSelectDropdown', 'destroyPopper');\n        if (this.$refs.input) {\n          this.$refs.input.blur();\n        }\n        this.query = '';\n        this.previousQuery = null;\n        this.selectedLabel = '';\n        this.inputLength = 20;\n        this.menuVisibleOnFocus = false;\n        this.resetHoverIndex();\n        this.$nextTick(function () {\n          if (_this3.$refs.input && _this3.$refs.input.value === '' && _this3.selected.length === 0) {\n            _this3.currentPlaceholder = _this3.cachedPlaceHolder;\n          }\n        });\n        if (!this.multiple) {\n          if (this.selected) {\n            if (this.filterable && this.allowCreate && this.createdSelected && this.createdLabel) {\n              this.selectedLabel = this.createdLabel;\n            } else {\n              this.selectedLabel = this.selected.currentLabel;\n            }\n            if (this.filterable) this.query = this.selectedLabel;\n          }\n\n          if (this.filterable) {\n            this.currentPlaceholder = this.cachedPlaceHolder;\n          }\n        }\n      } else {\n        this.broadcast('ElSelectDropdown', 'updatePopper');\n        if (this.filterable) {\n          this.query = this.remote ? '' : this.selectedLabel;\n          this.handleQueryChange(this.query);\n          if (this.multiple) {\n            this.$refs.input.focus();\n          } else {\n            if (!this.remote) {\n              this.broadcast('ElOption', 'queryChange', '');\n              this.broadcast('ElOptionGroup', 'queryChange');\n            }\n\n            if (this.selectedLabel) {\n              this.currentPlaceholder = this.selectedLabel;\n              this.selectedLabel = '';\n            }\n          }\n        }\n      }\n      this.$emit('visible-change', val);\n    },\n    options: function options() {\n      var _this4 = this;\n\n      if (this.$isServer) return;\n      this.$nextTick(function () {\n        _this4.broadcast('ElSelectDropdown', 'updatePopper');\n      });\n      if (this.multiple) {\n        this.resetInputHeight();\n      }\n      var inputs = this.$el.querySelectorAll('input');\n      if ([].indexOf.call(inputs, document.activeElement) === -1) {\n        this.setSelected();\n      }\n      if (this.defaultFirstOption && (this.filterable || this.remote) && this.filteredOptionsCount) {\n        this.checkDefaultFirstOption();\n      }\n    }\n  },\n\n  methods: {\n    handleComposition: function handleComposition(event) {\n      var _this5 = this;\n\n      var text = event.target.value;\n      if (event.type === 'compositionend') {\n        this.isOnComposition = false;\n        this.$nextTick(function (_) {\n          return _this5.handleQueryChange(text);\n        });\n      } else {\n        var lastCharacter = text[text.length - 1] || '';\n        this.isOnComposition = !Object(shared_[\"isKorean\"])(lastCharacter);\n      }\n    },\n    handleQueryChange: function handleQueryChange(val) {\n      var _this6 = this;\n\n      if (this.previousQuery === val || this.isOnComposition) return;\n      if (this.previousQuery === null && (typeof this.filterMethod === 'function' || typeof this.remoteMethod === 'function')) {\n        this.previousQuery = val;\n        return;\n      }\n      this.previousQuery = val;\n      this.$nextTick(function () {\n        if (_this6.visible) _this6.broadcast('ElSelectDropdown', 'updatePopper');\n      });\n      this.hoverIndex = -1;\n      if (this.multiple && this.filterable) {\n        this.$nextTick(function () {\n          var length = _this6.$refs.input.value.length * 15 + 20;\n          _this6.inputLength = _this6.collapseTags ? Math.min(50, length) : length;\n          _this6.managePlaceholder();\n          _this6.resetInputHeight();\n        });\n      }\n      if (this.remote && typeof this.remoteMethod === 'function') {\n        this.hoverIndex = -1;\n        this.remoteMethod(val);\n      } else if (typeof this.filterMethod === 'function') {\n        this.filterMethod(val);\n        this.broadcast('ElOptionGroup', 'queryChange');\n      } else {\n        this.filteredOptionsCount = this.optionsCount;\n        this.broadcast('ElOption', 'queryChange', val);\n        this.broadcast('ElOptionGroup', 'queryChange');\n      }\n      if (this.defaultFirstOption && (this.filterable || this.remote) && this.filteredOptionsCount) {\n        this.checkDefaultFirstOption();\n      }\n    },\n    scrollToOption: function scrollToOption(option) {\n      var target = Array.isArray(option) && option[0] ? option[0].$el : option.$el;\n      if (this.$refs.popper && target) {\n        var menu = this.$refs.popper.$el.querySelector('.el-select-dropdown__wrap');\n        scroll_into_view_default()(menu, target);\n      }\n      this.$refs.scrollbar && this.$refs.scrollbar.handleScroll();\n    },\n    handleMenuEnter: function handleMenuEnter() {\n      var _this7 = this;\n\n      this.$nextTick(function () {\n        return _this7.scrollToOption(_this7.selected);\n      });\n    },\n    emitChange: function emitChange(val) {\n      if (!Object(util_[\"valueEquals\"])(this.value, val)) {\n        this.$emit('change', val);\n      }\n    },\n    getOption: function getOption(value) {\n      var option = void 0;\n      var isObject = Object.prototype.toString.call(value).toLowerCase() === '[object object]';\n      var isNull = Object.prototype.toString.call(value).toLowerCase() === '[object null]';\n      var isUndefined = Object.prototype.toString.call(value).toLowerCase() === '[object undefined]';\n\n      for (var i = this.cachedOptions.length - 1; i >= 0; i--) {\n        var cachedOption = this.cachedOptions[i];\n        var isEqual = isObject ? Object(util_[\"getValueByPath\"])(cachedOption.value, this.valueKey) === Object(util_[\"getValueByPath\"])(value, this.valueKey) : cachedOption.value === value;\n        if (isEqual) {\n          option = cachedOption;\n          break;\n        }\n      }\n      if (option) return option;\n      var label = !isObject && !isNull && !isUndefined ? String(value) : '';\n      var newOption = {\n        value: value,\n        currentLabel: label\n      };\n      if (this.multiple) {\n        newOption.hitState = false;\n      }\n      return newOption;\n    },\n    setSelected: function setSelected() {\n      var _this8 = this;\n\n      if (!this.multiple) {\n        var option = this.getOption(this.value);\n        if (option.created) {\n          this.createdLabel = option.currentLabel;\n          this.createdSelected = true;\n        } else {\n          this.createdSelected = false;\n        }\n        this.selectedLabel = option.currentLabel;\n        this.selected = option;\n        if (this.filterable) this.query = this.selectedLabel;\n        return;\n      }\n      var result = [];\n      if (Array.isArray(this.value)) {\n        this.value.forEach(function (value) {\n          result.push(_this8.getOption(value));\n        });\n      }\n      this.selected = result;\n      this.$nextTick(function () {\n        _this8.resetInputHeight();\n      });\n    },\n    handleFocus: function handleFocus(event) {\n      if (!this.softFocus) {\n        if (this.automaticDropdown || this.filterable) {\n          this.visible = true;\n          if (this.filterable) {\n            this.menuVisibleOnFocus = true;\n          }\n        }\n        this.$emit('focus', event);\n      } else {\n        this.softFocus = false;\n      }\n    },\n    blur: function blur() {\n      this.visible = false;\n      this.$refs.reference.blur();\n    },\n    handleBlur: function handleBlur(event) {\n      var _this9 = this;\n\n      setTimeout(function () {\n        if (_this9.isSilentBlur) {\n          _this9.isSilentBlur = false;\n        } else {\n          _this9.$emit('blur', event);\n        }\n      }, 50);\n      this.softFocus = false;\n    },\n    handleClearClick: function handleClearClick(event) {\n      this.deleteSelected(event);\n    },\n    doDestroy: function doDestroy() {\n      this.$refs.popper && this.$refs.popper.doDestroy();\n    },\n    handleClose: function handleClose() {\n      this.visible = false;\n    },\n    toggleLastOptionHitState: function toggleLastOptionHitState(hit) {\n      if (!Array.isArray(this.selected)) return;\n      var option = this.selected[this.selected.length - 1];\n      if (!option) return;\n\n      if (hit === true || hit === false) {\n        option.hitState = hit;\n        return hit;\n      }\n\n      option.hitState = !option.hitState;\n      return option.hitState;\n    },\n    deletePrevTag: function deletePrevTag(e) {\n      if (e.target.value.length <= 0 && !this.toggleLastOptionHitState()) {\n        var value = this.value.slice();\n        value.pop();\n        this.$emit('input', value);\n        this.emitChange(value);\n      }\n    },\n    managePlaceholder: function managePlaceholder() {\n      if (this.currentPlaceholder !== '') {\n        this.currentPlaceholder = this.$refs.input.value ? '' : this.cachedPlaceHolder;\n      }\n    },\n    resetInputState: function resetInputState(e) {\n      if (e.keyCode !== 8) this.toggleLastOptionHitState(false);\n      this.inputLength = this.$refs.input.value.length * 15 + 20;\n      this.resetInputHeight();\n    },\n    resetInputHeight: function resetInputHeight() {\n      var _this10 = this;\n\n      if (this.collapseTags && !this.filterable) return;\n      this.$nextTick(function () {\n        if (!_this10.$refs.reference) return;\n        var inputChildNodes = _this10.$refs.reference.$el.childNodes;\n        var input = [].filter.call(inputChildNodes, function (item) {\n          return item.tagName === 'INPUT';\n        })[0];\n        var tags = _this10.$refs.tags;\n        var tagsHeight = tags ? Math.round(tags.getBoundingClientRect().height) : 0;\n        var sizeInMap = _this10.initialInputHeight || 40;\n        input.style.height = _this10.selected.length === 0 ? sizeInMap + 'px' : Math.max(tags ? tagsHeight + (tagsHeight > sizeInMap ? 6 : 0) : 0, sizeInMap) + 'px';\n        if (_this10.visible && _this10.emptyText !== false) {\n          _this10.broadcast('ElSelectDropdown', 'updatePopper');\n        }\n      });\n    },\n    resetHoverIndex: function resetHoverIndex() {\n      var _this11 = this;\n\n      setTimeout(function () {\n        if (!_this11.multiple) {\n          _this11.hoverIndex = _this11.options.indexOf(_this11.selected);\n        } else {\n          if (_this11.selected.length > 0) {\n            _this11.hoverIndex = Math.min.apply(null, _this11.selected.map(function (item) {\n              return _this11.options.indexOf(item);\n            }));\n          } else {\n            _this11.hoverIndex = -1;\n          }\n        }\n      }, 300);\n    },\n    handleOptionSelect: function handleOptionSelect(option, byClick) {\n      var _this12 = this;\n\n      if (this.multiple) {\n        var value = (this.value || []).slice();\n        var optionIndex = this.getValueIndex(value, option.value);\n        if (optionIndex > -1) {\n          value.splice(optionIndex, 1);\n        } else if (this.multipleLimit <= 0 || value.length < this.multipleLimit) {\n          value.push(option.value);\n        }\n        this.$emit('input', value);\n        this.emitChange(value);\n        if (option.created) {\n          this.query = '';\n          this.handleQueryChange('');\n          this.inputLength = 20;\n        }\n        if (this.filterable) this.$refs.input.focus();\n      } else {\n        this.$emit('input', option.value);\n        this.emitChange(option.value);\n        this.visible = false;\n      }\n      this.isSilentBlur = byClick;\n      this.setSoftFocus();\n      if (this.visible) return;\n      this.$nextTick(function () {\n        _this12.scrollToOption(option);\n      });\n    },\n    setSoftFocus: function setSoftFocus() {\n      this.softFocus = true;\n      var input = this.$refs.input || this.$refs.reference;\n      if (input) {\n        input.focus();\n      }\n    },\n    getValueIndex: function getValueIndex() {\n      var arr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var value = arguments[1];\n\n      var isObject = Object.prototype.toString.call(value).toLowerCase() === '[object object]';\n      if (!isObject) {\n        return arr.indexOf(value);\n      } else {\n        var valueKey = this.valueKey;\n        var index = -1;\n        arr.some(function (item, i) {\n          if (Object(util_[\"getValueByPath\"])(item, valueKey) === Object(util_[\"getValueByPath\"])(value, valueKey)) {\n            index = i;\n            return true;\n          }\n          return false;\n        });\n        return index;\n      }\n    },\n    toggleMenu: function toggleMenu() {\n      if (!this.selectDisabled) {\n        if (this.menuVisibleOnFocus) {\n          this.menuVisibleOnFocus = false;\n        } else {\n          this.visible = !this.visible;\n        }\n        if (this.visible) {\n          (this.$refs.input || this.$refs.reference).focus();\n        }\n      }\n    },\n    selectOption: function selectOption() {\n      if (!this.visible) {\n        this.toggleMenu();\n      } else {\n        if (this.options[this.hoverIndex]) {\n          this.handleOptionSelect(this.options[this.hoverIndex]);\n        }\n      }\n    },\n    deleteSelected: function deleteSelected(event) {\n      event.stopPropagation();\n      var value = this.multiple ? [] : '';\n      this.$emit('input', value);\n      this.emitChange(value);\n      this.visible = false;\n      this.$emit('clear');\n    },\n    deleteTag: function deleteTag(event, tag) {\n      var index = this.selected.indexOf(tag);\n      if (index > -1 && !this.selectDisabled) {\n        var value = this.value.slice();\n        value.splice(index, 1);\n        this.$emit('input', value);\n        this.emitChange(value);\n        this.$emit('remove-tag', tag.value);\n      }\n      event.stopPropagation();\n    },\n    onInputChange: function onInputChange() {\n      if (this.filterable && this.query !== this.selectedLabel) {\n        this.query = this.selectedLabel;\n        this.handleQueryChange(this.query);\n      }\n    },\n    onOptionDestroy: function onOptionDestroy(index) {\n      if (index > -1) {\n        this.optionsCount--;\n        this.filteredOptionsCount--;\n        this.options.splice(index, 1);\n      }\n    },\n    resetInputWidth: function resetInputWidth() {\n      this.inputWidth = this.$refs.reference.$el.getBoundingClientRect().width;\n    },\n    handleResize: function handleResize() {\n      this.resetInputWidth();\n      if (this.multiple) this.resetInputHeight();\n    },\n    checkDefaultFirstOption: function checkDefaultFirstOption() {\n      this.hoverIndex = -1;\n      // highlight the created option\n      var hasCreated = false;\n      for (var i = this.options.length - 1; i >= 0; i--) {\n        if (this.options[i].created) {\n          hasCreated = true;\n          this.hoverIndex = i;\n          break;\n        }\n      }\n      if (hasCreated) return;\n      for (var _i = 0; _i !== this.options.length; ++_i) {\n        var option = this.options[_i];\n        if (this.query) {\n          // highlight first options that passes the filter\n          if (!option.disabled && !option.groupDisabled && option.visible) {\n            this.hoverIndex = _i;\n            break;\n          }\n        } else {\n          // highlight currently selected option\n          if (option.itemSelected) {\n            this.hoverIndex = _i;\n            break;\n          }\n        }\n      }\n    },\n    getValueKey: function getValueKey(item) {\n      if (Object.prototype.toString.call(item.value).toLowerCase() !== '[object object]') {\n        return item.value;\n      } else {\n        return Object(util_[\"getValueByPath\"])(item.value, this.valueKey);\n      }\n    }\n  },\n\n  created: function created() {\n    var _this13 = this;\n\n    this.cachedPlaceHolder = this.currentPlaceholder = this.propPlaceholder;\n    if (this.multiple && !Array.isArray(this.value)) {\n      this.$emit('input', []);\n    }\n    if (!this.multiple && Array.isArray(this.value)) {\n      this.$emit('input', '');\n    }\n\n    this.debouncedOnInputChange = debounce_default()(this.debounce, function () {\n      _this13.onInputChange();\n    });\n\n    this.debouncedQueryChange = debounce_default()(this.debounce, function (e) {\n      _this13.handleQueryChange(e.target.value);\n    });\n\n    this.$on('handleOptionClick', this.handleOptionSelect);\n    this.$on('setSelected', this.setSelected);\n  },\n  mounted: function mounted() {\n    var _this14 = this;\n\n    if (this.multiple && Array.isArray(this.value) && this.value.length > 0) {\n      this.currentPlaceholder = '';\n    }\n    Object(resize_event_[\"addResizeListener\"])(this.$el, this.handleResize);\n\n    var reference = this.$refs.reference;\n    if (reference && reference.$el) {\n      var sizeMap = {\n        medium: 36,\n        small: 32,\n        mini: 28\n      };\n      var input = reference.$el.querySelector('input');\n      this.initialInputHeight = input.getBoundingClientRect().height || sizeMap[this.selectSize];\n    }\n    if (this.remote && this.multiple) {\n      this.resetInputHeight();\n    }\n    this.$nextTick(function () {\n      if (reference && reference.$el) {\n        _this14.inputWidth = reference.$el.getBoundingClientRect().width;\n      }\n    });\n    this.setSelected();\n  },\n  beforeDestroy: function beforeDestroy() {\n    if (this.$el && this.handleResize) Object(resize_event_[\"removeResizeListener\"])(this.$el, this.handleResize);\n  }\n});\n// CONCATENATED MODULE: ./packages/select/src/select.vue?vue&type=script&lang=js&\n /* harmony default export */ var src_selectvue_type_script_lang_js_ = (selectvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/select/src/select.vue\n\n\n\n\n\n/* normalize component */\n\nvar select_component = normalizeComponent(\n  src_selectvue_type_script_lang_js_,\n  selectvue_type_template_id_0e4aade6_render,\n  selectvue_type_template_id_0e4aade6_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var select_api; }\nselect_component.options.__file = \"packages/select/src/select.vue\"\n/* harmony default export */ var src_select = (select_component.exports);\n// CONCATENATED MODULE: ./packages/select/index.js\n\n\n/* istanbul ignore next */\nsrc_select.install = function (Vue) {\n  Vue.component(src_select.name, src_select);\n};\n\n/* harmony default export */ var packages_select = (src_select);\n// CONCATENATED MODULE: ./packages/option/index.js\n\n\n/* istanbul ignore next */\nsrc_option.install = function (Vue) {\n  Vue.component(src_option.name, src_option);\n};\n\n/* harmony default export */ var packages_option = (src_option);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/select/src/option-group.vue?vue&type=template&id=6685e5de&\nvar option_groupvue_type_template_id_6685e5de_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"ul\",\n    {\n      directives: [\n        {\n          name: \"show\",\n          rawName: \"v-show\",\n          value: _vm.visible,\n          expression: \"visible\"\n        }\n      ],\n      staticClass: \"el-select-group__wrap\"\n    },\n    [\n      _c(\"li\", { staticClass: \"el-select-group__title\" }, [\n        _vm._v(_vm._s(_vm.label))\n      ]),\n      _c(\"li\", [\n        _c(\"ul\", { staticClass: \"el-select-group\" }, [_vm._t(\"default\")], 2)\n      ])\n    ]\n  )\n}\nvar option_groupvue_type_template_id_6685e5de_staticRenderFns = []\noption_groupvue_type_template_id_6685e5de_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/select/src/option-group.vue?vue&type=template&id=6685e5de&\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/select/src/option-group.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n/* harmony default export */ var option_groupvue_type_script_lang_js_ = ({\n  mixins: [emitter_default.a],\n\n  name: 'ElOptionGroup',\n\n  componentName: 'ElOptionGroup',\n\n  props: {\n    label: String,\n    disabled: {\n      type: Boolean,\n      default: false\n    }\n  },\n\n  data: function data() {\n    return {\n      visible: true\n    };\n  },\n\n\n  watch: {\n    disabled: function disabled(val) {\n      this.broadcast('ElOption', 'handleGroupDisabled', val);\n    }\n  },\n\n  methods: {\n    queryChange: function queryChange() {\n      this.visible = this.$children && Array.isArray(this.$children) && this.$children.some(function (option) {\n        return option.visible === true;\n      });\n    }\n  },\n\n  created: function created() {\n    this.$on('queryChange', this.queryChange);\n  },\n  mounted: function mounted() {\n    if (this.disabled) {\n      this.broadcast('ElOption', 'handleGroupDisabled', this.disabled);\n    }\n  }\n});\n// CONCATENATED MODULE: ./packages/select/src/option-group.vue?vue&type=script&lang=js&\n /* harmony default export */ var src_option_groupvue_type_script_lang_js_ = (option_groupvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/select/src/option-group.vue\n\n\n\n\n\n/* normalize component */\n\nvar option_group_component = normalizeComponent(\n  src_option_groupvue_type_script_lang_js_,\n  option_groupvue_type_template_id_6685e5de_render,\n  option_groupvue_type_template_id_6685e5de_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var option_group_api; }\noption_group_component.options.__file = \"packages/select/src/option-group.vue\"\n/* harmony default export */ var option_group = (option_group_component.exports);\n// CONCATENATED MODULE: ./packages/option-group/index.js\n\n\n/* istanbul ignore next */\noption_group.install = function (Vue) {\n  Vue.component(option_group.name, option_group);\n};\n\n/* harmony default export */ var packages_option_group = (option_group);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/button/src/button.vue?vue&type=template&id=ca859fb4&\nvar buttonvue_type_template_id_ca859fb4_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"button\",\n    {\n      staticClass: \"el-button\",\n      class: [\n        _vm.type ? \"el-button--\" + _vm.type : \"\",\n        _vm.buttonSize ? \"el-button--\" + _vm.buttonSize : \"\",\n        {\n          \"is-disabled\": _vm.buttonDisabled,\n          \"is-loading\": _vm.loading,\n          \"is-plain\": _vm.plain,\n          \"is-round\": _vm.round,\n          \"is-circle\": _vm.circle\n        }\n      ],\n      attrs: {\n        disabled: _vm.buttonDisabled || _vm.loading,\n        autofocus: _vm.autofocus,\n        type: _vm.nativeType\n      },\n      on: { click: _vm.handleClick }\n    },\n    [\n      _vm.loading ? _c(\"i\", { staticClass: \"el-icon-loading\" }) : _vm._e(),\n      _vm.icon && !_vm.loading ? _c(\"i\", { class: _vm.icon }) : _vm._e(),\n      _vm.$slots.default ? _c(\"span\", [_vm._t(\"default\")], 2) : _vm._e()\n    ]\n  )\n}\nvar buttonvue_type_template_id_ca859fb4_staticRenderFns = []\nbuttonvue_type_template_id_ca859fb4_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/button/src/button.vue?vue&type=template&id=ca859fb4&\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/button/src/button.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* harmony default export */ var buttonvue_type_script_lang_js_ = ({\n  name: 'ElButton',\n\n  inject: {\n    elForm: {\n      default: ''\n    },\n    elFormItem: {\n      default: ''\n    }\n  },\n\n  props: {\n    type: {\n      type: String,\n      default: 'default'\n    },\n    size: String,\n    icon: {\n      type: String,\n      default: ''\n    },\n    nativeType: {\n      type: String,\n      default: 'button'\n    },\n    loading: Boolean,\n    disabled: Boolean,\n    plain: Boolean,\n    autofocus: Boolean,\n    round: Boolean,\n    circle: Boolean\n  },\n\n  computed: {\n    _elFormItemSize: function _elFormItemSize() {\n      return (this.elFormItem || {}).elFormItemSize;\n    },\n    buttonSize: function buttonSize() {\n      return this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;\n    },\n    buttonDisabled: function buttonDisabled() {\n      return this.disabled || (this.elForm || {}).disabled;\n    }\n  },\n\n  methods: {\n    handleClick: function handleClick(evt) {\n      this.$emit('click', evt);\n    }\n  }\n});\n// CONCATENATED MODULE: ./packages/button/src/button.vue?vue&type=script&lang=js&\n /* harmony default export */ var src_buttonvue_type_script_lang_js_ = (buttonvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/button/src/button.vue\n\n\n\n\n\n/* normalize component */\n\nvar button_component = normalizeComponent(\n  src_buttonvue_type_script_lang_js_,\n  buttonvue_type_template_id_ca859fb4_render,\n  buttonvue_type_template_id_ca859fb4_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var button_api; }\nbutton_component.options.__file = \"packages/button/src/button.vue\"\n/* harmony default export */ var src_button = (button_component.exports);\n// CONCATENATED MODULE: ./packages/button/index.js\n\n\n/* istanbul ignore next */\nsrc_button.install = function (Vue) {\n  Vue.component(src_button.name, src_button);\n};\n\n/* harmony default export */ var packages_button = (src_button);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/button/src/button-group.vue?vue&type=template&id=3d8661d0&\nvar button_groupvue_type_template_id_3d8661d0_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"div\", { staticClass: \"el-button-group\" }, [_vm._t(\"default\")], 2)\n}\nvar button_groupvue_type_template_id_3d8661d0_staticRenderFns = []\nbutton_groupvue_type_template_id_3d8661d0_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/button/src/button-group.vue?vue&type=template&id=3d8661d0&\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/button/src/button-group.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n\n/* harmony default export */ var button_groupvue_type_script_lang_js_ = ({\n  name: 'ElButtonGroup'\n});\n// CONCATENATED MODULE: ./packages/button/src/button-group.vue?vue&type=script&lang=js&\n /* harmony default export */ var src_button_groupvue_type_script_lang_js_ = (button_groupvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/button/src/button-group.vue\n\n\n\n\n\n/* normalize component */\n\nvar button_group_component = normalizeComponent(\n  src_button_groupvue_type_script_lang_js_,\n  button_groupvue_type_template_id_3d8661d0_render,\n  button_groupvue_type_template_id_3d8661d0_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var button_group_api; }\nbutton_group_component.options.__file = \"packages/button/src/button-group.vue\"\n/* harmony default export */ var button_group = (button_group_component.exports);\n// CONCATENATED MODULE: ./packages/button-group/index.js\n\n\n/* istanbul ignore next */\nbutton_group.install = function (Vue) {\n  Vue.component(button_group.name, button_group);\n};\n\n/* harmony default export */ var packages_button_group = (button_group);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/table/src/table.vue?vue&type=template&id=493fe34e&\nvar tablevue_type_template_id_493fe34e_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    {\n      staticClass: \"el-table\",\n      class: [\n        {\n          \"el-table--fit\": _vm.fit,\n          \"el-table--striped\": _vm.stripe,\n          \"el-table--border\": _vm.border || _vm.isGroup,\n          \"el-table--hidden\": _vm.isHidden,\n          \"el-table--group\": _vm.isGroup,\n          \"el-table--fluid-height\": _vm.maxHeight,\n          \"el-table--scrollable-x\": _vm.layout.scrollX,\n          \"el-table--scrollable-y\": _vm.layout.scrollY,\n          \"el-table--enable-row-hover\": !_vm.store.states.isComplex,\n          \"el-table--enable-row-transition\":\n            (_vm.store.states.data || []).length !== 0 &&\n            (_vm.store.states.data || []).length < 100\n        },\n        _vm.tableSize ? \"el-table--\" + _vm.tableSize : \"\"\n      ],\n      on: {\n        mouseleave: function($event) {\n          _vm.handleMouseLeave($event)\n        }\n      }\n    },\n    [\n      _c(\n        \"div\",\n        { ref: \"hiddenColumns\", staticClass: \"hidden-columns\" },\n        [_vm._t(\"default\")],\n        2\n      ),\n      _vm.showHeader\n        ? _c(\n            \"div\",\n            {\n              directives: [\n                {\n                  name: \"mousewheel\",\n                  rawName: \"v-mousewheel\",\n                  value: _vm.handleHeaderFooterMousewheel,\n                  expression: \"handleHeaderFooterMousewheel\"\n                }\n              ],\n              ref: \"headerWrapper\",\n              staticClass: \"el-table__header-wrapper\"\n            },\n            [\n              _c(\"table-header\", {\n                ref: \"tableHeader\",\n                style: {\n                  width: _vm.layout.bodyWidth ? _vm.layout.bodyWidth + \"px\" : \"\"\n                },\n                attrs: {\n                  store: _vm.store,\n                  border: _vm.border,\n                  \"default-sort\": _vm.defaultSort\n                }\n              })\n            ],\n            1\n          )\n        : _vm._e(),\n      _c(\n        \"div\",\n        {\n          ref: \"bodyWrapper\",\n          staticClass: \"el-table__body-wrapper\",\n          class: [\n            _vm.layout.scrollX\n              ? \"is-scrolling-\" + _vm.scrollPosition\n              : \"is-scrolling-none\"\n          ],\n          style: [_vm.bodyHeight]\n        },\n        [\n          _c(\"table-body\", {\n            style: {\n              width: _vm.bodyWidth\n            },\n            attrs: {\n              context: _vm.context,\n              store: _vm.store,\n              stripe: _vm.stripe,\n              \"row-class-name\": _vm.rowClassName,\n              \"row-style\": _vm.rowStyle,\n              highlight: _vm.highlightCurrentRow\n            }\n          }),\n          !_vm.data || _vm.data.length === 0\n            ? _c(\n                \"div\",\n                {\n                  ref: \"emptyBlock\",\n                  staticClass: \"el-table__empty-block\",\n                  style: _vm.emptyBlockStyle\n                },\n                [\n                  _c(\n                    \"span\",\n                    { staticClass: \"el-table__empty-text\" },\n                    [\n                      _vm._t(\"empty\", [\n                        _vm._v(\n                          _vm._s(_vm.emptyText || _vm.t(\"el.table.emptyText\"))\n                        )\n                      ])\n                    ],\n                    2\n                  )\n                ]\n              )\n            : _vm._e(),\n          _vm.$slots.append\n            ? _c(\n                \"div\",\n                {\n                  ref: \"appendWrapper\",\n                  staticClass: \"el-table__append-wrapper\"\n                },\n                [_vm._t(\"append\")],\n                2\n              )\n            : _vm._e()\n        ],\n        1\n      ),\n      _vm.showSummary\n        ? _c(\n            \"div\",\n            {\n              directives: [\n                {\n                  name: \"show\",\n                  rawName: \"v-show\",\n                  value: _vm.data && _vm.data.length > 0,\n                  expression: \"data && data.length > 0\"\n                },\n                {\n                  name: \"mousewheel\",\n                  rawName: \"v-mousewheel\",\n                  value: _vm.handleHeaderFooterMousewheel,\n                  expression: \"handleHeaderFooterMousewheel\"\n                }\n              ],\n              ref: \"footerWrapper\",\n              staticClass: \"el-table__footer-wrapper\"\n            },\n            [\n              _c(\"table-footer\", {\n                style: {\n                  width: _vm.layout.bodyWidth ? _vm.layout.bodyWidth + \"px\" : \"\"\n                },\n                attrs: {\n                  store: _vm.store,\n                  border: _vm.border,\n                  \"sum-text\": _vm.sumText || _vm.t(\"el.table.sumText\"),\n                  \"summary-method\": _vm.summaryMethod,\n                  \"default-sort\": _vm.defaultSort\n                }\n              })\n            ],\n            1\n          )\n        : _vm._e(),\n      _vm.fixedColumns.length > 0\n        ? _c(\n            \"div\",\n            {\n              directives: [\n                {\n                  name: \"mousewheel\",\n                  rawName: \"v-mousewheel\",\n                  value: _vm.handleFixedMousewheel,\n                  expression: \"handleFixedMousewheel\"\n                }\n              ],\n              ref: \"fixedWrapper\",\n              staticClass: \"el-table__fixed\",\n              style: [\n                {\n                  width: _vm.layout.fixedWidth\n                    ? _vm.layout.fixedWidth + \"px\"\n                    : \"\"\n                },\n                _vm.fixedHeight\n              ]\n            },\n            [\n              _vm.showHeader\n                ? _c(\n                    \"div\",\n                    {\n                      ref: \"fixedHeaderWrapper\",\n                      staticClass: \"el-table__fixed-header-wrapper\"\n                    },\n                    [\n                      _c(\"table-header\", {\n                        ref: \"fixedTableHeader\",\n                        style: {\n                          width: _vm.bodyWidth\n                        },\n                        attrs: {\n                          fixed: \"left\",\n                          border: _vm.border,\n                          store: _vm.store\n                        }\n                      })\n                    ],\n                    1\n                  )\n                : _vm._e(),\n              _c(\n                \"div\",\n                {\n                  ref: \"fixedBodyWrapper\",\n                  staticClass: \"el-table__fixed-body-wrapper\",\n                  style: [\n                    {\n                      top: _vm.layout.headerHeight + \"px\"\n                    },\n                    _vm.fixedBodyHeight\n                  ]\n                },\n                [\n                  _c(\"table-body\", {\n                    style: {\n                      width: _vm.bodyWidth\n                    },\n                    attrs: {\n                      fixed: \"left\",\n                      store: _vm.store,\n                      stripe: _vm.stripe,\n                      highlight: _vm.highlightCurrentRow,\n                      \"row-class-name\": _vm.rowClassName,\n                      \"row-style\": _vm.rowStyle\n                    }\n                  }),\n                  _vm.$slots.append\n                    ? _c(\"div\", {\n                        staticClass: \"el-table__append-gutter\",\n                        style: { height: _vm.layout.appendHeight + \"px\" }\n                      })\n                    : _vm._e()\n                ],\n                1\n              ),\n              _vm.showSummary\n                ? _c(\n                    \"div\",\n                    {\n                      directives: [\n                        {\n                          name: \"show\",\n                          rawName: \"v-show\",\n                          value: _vm.data && _vm.data.length > 0,\n                          expression: \"data && data.length > 0\"\n                        }\n                      ],\n                      ref: \"fixedFooterWrapper\",\n                      staticClass: \"el-table__fixed-footer-wrapper\"\n                    },\n                    [\n                      _c(\"table-footer\", {\n                        style: {\n                          width: _vm.bodyWidth\n                        },\n                        attrs: {\n                          fixed: \"left\",\n                          border: _vm.border,\n                          \"sum-text\": _vm.sumText || _vm.t(\"el.table.sumText\"),\n                          \"summary-method\": _vm.summaryMethod,\n                          store: _vm.store\n                        }\n                      })\n                    ],\n                    1\n                  )\n                : _vm._e()\n            ]\n          )\n        : _vm._e(),\n      _vm.rightFixedColumns.length > 0\n        ? _c(\n            \"div\",\n            {\n              directives: [\n                {\n                  name: \"mousewheel\",\n                  rawName: \"v-mousewheel\",\n                  value: _vm.handleFixedMousewheel,\n                  expression: \"handleFixedMousewheel\"\n                }\n              ],\n              ref: \"rightFixedWrapper\",\n              staticClass: \"el-table__fixed-right\",\n              style: [\n                {\n                  width: _vm.layout.rightFixedWidth\n                    ? _vm.layout.rightFixedWidth + \"px\"\n                    : \"\",\n                  right: _vm.layout.scrollY\n                    ? (_vm.border\n                        ? _vm.layout.gutterWidth\n                        : _vm.layout.gutterWidth || 0) + \"px\"\n                    : \"\"\n                },\n                _vm.fixedHeight\n              ]\n            },\n            [\n              _vm.showHeader\n                ? _c(\n                    \"div\",\n                    {\n                      ref: \"rightFixedHeaderWrapper\",\n                      staticClass: \"el-table__fixed-header-wrapper\"\n                    },\n                    [\n                      _c(\"table-header\", {\n                        ref: \"rightFixedTableHeader\",\n                        style: {\n                          width: _vm.bodyWidth\n                        },\n                        attrs: {\n                          fixed: \"right\",\n                          border: _vm.border,\n                          store: _vm.store\n                        }\n                      })\n                    ],\n                    1\n                  )\n                : _vm._e(),\n              _c(\n                \"div\",\n                {\n                  ref: \"rightFixedBodyWrapper\",\n                  staticClass: \"el-table__fixed-body-wrapper\",\n                  style: [\n                    {\n                      top: _vm.layout.headerHeight + \"px\"\n                    },\n                    _vm.fixedBodyHeight\n                  ]\n                },\n                [\n                  _c(\"table-body\", {\n                    style: {\n                      width: _vm.bodyWidth\n                    },\n                    attrs: {\n                      fixed: \"right\",\n                      store: _vm.store,\n                      stripe: _vm.stripe,\n                      \"row-class-name\": _vm.rowClassName,\n                      \"row-style\": _vm.rowStyle,\n                      highlight: _vm.highlightCurrentRow\n                    }\n                  }),\n                  _vm.$slots.append\n                    ? _c(\"div\", {\n                        staticClass: \"el-table__append-gutter\",\n                        style: { height: _vm.layout.appendHeight + \"px\" }\n                      })\n                    : _vm._e()\n                ],\n                1\n              ),\n              _vm.showSummary\n                ? _c(\n                    \"div\",\n                    {\n                      directives: [\n                        {\n                          name: \"show\",\n                          rawName: \"v-show\",\n                          value: _vm.data && _vm.data.length > 0,\n                          expression: \"data && data.length > 0\"\n                        }\n                      ],\n                      ref: \"rightFixedFooterWrapper\",\n                      staticClass: \"el-table__fixed-footer-wrapper\"\n                    },\n                    [\n                      _c(\"table-footer\", {\n                        style: {\n                          width: _vm.bodyWidth\n                        },\n                        attrs: {\n                          fixed: \"right\",\n                          border: _vm.border,\n                          \"sum-text\": _vm.sumText || _vm.t(\"el.table.sumText\"),\n                          \"summary-method\": _vm.summaryMethod,\n                          store: _vm.store\n                        }\n                      })\n                    ],\n                    1\n                  )\n                : _vm._e()\n            ]\n          )\n        : _vm._e(),\n      _vm.rightFixedColumns.length > 0\n        ? _c(\"div\", {\n            ref: \"rightFixedPatch\",\n            staticClass: \"el-table__fixed-right-patch\",\n            style: {\n              width: _vm.layout.scrollY ? _vm.layout.gutterWidth + \"px\" : \"0\",\n              height: _vm.layout.headerHeight + \"px\"\n            }\n          })\n        : _vm._e(),\n      _c(\"div\", {\n        directives: [\n          {\n            name: \"show\",\n            rawName: \"v-show\",\n            value: _vm.resizeProxyVisible,\n            expression: \"resizeProxyVisible\"\n          }\n        ],\n        ref: \"resizeProxy\",\n        staticClass: \"el-table__column-resize-proxy\"\n      })\n    ]\n  )\n}\nvar tablevue_type_template_id_493fe34e_staticRenderFns = []\ntablevue_type_template_id_493fe34e_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/table/src/table.vue?vue&type=template&id=493fe34e&\n\n// EXTERNAL MODULE: external \"element-ui/lib/checkbox\"\nvar checkbox_ = __webpack_require__(17);\nvar checkbox_default = /*#__PURE__*/__webpack_require__.n(checkbox_);\n\n// EXTERNAL MODULE: external \"throttle-debounce\"\nvar external_throttle_debounce_ = __webpack_require__(35);\n\n// EXTERNAL MODULE: external \"normalize-wheel\"\nvar external_normalize_wheel_ = __webpack_require__(38);\nvar external_normalize_wheel_default = /*#__PURE__*/__webpack_require__.n(external_normalize_wheel_);\n\n// CONCATENATED MODULE: ./src/directives/mousewheel.js\n\n\nvar isFirefox = typeof navigator !== 'undefined' && navigator.userAgent.toLowerCase().indexOf('firefox') > -1;\n\nvar mousewheel_mousewheel = function mousewheel(element, callback) {\n  if (element && element.addEventListener) {\n    element.addEventListener(isFirefox ? 'DOMMouseScroll' : 'mousewheel', function (event) {\n      var normalized = external_normalize_wheel_default()(event);\n      callback && callback.apply(this, [event, normalized]);\n    });\n  }\n};\n\n/* harmony default export */ var directives_mousewheel = ({\n  bind: function bind(el, binding) {\n    mousewheel_mousewheel(el, binding.value);\n  }\n});\n// EXTERNAL MODULE: external \"vue\"\nvar external_vue_ = __webpack_require__(6);\nvar external_vue_default = /*#__PURE__*/__webpack_require__.n(external_vue_);\n\n// CONCATENATED MODULE: ./packages/table/src/util.js\nvar util_typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n\n\nvar getCell = function getCell(event) {\n  var cell = event.target;\n\n  while (cell && cell.tagName.toUpperCase() !== 'HTML') {\n    if (cell.tagName.toUpperCase() === 'TD') {\n      return cell;\n    }\n    cell = cell.parentNode;\n  }\n\n  return null;\n};\n\nvar util_isObject = function isObject(obj) {\n  return obj !== null && (typeof obj === 'undefined' ? 'undefined' : util_typeof(obj)) === 'object';\n};\n\nvar util_orderBy = function orderBy(array, sortKey, reverse, sortMethod, sortBy) {\n  if (!sortKey && !sortMethod && (!sortBy || Array.isArray(sortBy) && !sortBy.length)) {\n    return array;\n  }\n  if (typeof reverse === 'string') {\n    reverse = reverse === 'descending' ? -1 : 1;\n  } else {\n    reverse = reverse && reverse < 0 ? -1 : 1;\n  }\n  var getKey = sortMethod ? null : function (value, index) {\n    if (sortBy) {\n      if (!Array.isArray(sortBy)) {\n        sortBy = [sortBy];\n      }\n      return sortBy.map(function (by) {\n        if (typeof by === 'string') {\n          return Object(util_[\"getValueByPath\"])(value, by);\n        } else {\n          return by(value, index, array);\n        }\n      });\n    }\n    if (sortKey !== '$key') {\n      if (util_isObject(value) && '$value' in value) value = value.$value;\n    }\n    return [util_isObject(value) ? Object(util_[\"getValueByPath\"])(value, sortKey) : value];\n  };\n  var compare = function compare(a, b) {\n    if (sortMethod) {\n      return sortMethod(a.value, b.value);\n    }\n    for (var i = 0, len = a.key.length; i < len; i++) {\n      if (a.key[i] < b.key[i]) {\n        return -1;\n      }\n      if (a.key[i] > b.key[i]) {\n        return 1;\n      }\n    }\n    return 0;\n  };\n  return array.map(function (value, index) {\n    return {\n      value: value,\n      index: index,\n      key: getKey ? getKey(value, index) : null\n    };\n  }).sort(function (a, b) {\n    var order = compare(a, b);\n    if (!order) {\n      // make stable https://en.wikipedia.org/wiki/Sorting_algorithm#Stability\n      order = a.index - b.index;\n    }\n    return order * reverse;\n  }).map(function (item) {\n    return item.value;\n  });\n};\n\nvar getColumnById = function getColumnById(table, columnId) {\n  var column = null;\n  table.columns.forEach(function (item) {\n    if (item.id === columnId) {\n      column = item;\n    }\n  });\n  return column;\n};\n\nvar getColumnByKey = function getColumnByKey(table, columnKey) {\n  var column = null;\n  for (var i = 0; i < table.columns.length; i++) {\n    var item = table.columns[i];\n    if (item.columnKey === columnKey) {\n      column = item;\n      break;\n    }\n  }\n  return column;\n};\n\nvar getColumnByCell = function getColumnByCell(table, cell) {\n  var matches = (cell.className || '').match(/el-table_[^\\s]+/gm);\n  if (matches) {\n    return getColumnById(table, matches[0]);\n  }\n  return null;\n};\n\nvar getRowIdentity = function getRowIdentity(row, rowKey) {\n  if (!row) throw new Error('row is required when get row identity');\n  if (typeof rowKey === 'string') {\n    if (rowKey.indexOf('.') < 0) {\n      return row[rowKey];\n    }\n    var key = rowKey.split('.');\n    var current = row;\n    for (var i = 0; i < key.length; i++) {\n      current = current[key[i]];\n    }\n    return current;\n  } else if (typeof rowKey === 'function') {\n    return rowKey.call(null, row);\n  }\n};\n\nvar getKeysMap = function getKeysMap(array, rowKey) {\n  var arrayMap = {};\n  (array || []).forEach(function (row, index) {\n    arrayMap[getRowIdentity(row, rowKey)] = { row: row, index: index };\n  });\n  return arrayMap;\n};\n\nfunction hasOwn(obj, key) {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nfunction mergeOptions(defaults, config) {\n  var options = {};\n  var key = void 0;\n  for (key in defaults) {\n    options[key] = defaults[key];\n  }\n  for (key in config) {\n    if (hasOwn(config, key)) {\n      var value = config[key];\n      if (typeof value !== 'undefined') {\n        options[key] = value;\n      }\n    }\n  }\n  return options;\n}\n\nfunction parseWidth(width) {\n  if (width !== undefined) {\n    width = parseInt(width, 10);\n    if (isNaN(width)) {\n      width = null;\n    }\n  }\n  return width;\n}\n\nfunction parseMinWidth(minWidth) {\n  if (typeof minWidth !== 'undefined') {\n    minWidth = parseWidth(minWidth);\n    if (isNaN(minWidth)) {\n      minWidth = 80;\n    }\n  }\n  return minWidth;\n};\n\nfunction parseHeight(height) {\n  if (typeof height === 'number') {\n    return height;\n  }\n  if (typeof height === 'string') {\n    if (/^\\d+(?:px)?$/.test(height)) {\n      return parseInt(height, 10);\n    } else {\n      return height;\n    }\n  }\n  return null;\n}\n\n// https://github.com/reduxjs/redux/blob/master/src/compose.js\nfunction compose() {\n  for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {\n    funcs[_key] = arguments[_key];\n  }\n\n  if (funcs.length === 0) {\n    return function (arg) {\n      return arg;\n    };\n  }\n  if (funcs.length === 1) {\n    return funcs[0];\n  }\n  return funcs.reduce(function (a, b) {\n    return function () {\n      return a(b.apply(undefined, arguments));\n    };\n  });\n}\n\nfunction toggleRowStatus(statusArr, row, newVal) {\n  var changed = false;\n  var index = statusArr.indexOf(row);\n  var included = index !== -1;\n\n  var addRow = function addRow() {\n    statusArr.push(row);\n    changed = true;\n  };\n  var removeRow = function removeRow() {\n    statusArr.splice(index, 1);\n    changed = true;\n  };\n\n  if (typeof newVal === 'boolean') {\n    if (newVal && !included) {\n      addRow();\n    } else if (!newVal && included) {\n      removeRow();\n    }\n  } else {\n    if (included) {\n      removeRow();\n    } else {\n      addRow();\n    }\n  }\n  return changed;\n}\n\nfunction walkTreeNode(root, cb) {\n  var childrenKey = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'children';\n  var lazyKey = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'hasChildren';\n\n  var isNil = function isNil(array) {\n    return !(Array.isArray(array) && array.length);\n  };\n\n  function _walker(parent, children, level) {\n    cb(parent, children, level);\n    children.forEach(function (item) {\n      if (item[lazyKey]) {\n        cb(item, null, level + 1);\n        return;\n      }\n      var children = item[childrenKey];\n      if (!isNil(children)) {\n        _walker(item, children, level + 1);\n      }\n    });\n  }\n\n  root.forEach(function (item) {\n    if (item[lazyKey]) {\n      cb(item, null, 0);\n      return;\n    }\n    var children = item[childrenKey];\n    if (!isNil(children)) {\n      _walker(item, children, 0);\n    }\n  });\n}\n// CONCATENATED MODULE: ./packages/table/src/store/expand.js\n\n\n/* harmony default export */ var expand = ({\n  data: function data() {\n    return {\n      states: {\n        defaultExpandAll: false,\n        expandRows: []\n      }\n    };\n  },\n\n\n  methods: {\n    updateExpandRows: function updateExpandRows() {\n      var _states = this.states,\n          _states$data = _states.data,\n          data = _states$data === undefined ? [] : _states$data,\n          rowKey = _states.rowKey,\n          defaultExpandAll = _states.defaultExpandAll,\n          expandRows = _states.expandRows;\n\n      if (defaultExpandAll) {\n        this.states.expandRows = data.slice();\n      } else if (rowKey) {\n        // TODO：这里的代码可以优化\n        var expandRowsMap = getKeysMap(expandRows, rowKey);\n        this.states.expandRows = data.reduce(function (prev, row) {\n          var rowId = getRowIdentity(row, rowKey);\n          var rowInfo = expandRowsMap[rowId];\n          if (rowInfo) {\n            prev.push(row);\n          }\n          return prev;\n        }, []);\n      } else {\n        this.states.expandRows = [];\n      }\n    },\n    toggleRowExpansion: function toggleRowExpansion(row, expanded) {\n      var changed = toggleRowStatus(this.states.expandRows, row, expanded);\n      if (changed) {\n        this.table.$emit('expand-change', row, this.states.expandRows.slice());\n        this.scheduleLayout();\n      }\n    },\n    setExpandRowKeys: function setExpandRowKeys(rowKeys) {\n      this.assertRowKey();\n      // TODO：这里的代码可以优化\n      var _states2 = this.states,\n          data = _states2.data,\n          rowKey = _states2.rowKey;\n\n      var keysMap = getKeysMap(data, rowKey);\n      this.states.expandRows = rowKeys.reduce(function (prev, cur) {\n        var info = keysMap[cur];\n        if (info) {\n          prev.push(info.row);\n        }\n        return prev;\n      }, []);\n    },\n    isRowExpanded: function isRowExpanded(row) {\n      var _states3 = this.states,\n          _states3$expandRows = _states3.expandRows,\n          expandRows = _states3$expandRows === undefined ? [] : _states3$expandRows,\n          rowKey = _states3.rowKey;\n\n      if (rowKey) {\n        var expandMap = getKeysMap(expandRows, rowKey);\n        return !!expandMap[getRowIdentity(row, rowKey)];\n      }\n      return expandRows.indexOf(row) !== -1;\n    }\n  }\n});\n// CONCATENATED MODULE: ./packages/table/src/store/current.js\n\n\n\n/* harmony default export */ var store_current = ({\n  data: function data() {\n    return {\n      states: {\n        // 不可响应的，设置 currentRowKey 时，data 不一定存在，也许无法算出正确的 currentRow\n        // 把该值缓存一下，当用户点击修改 currentRow 时，把该值重置为 null\n        _currentRowKey: null,\n        currentRow: null\n      }\n    };\n  },\n\n\n  methods: {\n    setCurrentRowKey: function setCurrentRowKey(key) {\n      this.assertRowKey();\n      this.states._currentRowKey = key;\n      this.setCurrentRowByKey(key);\n    },\n    restoreCurrentRowKey: function restoreCurrentRowKey() {\n      this.states._currentRowKey = null;\n    },\n    setCurrentRowByKey: function setCurrentRowByKey(key) {\n      var states = this.states;\n      var _states$data = states.data,\n          data = _states$data === undefined ? [] : _states$data,\n          rowKey = states.rowKey;\n\n      var currentRow = null;\n      if (rowKey) {\n        currentRow = Object(util_[\"arrayFind\"])(data, function (item) {\n          return getRowIdentity(item, rowKey) === key;\n        });\n      }\n      states.currentRow = currentRow;\n    },\n    updateCurrentRow: function updateCurrentRow(currentRow) {\n      var states = this.states,\n          table = this.table;\n\n      var oldCurrentRow = states.currentRow;\n      if (currentRow && currentRow !== oldCurrentRow) {\n        states.currentRow = currentRow;\n        table.$emit('current-change', currentRow, oldCurrentRow);\n        return;\n      }\n      if (!currentRow && oldCurrentRow) {\n        states.currentRow = null;\n        table.$emit('current-change', null, oldCurrentRow);\n      }\n    },\n    updateCurrentRowData: function updateCurrentRowData() {\n      var states = this.states,\n          table = this.table;\n      var rowKey = states.rowKey,\n          _currentRowKey = states._currentRowKey;\n      // data 为 null 时，解构时的默认值会被忽略\n\n      var data = states.data || [];\n      var oldCurrentRow = states.currentRow;\n\n      // 当 currentRow 不在 data 中时尝试更新数据\n      if (data.indexOf(oldCurrentRow) === -1 && oldCurrentRow) {\n        if (rowKey) {\n          var currentRowKey = getRowIdentity(oldCurrentRow, rowKey);\n          this.setCurrentRowByKey(currentRowKey);\n        } else {\n          states.currentRow = null;\n        }\n        if (states.currentRow === null) {\n          table.$emit('current-change', null, oldCurrentRow);\n        }\n      } else if (_currentRowKey) {\n        // 把初始时下设置的 rowKey 转化成 rowData\n        this.setCurrentRowByKey(_currentRowKey);\n        this.restoreCurrentRowKey();\n      }\n    }\n  }\n});\n// CONCATENATED MODULE: ./packages/table/src/store/tree.js\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\n\n\n/* harmony default export */ var tree = ({\n  data: function data() {\n    return {\n      states: {\n        // defaultExpandAll 存在于 expand.js 中，这里不重复添加\n        // 在展开行中，expandRowKeys 会被转化成 expandRows，expandRowKeys 这个属性只是记录了 TreeTable 行的展开\n        // TODO: 拆分为独立的 TreeTable，统一用法\n        expandRowKeys: [],\n        treeData: {},\n        indent: 16,\n        lazy: false,\n        lazyTreeNodeMap: {},\n        lazyColumnIdentifier: 'hasChildren',\n        childrenColumnName: 'children'\n      }\n    };\n  },\n\n\n  computed: {\n    // 嵌入型的数据，watch 无法是检测到变化 https://github.com/ElemeFE/element/issues/14998\n    // TODO: 使用 computed 解决该问题，是否会造成性能问题？\n    // @return { id: { level, children } }\n    normalizedData: function normalizedData() {\n      if (!this.states.rowKey) return {};\n      var data = this.states.data || [];\n      return this.normalize(data);\n    },\n\n    // @return { id: { children } }\n    // 针对懒加载的情形，不处理嵌套数据\n    normalizedLazyNode: function normalizedLazyNode() {\n      var _states = this.states,\n          rowKey = _states.rowKey,\n          lazyTreeNodeMap = _states.lazyTreeNodeMap,\n          lazyColumnIdentifier = _states.lazyColumnIdentifier;\n\n      var keys = Object.keys(lazyTreeNodeMap);\n      var res = {};\n      if (!keys.length) return res;\n      keys.forEach(function (key) {\n        if (lazyTreeNodeMap[key].length) {\n          var item = { children: [] };\n          lazyTreeNodeMap[key].forEach(function (row) {\n            var currentRowKey = getRowIdentity(row, rowKey);\n            item.children.push(currentRowKey);\n            if (row[lazyColumnIdentifier] && !res[currentRowKey]) {\n              res[currentRowKey] = { children: [] };\n            }\n          });\n          res[key] = item;\n        }\n      });\n      return res;\n    }\n  },\n\n  watch: {\n    normalizedData: 'updateTreeData',\n    normalizedLazyNode: 'updateTreeData'\n  },\n\n  methods: {\n    normalize: function normalize(data) {\n      var _states2 = this.states,\n          childrenColumnName = _states2.childrenColumnName,\n          lazyColumnIdentifier = _states2.lazyColumnIdentifier,\n          rowKey = _states2.rowKey,\n          lazy = _states2.lazy;\n\n      var res = {};\n      walkTreeNode(data, function (parent, children, level) {\n        var parentId = getRowIdentity(parent, rowKey);\n        if (Array.isArray(children)) {\n          res[parentId] = {\n            children: children.map(function (row) {\n              return getRowIdentity(row, rowKey);\n            }),\n            level: level\n          };\n        } else if (lazy) {\n          // 当 children 不存在且 lazy 为 true，该节点即为懒加载的节点\n          res[parentId] = {\n            children: [],\n            lazy: true,\n            level: level\n          };\n        }\n      }, childrenColumnName, lazyColumnIdentifier);\n      return res;\n    },\n    updateTreeData: function updateTreeData() {\n      var nested = this.normalizedData;\n      var normalizedLazyNode = this.normalizedLazyNode;\n      var keys = Object.keys(nested);\n      var newTreeData = {};\n      if (keys.length) {\n        var _states3 = this.states,\n            oldTreeData = _states3.treeData,\n            defaultExpandAll = _states3.defaultExpandAll,\n            expandRowKeys = _states3.expandRowKeys,\n            lazy = _states3.lazy;\n\n        var rootLazyRowKeys = [];\n        var getExpanded = function getExpanded(oldValue, key) {\n          var included = defaultExpandAll || expandRowKeys && expandRowKeys.indexOf(key) !== -1;\n          return !!(oldValue && oldValue.expanded || included);\n        };\n        // 合并 expanded 与 display，确保数据刷新后，状态不变\n        keys.forEach(function (key) {\n          var oldValue = oldTreeData[key];\n          var newValue = _extends({}, nested[key]);\n          newValue.expanded = getExpanded(oldValue, key);\n          if (newValue.lazy) {\n            var _ref = oldValue || {},\n                _ref$loaded = _ref.loaded,\n                loaded = _ref$loaded === undefined ? false : _ref$loaded,\n                _ref$loading = _ref.loading,\n                loading = _ref$loading === undefined ? false : _ref$loading;\n\n            newValue.loaded = !!loaded;\n            newValue.loading = !!loading;\n            rootLazyRowKeys.push(key);\n          }\n          newTreeData[key] = newValue;\n        });\n        // 根据懒加载数据更新 treeData\n        var lazyKeys = Object.keys(normalizedLazyNode);\n        if (lazy && lazyKeys.length && rootLazyRowKeys.length) {\n          lazyKeys.forEach(function (key) {\n            var oldValue = oldTreeData[key];\n            var lazyNodeChildren = normalizedLazyNode[key].children;\n            if (rootLazyRowKeys.indexOf(key) !== -1) {\n              // 懒加载的 root 节点，更新一下原有的数据，原来的 children 一定是空数组\n              if (newTreeData[key].children.length !== 0) {\n                throw new Error('[ElTable]children must be an empty array.');\n              }\n              newTreeData[key].children = lazyNodeChildren;\n            } else {\n              var _ref2 = oldValue || {},\n                  _ref2$loaded = _ref2.loaded,\n                  loaded = _ref2$loaded === undefined ? false : _ref2$loaded,\n                  _ref2$loading = _ref2.loading,\n                  loading = _ref2$loading === undefined ? false : _ref2$loading;\n\n              newTreeData[key] = {\n                lazy: true,\n                loaded: !!loaded,\n                loading: !!loading,\n                expanded: getExpanded(oldValue, key),\n                children: lazyNodeChildren,\n                level: ''\n              };\n            }\n          });\n        }\n      }\n      this.states.treeData = newTreeData;\n      this.updateTableScrollY();\n    },\n    updateTreeExpandKeys: function updateTreeExpandKeys(value) {\n      this.states.expandRowKeys = value;\n      this.updateTreeData();\n    },\n    toggleTreeExpansion: function toggleTreeExpansion(row, expanded) {\n      this.assertRowKey();\n\n      var _states4 = this.states,\n          rowKey = _states4.rowKey,\n          treeData = _states4.treeData;\n\n      var id = getRowIdentity(row, rowKey);\n      var data = id && treeData[id];\n      if (id && data && 'expanded' in data) {\n        var oldExpanded = data.expanded;\n        expanded = typeof expanded === 'undefined' ? !data.expanded : expanded;\n        treeData[id].expanded = expanded;\n        if (oldExpanded !== expanded) {\n          this.table.$emit('expand-change', row, expanded);\n        }\n        this.updateTableScrollY();\n      }\n    },\n    loadOrToggle: function loadOrToggle(row) {\n      this.assertRowKey();\n      var _states5 = this.states,\n          lazy = _states5.lazy,\n          treeData = _states5.treeData,\n          rowKey = _states5.rowKey;\n\n      var id = getRowIdentity(row, rowKey);\n      var data = treeData[id];\n      if (lazy && data && 'loaded' in data && !data.loaded) {\n        this.loadData(row, id, data);\n      } else {\n        this.toggleTreeExpansion(row);\n      }\n    },\n    loadData: function loadData(row, key, treeNode) {\n      var _this = this;\n\n      var load = this.table.load;\n      var rawTreeData = this.states.treeData;\n\n      if (load && !rawTreeData[key].loaded) {\n        rawTreeData[key].loading = true;\n        load(row, treeNode, function (data) {\n          if (!Array.isArray(data)) {\n            throw new Error('[ElTable] data must be an array');\n          }\n          var _states6 = _this.states,\n              lazyTreeNodeMap = _states6.lazyTreeNodeMap,\n              treeData = _states6.treeData;\n\n          treeData[key].loading = false;\n          treeData[key].loaded = true;\n          treeData[key].expanded = true;\n          if (data.length) {\n            _this.$set(lazyTreeNodeMap, key, data);\n          }\n          _this.table.$emit('expand-change', row, true);\n        });\n      }\n    }\n  }\n});\n// CONCATENATED MODULE: ./packages/table/src/store/watcher.js\n\n\n\n\n\n\n\nvar watcher_sortData = function sortData(data, states) {\n  var sortingColumn = states.sortingColumn;\n  if (!sortingColumn || typeof sortingColumn.sortable === 'string') {\n    return data;\n  }\n  return util_orderBy(data, states.sortProp, states.sortOrder, sortingColumn.sortMethod, sortingColumn.sortBy);\n};\n\nvar doFlattenColumns = function doFlattenColumns(columns) {\n  var result = [];\n  columns.forEach(function (column) {\n    if (column.children) {\n      result.push.apply(result, doFlattenColumns(column.children));\n    } else {\n      result.push(column);\n    }\n  });\n  return result;\n};\n\n/* harmony default export */ var watcher = (external_vue_default.a.extend({\n  data: function data() {\n    return {\n      states: {\n        // 3.0 版本后要求必须设置该属性\n        rowKey: null,\n\n        // 渲染的数据来源，是对 table 中的 data 过滤排序后的结果\n        data: [],\n\n        // 是否包含固定列\n        isComplex: false,\n\n        // 列\n        _columns: [], // 不可响应的\n        originColumns: [],\n        columns: [],\n        fixedColumns: [],\n        rightFixedColumns: [],\n        leafColumns: [],\n        fixedLeafColumns: [],\n        rightFixedLeafColumns: [],\n        leafColumnsLength: 0,\n        fixedLeafColumnsLength: 0,\n        rightFixedLeafColumnsLength: 0,\n\n        // 选择\n        isAllSelected: false,\n        selection: [],\n        reserveSelection: false,\n        selectOnIndeterminate: false,\n        selectable: null,\n\n        // 过滤\n        filters: {}, // 不可响应的\n        filteredData: null,\n\n        // 排序\n        sortingColumn: null,\n        sortProp: null,\n        sortOrder: null,\n\n        hoverRow: null\n      }\n    };\n  },\n\n\n  mixins: [expand, store_current, tree],\n\n  methods: {\n    // 检查 rowKey 是否存在\n    assertRowKey: function assertRowKey() {\n      var rowKey = this.states.rowKey;\n      if (!rowKey) throw new Error('[ElTable] prop row-key is required');\n    },\n\n\n    // 更新列\n    updateColumns: function updateColumns() {\n      var states = this.states;\n      var _columns = states._columns || [];\n      states.fixedColumns = _columns.filter(function (column) {\n        return column.fixed === true || column.fixed === 'left';\n      });\n      states.rightFixedColumns = _columns.filter(function (column) {\n        return column.fixed === 'right';\n      });\n\n      if (states.fixedColumns.length > 0 && _columns[0] && _columns[0].type === 'selection' && !_columns[0].fixed) {\n        _columns[0].fixed = true;\n        states.fixedColumns.unshift(_columns[0]);\n      }\n\n      var notFixedColumns = _columns.filter(function (column) {\n        return !column.fixed;\n      });\n      states.originColumns = [].concat(states.fixedColumns).concat(notFixedColumns).concat(states.rightFixedColumns);\n\n      var leafColumns = doFlattenColumns(notFixedColumns);\n      var fixedLeafColumns = doFlattenColumns(states.fixedColumns);\n      var rightFixedLeafColumns = doFlattenColumns(states.rightFixedColumns);\n\n      states.leafColumnsLength = leafColumns.length;\n      states.fixedLeafColumnsLength = fixedLeafColumns.length;\n      states.rightFixedLeafColumnsLength = rightFixedLeafColumns.length;\n\n      states.columns = [].concat(fixedLeafColumns).concat(leafColumns).concat(rightFixedLeafColumns);\n      states.isComplex = states.fixedColumns.length > 0 || states.rightFixedColumns.length > 0;\n    },\n\n\n    // 更新 DOM\n    scheduleLayout: function scheduleLayout(needUpdateColumns) {\n      if (needUpdateColumns) {\n        this.updateColumns();\n      }\n      this.table.debouncedUpdateLayout();\n    },\n\n\n    // 选择\n    isSelected: function isSelected(row) {\n      var _states$selection = this.states.selection,\n          selection = _states$selection === undefined ? [] : _states$selection;\n\n      return selection.indexOf(row) > -1;\n    },\n    clearSelection: function clearSelection() {\n      var states = this.states;\n      states.isAllSelected = false;\n      var oldSelection = states.selection;\n      if (oldSelection.length) {\n        states.selection = [];\n        this.table.$emit('selection-change', []);\n      }\n    },\n    cleanSelection: function cleanSelection() {\n      var states = this.states;\n      var data = states.data,\n          rowKey = states.rowKey,\n          selection = states.selection;\n\n      var deleted = void 0;\n      if (rowKey) {\n 